if (i != 1 || j != 0)
views.get(currentView).timeToSwitch = 0;
if ((views.get(currentView).timeToSwitch <= System.currentTimeMillis() || DCNL (currentView + 1 < views.size() && !views.get(currentView + 1).mainVideo.isBlack())) DCNL && views.get(currentView).isVisible()) {
emptyView.timeToSwitch = Long.MAX_VALUE;
views.get(currentView).timeToSwitch = System.currentTimeMillis() + timeToSwitch; // FIX!!!
long timeToSwitch = Long.MAX_VALUE;
double emptyPixelMeanValue = 1.0;
void givException() throws  HigherException { DCNL throw new HigherException(); DCNL  DCNL public void givException()throws HigherException{ DCNL throw new MidleException(); DCNL public void givException()throws MidleException{ DCNL throw new LowerException(); DCNL } DCNL public static void run() throws Exception { DCNL  DCNL  DCNL 
public class FriendsApplication   implements CommandLineRunner {
@Query("delete from ProductStepUp p where p.id = ?1 ")
System.err.println("productStepUp.getId()=" + productStepUp.getId());
int id = context.getResources().getIdentifier("ic_list_" + countryCode.toLowerCase(), "drawable", context.getPackageName());
pickerList.setLayoutManager(new LinearLayoutManager(this, RecyclerView.VERTICAL, false));
name = tokens[i + 1].replaceAll("_", " ");
} else {
public static Matching run(@NotNull HospitalTable hospitalTable, DCNL ResidentTable residentTable, DCNL @NotNull Queue<Resident> freeResidents) {
(currentResidentPref.size() > 0)) {
if (m.hasAssignment(currentResident) || currentResidentPref.size() == 0) {
String mySummary = myObj.has("summary")? (String) myObj.get("summary") : ""; DCNL String myType = myObj.has("type") ? (String) myObj.get("type") : "";
SourceParser.parse(javaSource, jarSource, jars, storage);
List<PropTypeBean> newPropNameList = new ArrayList<>(usePropNameList);
int maxSeats = Integer.parseInt((String) jsonObject.get("maxSeats")); DCNL System.out.println(type + userName + userID + description + latitude + longitude + pickupTimeFrame + pickupTimeFrame + maxSeats + pickupLocation);
package org.twak.tweed.gen; DCNL  DCNL import java.io.BufferedWriter; DCNL import java.io.File; DCNL import java.io.FileWriter; DCNL import java.io.IOException; DCNL import java.util.ArrayList; DCNL import java.util.Arrays; DCNL import java.util.Collections; DCNL import java.util.HashMap; DCNL import java.util.List; DCNL import java.util.Map; DCNL import java.util.Random; DCNL import java.util.Set; DCNL import java.util.concurrent.atomic.AtomicInteger; DCNL import java.util.stream.Collectors; DCNL  DCNL import javax.swing.JComponent; DCNL import javax.swing.JPanel; DCNL import javax.vecmath.Matrix4d; DCNL import javax.vecmath.Point2d; DCNL import javax.vecmath.Point3d; DCNL import javax.vecmath.Vector3d; DCNL  DCNL import org.apache.commons.math3.exception.ConvergenceException; DCNL import org.apache.commons.math3.geometry.euclidean.twod.Vector2D; DCNL import org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D; DCNL import org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain; DCNL import org.geotools.referencing.crs.DefaultGeocentricCRS; DCNL import org.opengis.referencing.crs.CoordinateReferenceSystem; DCNL import org.twak.siteplan.jme.Jme3z; DCNL import org.twak.tweed.GenHandlesSelect; DCNL import org.twak.tweed.Tweed; DCNL import org.twak.tweed.TweedSettings; DCNL import org.twak.tweed.tools.FacadeTool; DCNL import org.twak.tweed.tools.SelectTool; DCNL import org.twak.utils.Jz; DCNL import org.twak.utils.Line; DCNL import org.twak.utils.Mathz; DCNL import org.twak.utils.Pair; DCNL import org.twak.utils.Parallel; DCNL import org.twak.utils.Parallel.Complete; DCNL import org.twak.utils.Parallel.Work; DCNL import org.twak.utils.Parallel.WorkFactory; DCNL import org.twak.utils.collections.Loop; DCNL import org.twak.utils.collections.LoopL; DCNL import org.twak.utils.collections.Loopz; DCNL import org.twak.utils.collections.SuperLoop; DCNL import org.twak.utils.geom.DRectangle; DCNL import org.twak.utils.geom.Graph2D; DCNL import org.twak.utils.geom.Line3d; DCNL import org.twak.utils.geom.ObjRead; DCNL import org.twak.utils.geom.UnionWalker; DCNL import org.twak.utils.streams.InaxPoint2dCollector; DCNL import org.twak.utils.streams.InaxPoint3dCollector; DCNL import org.twak.utils.ui.AutoCheckbox; DCNL import org.twak.utils.ui.ListDownLayout; DCNL import org.twak.viewTrace.Closer; DCNL import org.twak.viewTrace.FacadeFinder; DCNL import org.twak.viewTrace.FacadeFinder.FacadeMode; DCNL import org.twak.viewTrace.GMLReader; DCNL import org.twak.viewTrace.facades.GreebleSkel; DCNL  DCNL import com.google.common.io.Files; DCNL import com.jme3.material.Material; DCNL import com.jme3.math.ColorRGBA; DCNL import com.jme3.terrain.geomipmap.TerrainLodControl; DCNL import com.jme3.terrain.geomipmap.TerrainQuad; DCNL import com.jme3.terrain.heightmap.AbstractHeightMap; DCNL import com.jme3.terrain.heightmap.ImageBasedHeightMap; DCNL import com.jme3.texture.Texture; DCNL import com.vividsolutions.jts.geom.Envelope; DCNL import com.vividsolutions.jts.index.quadtree.Quadtree; DCNL  DCNL public class GISGen  extends LineGen3d implements ICanSave { DCNL  DCNL public static final String CROPPED_OBJ = "cropped.obj"; DCNL  DCNL transient List<Line3d> lines = new ArrayList(); DCNL transient Map<Integer,LoopL<Point3d>> blocks = new HashMap<>(); DCNL transient Map<Loop<Point3d>,LoopL<Point3d>> lot2block = new HashMap<>(); DCNL  DCNL transient List<Loop<Point3d>> lots = new ArrayList<>(); DCNL transient Map<Integer, BlockGen> lastMesh = new HashMap<>(); DCNL  DCNL File objFile; DCNL String gmlFile; DCNL String crs; DCNL  DCNL public boolean showTerrain = false; DCNL  DCNL public GISGen() {} DCNL  DCNL public GISGen( File objFile, Tweed tweed ) { DCNL  DCNL super( "gis(o) " + objFile.getName(), tweed ); DCNL this.objFile = objFile ; DCNL initObj(); DCNL } DCNL  DCNL @Override DCNL public void calculate() { DCNL super.calculate(); DCNL  DCNL if ( showTerrain ) { DCNL DRectangle bounds = rect(); DCNL int size = 1 + Mathz.nextPower2( (int) Math.max( bounds.width, bounds.height ) ); DCNL Texture heightMapImage = tweed.getAssetManager().loadTexture( GreebleSkel.TILE_JPG ); DCNL AbstractHeightMap heightmap = null; DCNL heightmap = new ImageBasedHeightMap( heightMapImage.getImage(), 1f ); DCNL heightmap.load(); DCNL  DCNL TerrainQuad terrain = new TQ( "terrain", 65, size, heightmap.getHeightMap() ); DCNL  DCNL Material mat = new Material( tweed.getAssetManager(), "Common/MatDefs/Light/Lighting.j3md" ); DCNL ColorRGBA c = Jme3z.toJme( color ); DCNL mat.setColor( "Diffuse", c ); DCNL mat.setColor( "Ambient", c.mult( 0.1f ) ); DCNL mat.setBoolean( "UseMaterialColors", true ); DCNL  DCNL terrain.setMaterial( mat ); DCNL Point2d gc = bounds.getCenter(); DCNL terrain.setLocalTranslation( (float) gc.x, -10f, (float) gc.y ); DCNL terrain.setLocalScale( 1f, 0.05f, 1f ); DCNL  DCNL TerrainLodControl control = new TerrainLodControl( terrain, Collections.singletonList( tweed.getCamera() ) ); DCNL terrain.addControl( control ); DCNL  DCNL gNode.attachChild( terrain ); DCNL } DCNL } DCNL  DCNL public GISGen( String gmlFile, Matrix4d toOrigin, String crs, Tweed tweed ) { DCNL  DCNL super( "gis(g) " + new File( gmlFile ).getName(), tweed ); DCNL this.filename = gmlFile; DCNL this.gmlFile = gmlFile; DCNL this.crs = crs; DCNL  DCNL initGML(); DCNL } DCNL  DCNL public GISGen(Tweed tweed) { DCNL super ("gis(d)", tweed); DCNL this.crs = "WGS84"; DCNL initDefault(); DCNL } DCNL  DCNL @Override DCNL  DCNL public void onLoad( Tweed tweed ) { DCNL super.onLoad( tweed ); DCNL  DCNL lines = new ArrayList<>(); DCNL blocks = new HashMap<>(); DCNL lots = new ArrayList<>(); DCNL lot2block = new HashMap<>(); DCNL lastMesh = new HashMap<>(); DCNL  DCNL if (objFile != null) // fixme: subclass pls DCNL initObj(); DCNL else if (gmlFile != null) DCNL initGML(); DCNL } DCNL  DCNL public void initDefault() { DCNL  DCNL LoopL<Point3d> fromOBJ = new LoopL<>(); DCNL Closer<Point3d> closer = new Closer<>(); DCNL lines = new ArrayList<>(); DCNL  DCNL  DCNL Loop<Point3d> loop = fromOBJ.newLoop(); DCNL  DCNL List<Point3d> points = new ArrayList<>(); DCNL  DCNL double[][] verts = new double[][] {{-10, -10}, {-10, 10}, {10, 10}, {10, -10} }; DCNL  DCNL for (int i = 0; i < verts.length; i++) { DCNL  DCNL double[] cur = verts[i], next = verts[ ( i+1 ) % verts.length ]; DCNL  DCNL Point3d p = new Point3d ( cur[0], 0, cur[1] ), DCNL n = new Point3d ( next[0], 0, next[1]); DCNL  DCNL loop.append( p ); DCNL points.add( p ); DCNL  DCNL lines.add( new Line3d( p, n ) ); DCNL } DCNL closer.add( points.toArray( new Point3d[points.size()]) ); DCNL  DCNL createBlocks( closer, fromOBJ ); DCNL } DCNL  DCNL public void initObj() { DCNL  DCNL ObjRead gObj = new ObjRead( tweed.toWorkspace( objFile ) ); DCNL  DCNL LoopL<Point3d> fromOBJ = new LoopL<>(); DCNL Closer<Point3d> closer = new Closer<>(); DCNL lines = new ArrayList<>(); DCNL  DCNL for (int[] face : gObj.faces) { DCNL  DCNL Loop<Point3d> loop = fromOBJ.newLoop(); DCNL  DCNL List<Point3d> points = new ArrayList<>(); DCNL  DCNL for (int i = 0; i < face.length; i++) { DCNL  DCNL Point3d p = new Point3d ( gObj.pts[face[i]] ), DCNL n = new Point3d ( gObj.pts[ face[ ( i + 1 ) % face.length ] ] ); DCNL  DCNL n.y = p.y = 0;//! DCNL loop.append( p ); DCNL points.add( p ); DCNL  DCNL lines.add( new Line3d( p, n ) ); DCNL } DCNL closer.add( points.toArray( new Point3d[points.size()]) ); DCNL } DCNL  DCNL createBlocks( closer, fromOBJ ); DCNL } DCNL  DCNL public void initGML() { DCNL Closer<Point3d> closer = new Closer<>(); DCNL  DCNL LoopL<Point3d> polies = null; DCNL  DCNL CoordinateReferenceSystem crss = Tweed.kludgeCMS.get( crs ); DCNL  DCNL if (crss == null) DCNL return; DCNL  DCNL polies = GMLReader.readGML3d( Tweed.toWorkspace( new File( gmlFile ) ), DCNL DefaultGeocentricCRS.CARTESIAN, DCNL crss ); DCNL  DCNL  DCNL for ( Loop<Point3d> poly : polies) { DCNL  DCNL List<Point3d> points = new ArrayList(); DCNL  DCNL for ( Pair<Point3d, Point3d> pair : poly.pairs() ) { DCNL  DCNL TweedSettings.settings.toOrigin.transform( pair.first() ); DCNL  DCNL pair.first().y = 0; DCNL points.add( pair.first() ); DCNL  DCNL lines.add( new Line3d(pair.first(), pair.second()) ); DCNL } DCNL  DCNL if (TweedSettings.settings.flipFootprints) DCNL poly.reverse(); DCNL  DCNL closer.add( points.toArray( new Point3d[points.size()]) ); DCNL } DCNL  DCNL createBlocks( closer, polies ); DCNL } DCNL  DCNL private void createBlocks( Closer<Point3d> closer, LoopL<Point3d> polies ) { DCNL Map<Point3d, Integer> bMap = closer.findMap(); DCNL  DCNL if (TweedSettings.settings.snapFootprintVert > 0) { DCNL Loopz.dirtySnap(polies, TweedSettings.settings.snapFootprintVert); DCNL } DCNL  DCNL for ( Loop<Point3d> poly : polies) DCNL if (poly.count() > 0) { DCNL int key = bMap.get ( poly.start.get() ); DCNL LoopL<Point3d> loopl = blocks.get(key); DCNL if (loopl == null) DCNL blocks.put(key, loopl = new LoopL<>() ); DCNL  DCNL if (TweedSettings.settings.calculateFootprintNormals) { DCNL if (Loopz.area( Loopz.to2dLoop( poly, 1, null ) ) < 0) DCNL poly.reverse(); DCNL } DCNL  DCNL loopl.add(poly); DCNL  DCNL lots.add( poly ); DCNL lot2block.put( poly, loopl ); DCNL } DCNL } DCNL  DCNL @Override DCNL public Map<Loop<Point3d>, Integer> getFaces() { DCNL  DCNL Map<Loop<Point3d>, Integer> out = new HashMap<>(); DCNL  DCNL for ( int i : blocks.keySet() ) DCNL for ( Loop<Point3d> p : blocks.get( i ) ) DCNL out.put( p, i ); DCNL  DCNL return out; DCNL } DCNL  DCNL @Override DCNL public Iterable<Line3d> getLines() { DCNL return lines; DCNL } DCNL  DCNL  DCNL private transient boolean doneStreetWidth = false; DCNL  DCNL @Override DCNL protected void polyClicked( int callbackI ) { DCNL  DCNL if (tweed.frame.selectedGen instanceof GenHandlesSelect) { DCNL  DCNL ((GenHandlesSelect)tweed.frame.selectedGen).blockSelected ( blocks.get( callbackI ), lastMesh.get( callbackI ) ); DCNL } DCNL else if ( tweed.tool.getClass() == SelectTool.class ) DCNL importMesh( callbackI ); DCNL else if ( tweed.tool.getClass() == FacadeTool.class ) { DCNL startRender( callbackI ); DCNL } DCNL  DCNL } DCNL  DCNL public void startRender( int callbackI /* -1 for all */ ) { DCNL  DCNL LotInfoGen li = tweed.frame.getGenOf( LotInfoGen.class ); DCNL GISGen gis = tweed.frame.getGenOf( GISGen.class ); DCNL  DCNL  DCNL  DCNL AtomicInteger count = new AtomicInteger( 0 ); DCNL Random randy = new Random(System.nanoTime()); DCNL  DCNL WorkFactory<LoopL<Point3d>> b = findBlocks( callbackI, count, randy ); DCNL  DCNL File description = new File ( Tweed.DATA + File.separator + FeatureCache.SINGLE_RENDERED_FOLDER + File.separator +"params.txt" ); DCNL  DCNL try { DCNL description.getParentFile().mkdirs(); DCNL BufferedWriter descBW = new BufferedWriter( new FileWriter( description ) ); DCNL  DCNL PanoGen feedback = null; DCNL  DCNL new Parallel<LoopL<Point3d>, Integer>( b, new Work<LoopL<Point3d>, Integer>() { DCNL public Integer work( LoopL<Point3d> in ) { DCNL  DCNL double area = Loopz.area( Loopz.toXZLoop( in ) ); DCNL  DCNL if (area < 10) DCNL return 0; DCNL  DCNL BlockGen.findWidths( in, gis ); DCNL  DCNL if (li != null) DCNL for ( Loop loop : in ) DCNL li.fetchOSProperties( (SuperLoop<?>) loop ); DCNL  DCNL System.out.println( "rendering... (" + count + " images written)" ); DCNL  DCNL ( (FacadeTool) tweed.tool ).renderFacade( in, count, descBW, feedback ); DCNL  DCNL try { DCNL descBW.flush(); DCNL } catch ( IOException e ) { DCNL e.printStackTrace(); DCNL } DCNL  DCNL return 1; DCNL } DCNL }, new Complete<Integer>() { DCNL  DCNL @Override DCNL public void complete( Set<Integer> dones ) { DCNL  DCNL System.out.print( "finished rendering " + count + " images\nwriting description..." ); DCNL  DCNL try { DCNL descBW.close(); DCNL } catch ( IOException e ) { DCNL e.printStackTrace(); DCNL } DCNL  DCNL System.out.print( "done" ); DCNL  DCNL } DCNL }, false, 16 ); DCNL  DCNL } catch ( IOException e1 ) { DCNL e1.printStackTrace(); DCNL } DCNL } DCNL  DCNL private WorkFactory<LoopL<Point3d>> findBlocks( int callbackI, AtomicInteger count, Random randy ) { DCNL WorkFactory<LoopL<Point3d>> b; DCNL  DCNL int TOGET = Integer.MAX_VALUE; DCNL  DCNL if ( callbackI >= 0 ) DCNL b = new Parallel.ListWF<LoopL<Point3d>>( Collections.singletonList( blocks.get( callbackI ) ) ); DCNL else { DCNL  DCNL if (FacadeFinder.facadeMode == FacadeMode.KANGAROO ) DCNL b = new WorkFactory<LoopL<Point3d>>() { DCNL @Override DCNL public LoopL<Point3d> generateWork() { DCNL int i = count.get(); DCNL if (i > TOGET) DCNL return null; DCNL else DCNL { DCNL LoopL<Point3d> ll = lot2block.get( lots.get(randy.nextInt( lots.size() )) ); DCNL return ll; DCNL } DCNL } DCNL  DCNL @Override DCNL public boolean shouldAbort() { DCNL return false; DCNL } DCNL }; DCNL else DCNL b = new Parallel.ListWF<LoopL<Point3d>>( new ArrayList( blocks.values() ) ); DCNL  DCNL } DCNL return b; DCNL } DCNL  DCNL private void ensureStreetWidths( int callbackI, LotInfoGen li, GISGen gis ) { DCNL if ( li != null && gis != null && ( (FacadeTool) tweed.tool ).singleFolder ) { DCNL  DCNL if ( callbackI >= 0 ) { DCNL  DCNL BlockGen.findWidths( blocks.get( callbackI ), gis ); DCNL for ( Loop loop : blocks.get( callbackI ) ) DCNL li.fetchOSProperties( (SuperLoop<?>) loop ); DCNL } else if ( !doneStreetWidth ) { DCNL  DCNL int count = 0; DCNL  DCNL for ( LoopL<Point3d> ll : blocks.values() ) { DCNL System.out.println( "pre-processing block " + (count++) +"/"+ blocks.size() ); DCNL BlockGen.findWidths( ll, gis ); DCNL  DCNL for ( Loop loop : ll ) DCNL li.fetchOSProperties( (SuperLoop) loop ); DCNL  DCNL } DCNL doneStreetWidth = true; DCNL } DCNL } DCNL } DCNL  DCNL @Override DCNL public JComponent getUI() { DCNL  DCNL JPanel out = new JPanel(new ListDownLayout()); DCNL  DCNL out.add(new AutoCheckbox( this, "showTerrain", "terrain" ) { DCNL public void updated(boolean selected) { DCNL calculateOnJmeThread(); DCNL }; DCNL } ); DCNL  DCNL return out; DCNL } DCNL  DCNL private void importMesh( int index ) { DCNL  DCNL LoopL<Point3d> polies = blocks.get( index ); DCNL  DCNL List<Vector2D> verts = polies.stream().flatMap( ll -> ll.streamAble() ).map( x -> { DCNL Line3d l = new Line3d( x.get(), x.getNext().get() ); DCNL l.move( perp( l.dir(), TweedSettings.settings.blockMeshPadding ) ); DCNL return new Vector2D( l.start.x, l.start.z ); DCNL } ).collect( Collectors.toList() ); DCNL  DCNL double tol = 0.0001; DCNL ConvexHull2D chull = null; DCNL  DCNL while ( tol < 10 ) { DCNL try { DCNL chull = new MonotoneChain( false, tol ).generate( verts ); DCNL tol = 1000; DCNL } catch ( ConvergenceException e ) { DCNL tol *= 10; DCNL } DCNL } DCNL  DCNL if (chull == null) { DCNL System.out.println( "unable to find hull" ); DCNL return; DCNL } DCNL  DCNL Loop<Point3d> hull = new Loop<Point3d>( ( Arrays.stream( chull.getLineSegments() ).map( x -> new Point3d( x.getStart().getX(), 0, x.getStart().getY() ) ).collect( Collectors.toList() ) ) ); DCNL  DCNL File root = new File( Tweed.SCRATCH + "meshes" + File.separator ); DCNL  DCNL int i = 0; DCNL File l; DCNL  DCNL while ( ( l = new File( root, "" + i ) ).exists() ) DCNL i++; DCNL  DCNL l.mkdirs(); DCNL  DCNL File croppedFile = new File( l, CROPPED_OBJ ); DCNL  DCNL boolean found = false; DCNL  DCNL for ( Gen gen : tweed.frame.getGensOf( MiniGen.class ) ) { // minigen == optimised obj DCNL  DCNL ( (MiniGen) gen ).clip( hull, croppedFile ); DCNL  DCNL  DCNL found = true; DCNL } DCNL  DCNL if (!found) DCNL  DCNL for ( Gen gen : tweed.frame.getGensOf( MeshGen.class ) ) { // obj == just import whole obj DCNL  DCNL ObjGen objg = (ObjGen) gen; DCNL  DCNL try { DCNL Files.asByteSource( objg.getFile() ).copyTo (Files.asByteSink( croppedFile )); DCNL objg.setVisible( false ); DCNL found = true; DCNL } catch ( IOException e ) { DCNL e.printStackTrace(); DCNL } DCNL } DCNL  DCNL if ( found ) { DCNL Graph2D g2 = new Graph2D(); DCNL  DCNL polies.stream().flatMap( ll -> ll.streamAble() ).forEach( x -> g2.add( new Point2d( x.get().x, x.get().z ), new Point2d( x.getNext().get().x, x.getNext().get().z ) ) ); DCNL  DCNL g2.removeInnerEdges(); DCNL  DCNL  DCNL UnionWalker uw = new UnionWalker(); DCNL for ( Point2d p : g2.map.keySet() ) DCNL for ( Line line : g2.map.get( p ) ) DCNL uw.addEdge( line.end, line.start ); DCNL  DCNL Loopz.writeXZObj( uw.findAll(), new File( l, "gis.obj" ), true ); DCNL Loopz.writeXZObj( Loopz.to2dLoop( polies, 1, null ), new File( l, "gis_footprints.obj" ), false ); DCNL  DCNL BlockGen bg = new BlockGen( l, tweed, polies ); DCNL  DCNL lastMesh.put( index, bg ); DCNL  DCNL tweed.frame.addGen( bg, true ); DCNL  DCNL tweed.frame.setSelected( bg ); DCNL  DCNL } else DCNL Jz.showOptionPane(  tweed.frame(), "Failed to find mesh from minimesh or gml layers" ); DCNL } DCNL  DCNL public static Vector3d perp( Vector3d v, double scale ) { DCNL Vector3d out = new Vector3d( -v.z, 0, v.x ); DCNL double l = out.length(); DCNL if ( l < 0.001 ) DCNL return new Vector3d(); DCNL out.scale( scale / l ); DCNL return out; DCNL } DCNL  DCNL public transient Quadtree quadtree = null; DCNL  DCNL public synchronized void ensureQuad() { DCNL if (quadtree == null) DCNL { DCNL System.out.print( "building quadtree..." ); DCNL  DCNL quadtree = new Quadtree(); DCNL  DCNL for (LoopL<Point3d> ll : blocks.values()) { DCNL  DCNL if ( Loopz.area( Loopz.toXZLoop( ll ) ) < 10 ) DCNL continue; // filter OS' kiosks DCNL  DCNL for (Loop<Point3d> footprint : ll) { DCNL Envelope e = envelope( footprint ); DCNL quadtree.insert( e, footprint  ); DCNL } DCNL } DCNL  DCNL System.out.println( "...done" ); DCNL } DCNL } DCNL  DCNL public static Envelope envelope( Loop<Point3d> footprint ) { DCNL double[] mm = footprint.stream().map( e -> Pointz.to2XZ( e )).collect( new InaxPoint2dCollector() ); DCNL Envelope e = new Envelope( mm[0], mm[1], mm[2], mm[3] ); DCNL return e; DCNL } DCNL  DCNL public DRectangle rect() { DCNL  DCNL double[] mm = lots.stream().flatMap( s -> s.stream() ).collect( new InaxPoint3dCollector() ); DCNL  DCNL return new DRectangle(mm[0], mm[4], mm[1]-mm[0], mm[5]-mm[4]); DCNL } DCNL }
package org.twak.tweed.tools; DCNL  DCNL import java.awt.Color; DCNL import java.awt.event.ActionEvent; DCNL import java.awt.event.ActionListener; DCNL  DCNL import javax.swing.JButton; DCNL import javax.swing.JFormattedTextField; DCNL import javax.swing.JLabel; DCNL import javax.swing.JOptionPane; DCNL import javax.swing.JPanel; DCNL import javax.swing.JTextArea; DCNL import javax.swing.text.NumberFormatter; DCNL import javax.vecmath.Matrix4d; DCNL import javax.vecmath.Point3d; DCNL  DCNL import org.twak.siteplan.jme.Jme3z; DCNL import org.twak.tweed.Tweed; DCNL import org.twak.tweed.gen.Gen; DCNL import org.twak.tweed.gen.MiniGen; DCNL import org.twak.utils.Jz; DCNL import org.twak.utils.ui.ListDownLayout; DCNL import org.twak.utils.ui.Rainbow; DCNL  DCNL import com.jme3.material.Material; DCNL import com.jme3.math.ColorRGBA; DCNL import com.jme3.math.FastMath; DCNL import com.jme3.math.Quaternion; DCNL import com.jme3.math.Transform; DCNL import com.jme3.math.Vector2f; DCNL import com.jme3.math.Vector3f; DCNL import com.jme3.scene.Geometry; DCNL import com.jme3.scene.Mesh.Mode; DCNL import com.jme3.scene.Node; DCNL import com.jme3.scene.Spatial; DCNL import com.jme3.scene.shape.Cylinder; DCNL  DCNL public class AlignTool extends Tool { DCNL  DCNL boolean dragging = false; DCNL  DCNL long lastClick  = 0; DCNL  DCNL Node markers = new Node(); DCNL  DCNL MiniGen toAlign = null; DCNL Vector3f[] alignMarkers = new Vector3f[2], DCNL otherMarkers = new Vector3f[2]; DCNL  DCNL  DCNL double vOffset = 0; DCNL  DCNL public AlignTool( Tweed tweed) { DCNL super (tweed); DCNL } DCNL  DCNL @Override DCNL public void activate( Tweed tweedApp ) { DCNL super.activate( tweedApp ); DCNL  DCNL this.tweed = tweedApp; DCNL  DCNL tweedApp.getRootNode().attachChild(markers); DCNL  DCNL } DCNL  DCNL @Override DCNL public void deactivate() { DCNL super.deactivate(); DCNL  DCNL showMarkers(); DCNL  DCNL markers.removeFromParent(); DCNL } DCNL  DCNL  DCNL @Override DCNL public void clickedOn( Spatial target, Vector3f loc, Vector2f cursorPosition )  { DCNL  DCNL if (target == null) DCNL return; DCNL  DCNL if (System.currentTimeMillis() - lastClick > 500) { DCNL  DCNL System.out.println( target + " " +loc ); DCNL  DCNL Vector3f locs[]; DCNL Object[] gens = target.getUserData( Gen.class.getSimpleName() ); DCNL  DCNL if (gens != null && gens[0] instanceof MiniGen) { DCNL locs = alignMarkers; DCNL toAlign = (MiniGen) gens[0]; DCNL  DCNL System.out.println("loc1 "+loc); DCNL  DCNL toAlign.gNode.getLocalTransform().transformInverseVector( loc, loc ); DCNL  DCNL System.out.println("loc2 "+loc); DCNL } DCNL else DCNL locs = otherMarkers; DCNL  DCNL int toMove = -1; DCNL  DCNL for (int i = 0; i < locs.length; i++) { DCNL if (locs[i] == null) { DCNL toMove = i; DCNL break; DCNL } DCNL if (toMove == -1 || locs[i].distance(loc) < locs[toMove].distance( loc ) ) DCNL toMove = i; DCNL } DCNL  DCNL locs[toMove] = loc; DCNL  DCNL  DCNL if ( DCNL alignMarkers[0] != null && alignMarkers[1] != null && DCNL otherMarkers[0] != null && otherMarkers[1] != null    ) DCNL doAlign(); DCNL  DCNL showMarkers(); DCNL  DCNL lastClick = System.currentTimeMillis(); DCNL } DCNL  DCNL } DCNL  DCNL private void doAlign() { DCNL  DCNL if (alignMarkers[0] == null || alignMarkers[1] == null || otherMarkers[0] == null || otherMarkers[1] == null) { DCNL  DCNL Jz.showOptionPane(null, "click meshes to create align markers"); DCNL return; DCNL } DCNL  DCNL Matrix4d toOrigin = buildFrame( alignMarkers ); DCNL toOrigin.invert(); DCNL  DCNL Matrix4d o = buildFrame( otherMarkers ); DCNL toOrigin.mul( o, toOrigin ); DCNL  DCNL toOrigin.m13 += vOffset; DCNL  DCNL Transform t = new Transform(); DCNL t.fromTransformMatrix( Jme3z.toJme ( toOrigin ) ); DCNL  DCNL toAlign.moveTo( t ); DCNL  DCNL  DCNL } DCNL  DCNL private Matrix4d buildFrame( Vector3f[] locs ) { DCNL  DCNL Vector3f dir0 = new Vector3f(locs[1]); DCNL dir0 = dir0.subtract(locs[0]); DCNL dir0.y = 0; DCNL  DCNL Vector3f dir1 = new Vector3f(0,dir0.length(),0); DCNL Vector3f dir2 = new Vector3f(-dir0.z, 0, dir0.x); DCNL  DCNL Matrix4d out = new Matrix4d(); DCNL out.setRow( 0, toArray( dir2 )); DCNL out.setRow( 1, toArray( dir1 )); DCNL out.setRow( 2, toArray( dir0 )); DCNL  DCNL out.m03 = locs[0].x; DCNL out.m13 = 0; DCNL out.m23 = locs[0].z; DCNL out.m33 = 1; DCNL  DCNL if (false) DCNL { DCNL Point3d a = new Point3d (0,0,0); DCNL Point3d b = new Point3d (0,0,1); DCNL  DCNL out.transform( a ); DCNL out.transform( b ); DCNL  DCNL System.out.println( a + " >>><<< " + b ); DCNL System.out.println( locs[0] + " <<<>>> " + locs[1] ); DCNL } DCNL  DCNL return out; DCNL } DCNL  DCNL private double[] toArray (Vector3f v) { DCNL return new double[] {v.x, v.y, v.z, 0}; DCNL } DCNL  DCNL  DCNL private void showMarkers() { DCNL  DCNL tweed.enqueue( new Runnable() { // run after toAlign's local transofrm has been updated! DCNL @Override DCNL public void run() { DCNL  DCNL for ( Spatial s : markers.getChildren() ) DCNL s.removeFromParent(); DCNL  DCNL  DCNL Vector3f[] targetMarkers; DCNL if ( toAlign != null ) { DCNL Transform toTarget = toAlign.gNode.getLocalTransform(); DCNL  DCNL targetMarkers = new Vector3f[alignMarkers.length]; DCNL  DCNL for ( int i = 0; i < alignMarkers.length; i++ ) { DCNL if ( alignMarkers[ i ] != null ) { DCNL targetMarkers[ i ] = new Vector3f(); DCNL toTarget.transformVector( alignMarkers[ i ], targetMarkers[ i ] ); DCNL } DCNL } DCNL } else DCNL targetMarkers = new Vector3f[2]; DCNL  DCNL int cc = 4; DCNL for ( Vector3f[] a : new Vector3f[][] { otherMarkers, targetMarkers } ) { DCNL  DCNL Color c = Rainbow.getColour( cc++ ); DCNL  DCNL for ( Vector3f v : a ) { DCNL if ( v != null ) { DCNL  DCNL Cylinder handleOne = new Cylinder( 2, 3, 0.05f, 500f, true ); DCNL  DCNL handleOne.setMode( Mode.Lines ); DCNL  DCNL Geometry g1 = new Geometry( "h1", handleOne ); DCNL  DCNL Material mat1 = new Material( tweed.getAssetManager(), "Common/MatDefs/Misc/Unshaded.j3md" ); DCNL mat1.setColor( "Color", new ColorRGBA (c.getRed() / 255f, c.getGreen() / 255f, c.getBlue() / 255f, 1f ) ) ; DCNL g1.setMaterial( mat1 ); DCNL Vector3f pos = new Vector3f( v ); DCNL pos = pos.add( 0, 250, 0 ); DCNL g1.setLocalTranslation( pos ); DCNL g1.setLocalRotation( new Quaternion( new float[] {FastMath.PI/2, 0, 0} ) ); DCNL markers.attachChild(g1); DCNL } DCNL  DCNL } DCNL } DCNL } DCNL }); DCNL  DCNL } DCNL  DCNL @Override DCNL public void dragStart( Geometry target, Vector2f cursorPosition, Vector3f world ) { DCNL dragging = true; DCNL } DCNL  DCNL @Override DCNL public void dragEnd() { DCNL dragging = false; DCNL } DCNL  DCNL @Override DCNL public boolean isDragging() { DCNL return dragging; DCNL } DCNL  DCNL @Override DCNL public String getName() { DCNL return "align"; DCNL } DCNL  DCNL @Override DCNL public void getUI( JPanel p ) { DCNL  DCNL p.setLayout( new ListDownLayout() ); DCNL  DCNL JButton w = new JButton( "save alignment"); DCNL w.addActionListener( new ActionListener() { DCNL @Override DCNL public void actionPerformed( ActionEvent e ) { DCNL toAlign.save(); DCNL } DCNL } ); DCNL  DCNL JButton swap = new JButton("swap"); DCNL swap.addActionListener( new ActionListener() { DCNL @Override DCNL public void actionPerformed( ActionEvent e ) { DCNL Vector3f tmp = alignMarkers[0]; DCNL alignMarkers[0] = alignMarkers[1]; DCNL alignMarkers[1] = tmp; DCNL  DCNL tweed.enqueue( new Runnable() { DCNL  DCNL @Override DCNL public void run() { DCNL doAlign(); DCNL } DCNL } ); DCNL } DCNL } ); DCNL  DCNL  DCNL  DCNL JFormattedTextField tf = new JFormattedTextField( new NumberFormatter() ); DCNL tf.setValue( vOffset ); DCNL tf.addActionListener( new ActionListener() { DCNL @Override DCNL public void actionPerformed( ActionEvent e ) { DCNL vOffset = ((Number)tf.getValue()).doubleValue(); DCNL doAlign(); DCNL } DCNL } ); DCNL  DCNL p.add(w); DCNL p.add(swap); DCNL p.add(new JLabel("height offset:")); DCNL p.add(tf); DCNL  DCNL } DCNL }
if(this.display != null) this.display.setPixel(x + obj.x, y + obj.y, obj.bitmap[x][y]);
if(this.display != null) this.display.setPixel(x + obj.x, y + obj.y, false);
if(this.display != null) this.display.setPixel(cx + x, cy + y, true);
if(this.display != null) this.display.update();
Logger.getLogger(MainApp.class.getName()).log(Level.SEVERE, null, ex);
Thread.sleep(5000);
dialogedit.dismiss();
InMemoryActorRepository actorRepository = (InMemoryActorRepository) ActorRepositoryStub.withDummyData(); DCNL InMemoryDirectorRepository directorRepository = (InMemoryDirectorRepository) DirectorRepositoryStub.withDummyData(); DCNL  DCNL directorRepository.setMovieRepository(movieRepository); DCNL actorRepository.setMovieRepository(movieRepository);
Object[] result = new Object[x.getLength()];
isMoveValid(card, pile)) { DCNL return result; DCNL }
Map<String, Class> typeParamLookup = Generics.buildTypeParamImplLookup(getClass()); DCNL BeanSpec spec = BeanSpec.of(daoType, Act.injector(), typeParamLookup);
public Set<String> findPalindromes(String content){
static boolean isPalindrome(String s){ // checks whether the substring is a palindrome
 DCNL @RequestMapping(value = "/payload", method = RequestMethod.POST) DCNL public ResponseEntity<String> newPayload(@Valid @RequestBody Payload payload ) { DCNL return new ResponseEntity<>(payload.toString(),HttpStatus.OK); DCNL 
wrapMethodType(methodHandle.type()) DCNL private MethodType wrapMethodType(MethodType methodType) { DCNL return methodType.wrap().changeReturnType(void.class); DCNL } DCNL 
return response.getResult().getEntries() DCNL .stream() DCNL .map(this.ldapServiceMapper::mapToRegisteredService) DCNL .filter(Objects::nonNull).count();
int landPrice = random.nextInt(LAND_RANGE) + LAND_BASE;
if (TextUtils.isEmpty(imgUrlDefault)){ DCNL Glide.with(mContext).load(R.mipmap.icon_default_head).into(iv_head); DCNL } else { DCNL Glide.with(mContext).load(imgUrlDefault).into(iv_head); DCNL }
@Value("${frontend.url}") DCNL private String frontendUrl;
String name="res_"+_getItem(row,0);
else if(col==ncols-2){ DCNL String name="arr_"+_getItem(row,0); DCNL return "<input type=\"radio\" name=\""+name+"\" value=\"itv\">安排面试"+ DCNL "<input type=\"radio\" name=\""+name+"\" value=\"otherneed\">安排其它需求"+ DCNL "<input type=\"radio\" name=\""+name+"\" value=\"talents\">放入人才库"; DCNL }
try { DCNL getWindow().requestFeature(Window.FEATURE_ACTION_BAR); DCNL getSupportActionBar().hide(); DCNL }catch (Exception e){} DCNL 
user.setTask(null); DCNL for(Task task:taskSet) { DCNL task.setProject(null); DCNL task.setUser(null); DCNL taskDao.save(task); DCNL taskDao.delete(task.getTaskId()); DCNL } DCNL project.getTaskSet().clear(); DCNL project.setTaskSet(null); DCNL project.setUser(null); DCNL projectDao.save(project);
return dishNames.get(random.nextInt(dishNames.size()));
user.setRoles(Collections.singleton(Role.USER));
else if(x==2){ DCNL defender.setHealth(defender.getHealth() - 5);
DistributedCallable<Object, Object, Void>, Serializable { DCNL private static final long serialVersionUID = 1742206044736300943L;
public Void call() throws Exception { DCNL return null;
private MLocation getLoc(String userId){ DCNL MLocation userLoc = OthersInfo.getInstance().getUsersInRadius().containsKey(userId) ? DCNL OthersInfo.getInstance().getUsersInRadius().get(userId) : DCNL OthersInfo.getInstance().getConvUsers().get(userId); DCNL return userLoc; DCNL } DCNL  DCNL MLocation userLoc = getLoc(userId);
if (ibookPos < 0 || ibookPos > BookContent.getBooks().size()) {
viewBookIntent.putExtra(BookDetailFragment.ARG_ITEM_ID, bookPos);
System.out.println("Addition of all greyScaleValues:");
sum[i][j] = arr1[i][j] + arr2[i][j];
if((i%40 == 0) && (i > 0)){
String escapedUrl = sb.toString(); DCNL return convertSlashHexSymbols( escapedUrl );
private String convertSlashHexSymbols( String str )
Long currentSnapshotId = base.currentSnapshot() != null ? DCNL base.currentSnapshot().snapshotId() : null;
"free", "free", "free", "free", "free", "free", "free"};
this.mqttUtils.subscribe(aspect.getTopic() + "/simdeployer/#");
import javax.persistence.*; DCNL @Table(uniqueConstraints={@UniqueConstraint(columnNames = {"firstName" , "lastName"})})
}else { DCNL serverRunnable.activity.runOnUiThread(serverRunnable.onSuccess); DCNL }, 1500);
evidence.setStatus(OrderStatusEnum.CANCELED.getCode());
List<CntApproval> cntApprovals = cntApprovalRepository.findByContractIdAndStatusAndIsDeletedOrderByOperationNoAsc( DCNL cntHeader.getContractId(), ContractConstants.Status.WAIT_FOR_APPROVE, Constants.IsDeleted.No); DCNL if (this.getProcessBy().equalsIgnoreCase(cntApproval.getUsername())) {
return convertToDto(newUser);
boolean isButtonDisabled = !extras.containsKey(entry.getValue()); // no such button in data
IJ.open("src/main/resources/flybrain.tif");
CLIJHandler.getInstance().handleExtension("CLIJ_mean3d", arguments);
timeData.speed = Float.parseFloat(value) * 3600;
Mame oldMame = _WRITES.put(cacheFile, mame); DCNL if (oldMame != null && oldMame != mame) { DCNL _WRITES.put(cacheFile, oldMame); DCNL throw new IllegalStateException("Another mame instance is already associated to cache file " + cacheFile); DCNL }
Statement statement = null; DCNL try{ DCNL statement = createSelectStatementFrom(cqlSelectQuery); DCNL }catch (Exception e) { DCNL System.out.println(e.getMessage()); DCNL consumer.accept(null); DCNL return; DCNL }
public <T extends Entity> boolean createIndexOn(String onColumn, Class<T> tableType) throws SQLException { DCNL String tableNameStr = getTableName(tableType); DCNL if (tableNameStr == null) return false; DCNL  DCNL String query = String.format("CREATE INDEX IF NOT EXISTS %s_idx ON %s (%s);", onColumn, tableNameStr, onColumn);
this.jobStatus = FAILED;
jobStatus = isSuccess ? COMPLETED : FAILED;
return false;
subCritter.setSubCritterLabel(newName); DCNL subCritter.setCritterSubName(newCategory);
import java.util.Random; DCNL import java.util.Arrays; DCNL  DCNL public static void main(String[] args) { DCNL int counter = 0; DCNL int[] ary = new int[30]; DCNL Random ran = new Random(); DCNL while (counter < 30) { DCNL ary[counter] = Math.abs(ran.nextInt() % 300); DCNL counter++; DCNL } DCNL System.out.println(Arrays.toString(selectionsort(ary))); DCNL } DCNL  DCNL public static void bubbleSort(int[] data) { DCNL } DCNL  DCNL public static int[] selectionsort(int [] ary) { DCNL int smallest; DCNL smallest = y; DCNL for (int i = y; i < ary.length; i++) {
}
TermsBuilder aggBuilder = AggregationBuilders.terms("companies")// DCNL .field(COMPANY_ID).include(companyIds).size(companyIds.length)// DCNL .subAggregation(AggregationBuilders.terms("statuses")//
.get("companies"); DCNL Terms agg2 = (Terms) bucket.getAggregations().get("statuses");
try { DCNL if (c.getDeclaredField(name) != null) { DCNL break; DCNL } catch ( NoSuchFieldException | NullPointerException | SecurityException e) {
this.setUnlocalizedName(GTClassic.MODID + ".alloySmelter");
break;
if (!valueMap.containsKey(currNum) || (valueMap.containsKey(currNum) && !values.contains(currNum))) {
cloestBiggerRight[index] = prev > arr[index] ? prev : Integer.MIN_VALUE;
int[] arr = new int[]{5, 4, 4, 3, 7, 3, 3, 4, 4, 7};
String regex = "((?<=【)(.*?)(?=】))|((?<=\\[)(.*?)(?=\\]))";
boolean needBlank = false; // 是否需要空格分隔 DCNL if (needBlank) { DCNL sb.append(' '); DCNL needBlank = true;
location_name.setText(locationName); DCNL destination_name.setText(destinationName);
Bukkit.getLogger().warning("[MoxLibrary] Can not update values in configuration file: "+targetFile.getAbsolutePath());
String fileName = configFileName+(configFileName.contains(".yml") ? "" : ".yml"); DCNL File configFile = new File(plugin.getDataFolder(), fileName); DCNL plugin.saveResource(fileName, false);
getSharedPreferences("PREFERENCE", MODE_PRIVATE).edit().putString("jsonString", jsonResponse).commit(); DCNL Intent i = getBaseContext().getPackageManager().getLaunchIntentForPackage(getBaseContext().getPackageName()); DCNL i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); DCNL startActivity(i);
existing.setSubSector(ex.getSubSector()); DCNL existing.setSuperSector(ex.getSuperSector());
return -1; DCNL return 0;
if (!StringUtils.isEmpty(o1.getSituationIds()) && StringUtils.isEmpty(o2.getSituationIds())) {
JsonNode edgesArray = mediaNode DCNL .get("edges"); DCNL final String text; DCNL if (edgesArray.isArray() && edgesArray.size() > 0) { DCNL text = edgesArray.get(0) DCNL .get("node") DCNL .get("text") DCNL .asText(); DCNL } else { DCNL text = ""; DCNL } DCNL .get("edge_media_preview_like")
context.getDrawable(R.drawable.top_banner_selector_red_third)); DCNL context.getDrawable(R.drawable.top_banner_selector_red_second)); DCNL mHandler.postDelayed(mRefreshRunnable, 250);
String sql = String.format("INSERT IGNORE INTO favorites (user_id, event_id) VALUES (\"%s\", ?)", userId);
Carving.chisel.addVariation("arcane_stone", CarvingUtils.variationFor(ForgeRegistries.BLOCKS.getValue(new ResourceLocation("thaumcraft", "stone_arcane")).getDefaultState(), -64)); DCNL Carving.chisel.addVariation("arcane_stone", CarvingUtils.variationFor(ForgeRegistries.BLOCKS.getValue(new ResourceLocation("thaumcraft", "stone_arcane_brick")).getDefaultState(), -63));
factory.newBlock(Material.ROCK, "bloodMagic", provider)
Carving.chisel.addVariation("certus", CarvingUtils.variationFor(ForgeRegistries.BLOCKS.getValue(new ResourceLocation("appliedenergistics2", "quartz_block")).getDefaultState(), -64)); DCNL Carving.chisel.addVariation("certus", CarvingUtils.variationFor(ForgeRegistries.BLOCKS.getValue(new ResourceLocation("appliedenergistics2", "quartz_pillar")).getDefaultState(), -63)); DCNL Carving.chisel.addVariation("certus", CarvingUtils.variationFor(ForgeRegistries.BLOCKS.getValue(new ResourceLocation("appliedenergistics2", "chiseled_quartz_block")).getDefaultState(), -62));
if (!isMachineSelected) { DCNL myList = structureFilterPickList(taskList.get(getAdapterPosition())); DCNL }else{ DCNL myList = machineFilterPickList(); DCNL } DCNL 
return userManageService.getAccountList(Strings.emptyToNull(phone), Strings.emptyToNull(mchId), offset, limit);
if (x != null) { DCNL affichage += x.getQuantite(); DCNL affichage += x + " +"; DCNL }
writeVCF(referenceSequence, allSequences, varList, paternalIsVariantAdded,
private void writeVCF(final Sequence refSeq, final SimpleReference reference, final List<Variant> varList,
private boolean flag = false; DCNL  DCNL if(!flag) dataPreLoad.loadData();
return teamSuccessRate.getTeamDetail(team, totalMember + 1, chosenLang);
Lukuvinkki dummy = new Lukuvinkki("esim", "https://www.esim.com", "esim esim esim");
import java.util.List; DCNL import java.util.Map; DCNL 
data.helper.createRectangularOutput( );
Vec3 playerPos = mc.renderViewEntity.getPosition(renderPartialTicks);
alarmManager.set(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent);
.cancelable(true)
private ImageView deleteReportPost;
mTvNewPrice.setText(Html.fromHtml("特价优惠<font color='#FD0000'><big><big>"+mGoodInfo.getReal_price()+"</big></big></font>元"));

private static final String BIRTHDATE_PARAMETER = "birthdate";
String username = String.valueOf(generateNumber.getRandomNumber(8, "user", "username")); DCNL birthDate = new SimpleDateFormat("MM-dd-yyyy").parse(req.getParameter(BIRTHDATE_PARAMETER));
resp.sendRedirect("login");  //not perfect, user should get a message registration was successful!
if ( attacker_nb_dices <= Get_Max_NB_Dices(from, true))
advance();
import org.mybatis.spring.annotation.MapperScan; DCNL @MapperScan("com.gaojc.serviceprovider.mapper")
_jdbcUrl    = props.getProperty("jdbc.url").replaceAll("\\:",":");
if (!(returnType instanceof VoidType)) DCNL srvCalls.append("srv\n"); // 1 di default ci deve essere a meno che il return della funzione sia void DCNL boolean multipleCalls = false; DCNL if ((n instanceof CallNode || n instanceof MethodCallNode) && multipleCalls) DCNL srvCalls.append("srv\n");
srvCalls + //pop del return value // ci dovrebbero essere tanti srv quante sono le chiamate
super(""); DCNL this.fullDate = LocalDateTime.now();
this.roomList = new ArrayList<Room>(0);
asyncTaskBmpLoader = bmpLoader.Load(mediaUrls.toArray(new String[0]));
if (this.gameState.getWarriorY() < 24 * 32 - 29) { DCNL } else { DCNL this.gameState.setWarriorMovement(false); DCNL if (this.gameState.getWarriorY() > 40) { DCNL } else { DCNL this.gameState.setWarriorMovement(false); DCNL if (this.gameState.getWarriorX() > 40) { DCNL } else { DCNL this.gameState.setWarriorMovement(false); DCNL if (this.gameState.getWarriorX() < 24 * 32 - 29) { DCNL } else { DCNL this.gameState.setWarriorMovement(false);
memberManager.create(p.getUniqueId(), p.getName(), m -> { DCNL m.setOnline(true); DCNL memberManager.save(m, false); DCNL }, m -> { DCNL m.setOnline(true); DCNL  DCNL long now = System.currentTimeMillis(); DCNL m.getActivity().setLastJoined(now); DCNL m.getActivity().setLastModified(now); DCNL }); DCNL if(e != null) DCNL getLogger().severe("Failed to complete member conversion: " + e.getMessage()); DCNL else getLogger().info("Member conversion complete.");
private final int cog; DCNL public VesselState(SensorType sensorType, int mmsi, String name, int loa, int beam, double latitude, double longitude, int hdg, int cog, int sog, LocalDateTime positionTime, boolean isNearMiss) {
public int getCog() {
final int cog = aisDynamic != null ? ((int) info.getCog()) / 10 : 0; DCNL final int sog = aisDynamic != null ? ((int) info.getSog()) / 10 : 0;
 DCNL props.setSourceDir(noneHyfenArgs.get(0));
Query query = em.createNativeQuery("SELECT JDATE,IFNULL(EXPENSE,0) EXPENSE ,IFNULL(INCOME,0) INCOME FROM\n" DCNL + "(\n" + "SELECT JDATE FROM (\n" DCNL + "SELECT DATE(EXPENSE_TIME) JDATE FROM EXPENSES WHERE EXPENSE_TIME BETWEEN :from AND :to\n" DCNL + "UNION \n" DCNL + "SELECT DATE(INCOME_TIME) JDATE FROM INCOMES WHERE INCOME_TIME BETWEEN :from AND :to )DT) DDT\n" DCNL + "LEFT OUTER JOIN (\n" + "SELECT IFNULL(SUM(EXPENSE_AMOUNT),0) EXPENSE,DATE(EXPENSE_TIME) JDATE  \n" DCNL + "FROM EXPENSES \n" + "WHERE EXPENSE_TIME BETWEEN :from AND :to\n" DCNL + "GROUP BY JDATE ) E  USING (JDATE) LEFT OUTER JOIN (\n" DCNL + "SELECT IFNULL(SUM(INCOME_AMOUNT),0) INCOME,DATE(INCOME_TIME) JDATE \n" + "FROM INCOMES \n" DCNL + "WHERE INCOME_TIME BETWEEN :from AND :to\n" + "GROUP BY JDATE ) I USING (JDATE) \n" DCNL + "ORDER BY JDATE DESC;"); DCNL  DCNL query.setParameter("from", from, TemporalType.DATE); DCNL query.setParameter("to", to, TemporalType.DATE);
Query query = em.createNativeQuery("SELECT (SELECT IFNULL(SUM(INCOME_AMOUNT),0) FROM INCOMES) INCOME\n" DCNL + ",(SELECT IFNULL(SUM(EXPENSE_AMOUNT),0) FROM EXPENSES) EXPENSE");
static int inputInt(String prompt) {
int i = InputOutput.inputInt("How many members are in the team? "); DCNL  DCNL  DCNL  DCNL  DCNL 
 DCNL  DCNL  DCNL  DCNL  DCNL  DCNL  DCNL 
 DCNL 
 DCNL 
 DCNL  DCNL 
return texture;
public Status withDescription(@Nullable String description) {
public final class HttpClientHandler< DCNL Q /*>>> extends @NonNull Object*/, P, C /*>>> extends @NonNull Object*/> DCNL extends HttpHandler<Q, P> {
public class HttpServerHandler< DCNL Q /*>>> extends @NonNull Object*/, P, C /*>>> extends @NonNull Object*/> DCNL extends HttpHandler<Q, P> {
public class HandleDefault implements IHandle {
this.analyze(reference, binary, fqn, !functionName.equals("get_class")); DCNL private void analyze( DCNL @NotNull FunctionReference reference, DCNL @NotNull BinaryExpression binary, DCNL @NotNull String fqn, DCNL boolean allowChildClasses DCNL ) { DCNL if (!classes.isEmpty() && (allowChildClasses || index.getDirectSubclasses(fqn).isEmpty())) {
if ( isHumanReadable() ) DCNL if ( value != null ) DCNL { DCNL return value.getValue(); DCNL } DCNL else DCNL { DCNL return ""; DCNL } DCNL } DCNL  DCNL if ( attributeType == null ) DCNL { DCNL return Strings.utf8ToString( value.getBytes() );
if(basicConstraints.isCA()) { DCNL access.setPathLen(basicConstraints.getPathLenConstraint().toString()); DCNL }
final java.io.File file    = new java.io.File(changelogPath + java.io.File.separator + typeFolderName + java.io.File.separator + uuidPath + java.io.File.separator + uuid);
submitButton = new JButton("Login");
public double root(double value, double power) throws ArithmeticException { DCNL int signum = (int) Math.signum(value); DCNL return round(Math.pow(Math.abs(value), (double) 1 / power)) * signum;
operationAnswerAsString = String.valueOf(calculator.root(firstOperand, secondOperand));
getPlugin().getConsoleSender().sendMessage(MessageUtil.getPluginMessage(MessageType.ALERT, "PermissionManager", "랭크 " + rank.name() + " 의 버킷 api 펄미션 허용 목록이 비었거나 오류가 있습니다. 기본 설정으로 되돌립니다")); DCNL entry.set("allowed", list = Lists.newArrayList(rank.getDefaultPermission()));
getPlugin().getConsoleSender().sendMessage(MessageUtil.getPluginMessage(MessageType.ALERT, "PermissionManager", "랭크 " + rank.name() + " 의 버킷 api 펄미션 차단 목록이 비었거나 오류가 있습니다. 기본 설정으로 되돌립니다")); DCNL entry.set("blocked", list = Lists.newArrayList(rank.getDefaultPermission()));
mSize = left.size() + right.size() + 1;
public static final String MESSAGE_INCORRECT_LOG_IN_DETAILS = "The login details are incorrect.";
if (toLogin.isUserWithOnlyNameAndPassword()) { DCNL throw new CommandException(MESSAGE_INCORRECT_LOG_IN_DETAILS);
public boolean isUserWithOnlyNameAndPassword() {
System.out.println("Invalid Arguments\nSee Example: java WordSearch rows cols filename [Seed [answers]]\nrows/cols>0\nfilename must be a valid txt file path\nseed must be from 1-10000 inclusive");
System.out.println("Invalid Arguments\nSee Example: java WordSearch rows cols filename [Seed [answers]]\nrows/cols>0\nfilename must be a valid txt file path\nseed must be from 1-10000 inclusive"); DCNL System.out.println("Not Enough Arguments\nSee Example: java WordSearch rows cols filename [Seed [answers]]\nrows/cols>0\nfilename must be a valid txt file path\nseed must be from 1-10000 inclusive");
package com.hzc.label;import android.content.Context;import android.graphics.Canvas;import android.graphics.Paint;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * Created by jonch on 2017/9/21. */public class LabelView extends LinearLayout {    //数据适配器    private TagAdapter adapter;    //是否需要重绘    private boolean redraw = true;    //是否启用移除功能    private boolean enableDelete = true;    private int selectedIndex = -1;    private int themeTextColorNormal = R.color.hzc_black_90, themeTextColorSelected = R.color.hzc_white;    private int themeTextSizeNormal = 14, themeTextSizeSelected = 14;    private int themeSelectorBackgroundDraw = R.drawable.selector_border_radius_gray;    private int themeDelImg = R.mipmap.ic_clear_input;    /**     * 全局启用删除功能     *     * @param bool     */    public void setEnableDelete(boolean bool) {        enableDelete = bool;    }    //所有的textview控件    List<TextView> tvlist = new ArrayList<>();    private void info(String message) {        System.out.println(message);    }    private void reDrawList() {        redraw = true;        this.postInvalidate();    }    /**     * 绘制     */    private void drawList() {        if (this.adapter == null || this.adapter.list == null || this.adapter.list.size() == 0)            return;        if (!redraw)            return;        int total = 0;        tvlist.clear();        Map<Integer, List<View>> result = new LinkedHashMap<>();        int i = 0;        for (int j = 0; j < this.adapter.list.size(); j++) {            Object obj = this.adapter.list.get(j);            //初始化数据层            if (result.get(i) == null) {                List<View> list = new ArrayList<>();                result.put(i, list);            }            List<View> views = result.get(i);            View item = LayoutInflater.from(this.getContext()).inflate(R.layout.tag_item, null);            TextView text = (TextView) item.findViewById(R.id.txt_jc_text);            text.setText(adapter.getText(obj));            text.setTextColor(getResources().getColor(themeTextColorNormal));            text.setTextSize(themeTextSizeNormal);            text.setBackgroundResource(themeSelectorBackgroundDraw);            text.setPadding(text.getPaddingLeft(), text.getPaddingTop(), text.getPaddingRight() + 30, text.getPaddingBottom());            ImageView imageView = item.findViewById(R.id.img_jc_clean);            imageView.setImageResource(themeDelImg);            if (!adapter.enableDelete(obj)) {                text.setPadding(text.getPaddingLeft(), text.getPaddingTop(), text.getPaddingRight() - 30, text.getPaddingBottom());                imageView.setVisibility(GONE);            }            //当前测量出来的控件的长度            int currentWidth = total;            View v = text;            while (!(v instanceof FrameLayout)) {                total += v.getPaddingLeft();                total += v.getPaddingRight();                v = (View) v.getParent();            }            total += v.getPaddingRight();            total += v.getPaddingLeft();            //在父级节点存放T            v.setTag(j);            //测绘文字的长度            Paint paint = new Paint();            paint.setTextSize(text.getTextSize());            int oneWidth = (int) paint.measureText(text.getText().toString());            total += oneWidth;            if (total > getWidth()) {//当前的item总和要比总的宽度要长，保留到下一次加入队伍                i++;                List<View> list = new ArrayList<>();                list.add(item);                result.put(i, list);                total = total - currentWidth;            } else {//依然有空隙，可以继续加入当前行                views.add(item);            }            tvlist.add(text);        }        //基本行        LinearLayout base = new LinearLayout(this.getContext());        LayoutParams baselp = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);        base.setLayoutParams(baselp);        base.setOrientation(LinearLayout.VERTICAL);        //每一个KEY就是一个tag行，每一个tag行包含多个tag        for (Integer key : result.keySet()) {            List<View> views = result.get(key);            LinearLayout root = new LinearLayout(this.getContext());            LayoutParams rootlp = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);            root.setLayoutParams(rootlp);            root.setOrientation(LinearLayout.HORIZONTAL);            for (int j = 0; j < views.size(); j++) {                View v = views.get(j);                TextView textView = (TextView) v.findViewById(R.id.txt_jc_text);                textView.setOnClickListener(new OnClickListener() {                    @Override                    public void onClick(View v) {                        for (TextView tv : tvlist) {                            tv.setSelected(false);                            tv.setTextColor(getResources().getColor(themeTextColorNormal));                            tv.setTextSize(themeTextSizeNormal);                        }                        v.setSelected(true);                        ((TextView) v).setTextColor(getResources().getColor(themeTextColorSelected));                        ((TextView) v).setTextSize(themeTextSizeSelected);                        int index = Integer.parseInt(((View) v.getParent()).getTag().toString());                        selectedIndex = index;                        adapter.onClick(LabelView.this.adapter.list.get(index));                    }                });                ImageView imgClear = (ImageView) v.findViewById(R.id.img_jc_clean);                imgClear.setOnClickListener(new OnClickListener() {                    @Override                    public void onClick(View v) {                        int index = Integer.parseInt(((View) v.getParent()).getTag().toString());                        Object object = LabelView.this.adapter.list.get(index);                        for (int i = 0; i < adapter.list.size(); i++) {                            if (adapter.list.get(i) == object) {                                adapter.list.remove(i);                                removeAllViews();                                reDrawList();                                break;                            }                        }                        adapter.onDelete(object);                    }                });                root.addView(v);            }            base.addView(root);        }        addView(base);        redraw = false;    }    public void setAdapter(TagAdapter tagAdapter) {        this.removeAllViews();        this.adapter = tagAdapter;        this.redraw = true;        selectedIndex = -1;    }    @Override    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        drawList();    }    /**     * you need new TagView().new TagAdapter(T)...     * or     * you can extends TagAdapter     *     * @param <T>     */    public abstract class TagAdapter<T> {        List<T> list;        public TagAdapter(List<T> list) {            this.list = list;        }        public abstract String getText(T t);        public abstract void onClick(T t);        public abstract void onDelete(T t);        public boolean enableDelete(T t) {            return enableDelete;        }    }    public <T> T getSelected() {        if (selectedIndex != -1)            return (T) this.adapter.list.get(selectedIndex);        return null;    }    public void setSelected(int index) {        tvlist.get(index).callOnClick();    }    public LabelView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    public LabelView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    public int getThemeTextColorNormal() {        return themeTextColorNormal;    }    public void setThemeTextColorNormal(int themeTextColorNormal) {        this.themeTextColorNormal = themeTextColorNormal;    }    public int getThemeTextColorSelected() {        return themeTextColorSelected;    }    public void setThemeTextColorSelected(int themeTextColorSelected) {        this.themeTextColorSelected = themeTextColorSelected;    }    public int getThemeTextSizeNormal() {        return themeTextSizeNormal;    }    public void setThemeTextSizeNormal(int themeTextSizeNormal) {        this.themeTextSizeNormal = themeTextSizeNormal;    }    public int getThemeTextSizeSelected() {        return themeTextSizeSelected;    }    public void setThemeTextSizeSelected(int themeTextSizeSelected) {        this.themeTextSizeSelected = themeTextSizeSelected;    }    public int getThemeSelectorBackgroundDraw() {        return themeSelectorBackgroundDraw;    }    public void setThemeSelectorBackgroundDraw(int themeSelectorBackgroundDraw) {        this.themeSelectorBackgroundDraw = themeSelectorBackgroundDraw;    }    public int getThemeDelImg() {        return themeDelImg;    }    public void setThemeDelImg(int themeDelImg) {        this.themeDelImg = themeDelImg;    }}
public Workshop getWorkshop(int index) { DCNL public void addWorkshop(Workshop workshop) {
return sudokuGrid(data.replace("\n", "").split(data.contains(",") ? "," : ""));
List<Integer> retryUpdateOrdinalList = batchProcessInsert(addingRecords, recordInsertIndexList); DCNL  DCNL if (!retryUpdateOrdinalList.isEmpty()) { DCNL List<Map<String, Object>> retryUpdateConditionParameterMaps = new ArrayList<>(); DCNL List<Map<String, Object>> retryUpdateSetParameterMaps = new ArrayList<>(); DCNL for (Integer ordinal: retryUpdateOrdinalList) { DCNL retryUpdateConditionParameterMaps.add(updateConditionParameterMaps.get(ordinal)); DCNL retryUpdateSetParameterMaps.add(updateSetParameterMaps.get(ordinal)); DCNL } DCNL batchProcessUpdate(retryUpdateConditionParameterMaps, compiledCondition, DCNL sequentialProcessUpdate(retryUpdateConditionParameterMaps, compiledCondition,
private List<Integer> batchProcessInsert(List<Object[]> addingRecords, DCNL List<Integer> recordInsertIndexList) { DCNL List<Integer> retryUpdateOrdinalList = new ArrayList<>();
retryUpdateOrdinalList.add(counter);
return retryUpdateOrdinalList;
final List<Classifier.Recognition> results = classifier.recognizeImage(croppedBitmap); // 사물 인식
WalletItem walletItem = DBWalletUtil.getCurrentWallet(context); DCNL if (!walletItem.address.equals(dbItem.from) && !walletItem.address.equals(dbItem.to)) { DCNL if (item.hash.equalsIgnoreCase(dbItem.hash) || dbItem.getTimestamp() < list.get(list.size() - 1).getTimestamp()) {
WalletItem walletItem = DBWalletUtil.getCurrentWallet(context); DCNL if (!walletItem.address.equals(dbItem.from) && !walletItem.address.equals(dbItem.to)) { DCNL if (item.hash.equalsIgnoreCase(dbItem.hash) || dbItem.getTimestamp() < list.get(list.size() - 1).getTimestamp()) {
 DCNL try{ DCNL Team team = Team.valueOf(arg[0]); DCNL  DCNL for(Item item : content.items()){ DCNL if(item.type == ItemType.material){ DCNL state.teams.get(team).cores.first().entity.items.add(item, 2000); DCNL  DCNL info("Core filled."); DCNL }catch(IllegalArgumentException ignored){ DCNL err("No such team exists.");
System.out.println(n +  "\t" + Math.pow(n,2) + "\t" + Math.pow(n, 3) + "\t" + Math.pow(2, n)); DCNL 
return String.format("Alter: %s", DurationFormatUtils.formatDuration(duration.toMillis(), "HH:mm:ss"));
final Spinner mySpinner = (Spinner) findViewById(R.id.spinner); DCNL public void onItemSelected(AdapterView<?> adapterView, View view, int position, long l) { DCNL if (currentItem == position) { DCNL } else if (position == 1) { DCNL Intent intent = new Intent(MainActivity.this, SecondActivity.class); DCNL } else { DCNL Intent intent = new Intent(MainActivity.this, Email_Tabs.class); DCNL  DCNL mySpinner.setSelection(0); DCNL  DCNL public void onNothingSelected(AdapterView<?> adapterView) {
return "Email"; DCNL return "Camera"; DCNL return "Recorder";
else if (stayTime > 3600 && stayTime <= 7200) DCNL else if (stayTime > 7200 && stayTime <= 10800) DCNL else if (stayTime > 10800 && stayTime <= 14400) DCNL else if (stayTime > 14400 && stayTime <= 18000)
Integer.MAX_VALUE, DCNL -Integer.MAX_VALUE,
-Integer.MAX_VALUE, Integer.MAX_VALUE, -85, 85, DefaultGeographicCRS.WGS84);
-Integer.MAX_VALUE, DCNL Integer.MAX_VALUE, DCNL -Integer.MAX_VALUE, DCNL Integer.MAX_VALUE,
-Integer.MAX_VALUE, DCNL Integer.MAX_VALUE,
Preconditions.checkNotNull(alias, "alias at index %s", i);
SharedPreferences preferences = this.getSharedPreferences("userInfo", this.MODE_PRIVATE); DCNL userId = preferences.getInt("userId", -1);
frame.setSize(screenSize.width, screenSize.height);
 DCNL  DCNL g.drawString(Integer.toString(numbersX[k]),(int)(width/100 + gap - (circleWidth*2.15)), height/100 + YGap - circleWidth/5);
ctx.visit(alterColumnType.nullable() ? step.dropNotNull() : step.setNotNull()) DCNL .sql(';').formatSeparator();
holder.content.setText(current.getName());
UserSelection selectedUser = (UserSelection) friendsSpinner.getSelectedItem();
 DCNL if (connectedThreadHolder.getConnectedThread() != null) { DCNL connectedThreadHolder.getConnectedThread().write(json.toString()); DCNL }
db.execute(getRenameTableSQL(from, to)); DCNL } DCNL  DCNL private String getRenameTableSQL(String from, String to) { DCNL switch (dbType) { DCNL case SQLITE: DCNL return "ALTER TABLE " + from + " RENAME TO " + to; DCNL case MYSQL: DCNL return "RENAME TABLE " + from + " TO " + to; DCNL case H2: DCNL return "ALTER TABLE " + from + " RENAME TO " + to; DCNL default: DCNL throw new IllegalArgumentException("DBType: " + dbType.getName() + " does not have rename table sql"); DCNL }
if(calculateMaxPoints(h) >= 30){ DCNL System.out.println("An AI is playing!");
if (i1 > i2) {
Map<Pair, Double> newmap = new HashMap<Pair, Double>(); DCNL for(int i=0;i<infra.size();i++) { DCNL for(int j=0;j<infra.get(i).size();j++) { DCNL newmap.put(new Pair(i,infra.get(i).get(j)),0.0); DCNL } DCNL } DCNL for (int i=0;i<transit.length;i++) { DCNL for (int j=0;j<transit[i].length;j++) { //int j=0;j<transit[i].length;j++ DCNL if(transit[i][j]==0) { DCNL continue; DCNL } DCNL List<List<Integer>> allP = k_shortest_paths.get(new Pair(i,j)); DCNL Map<Integer, Double> weights = new HashMap<Integer, Double>(); DCNL Map<Integer, Double> distances = new HashMap<Integer, Double>(); DCNL Double maxdistance = -1.0D; DCNL for(int a=0;a<allP.size();a++) { DCNL Double temp = player_path_distance.get(allP.get(a)); DCNL distances.put(a,temp); DCNL if(temp > maxdistance) { DCNL maxdistance = temp; DCNL } DCNL } DCNL for(Integer a:distances.keySet()) { DCNL weights.put(a,distances.get(a)/maxdistance); //scale so everything is under 1 DCNL } DCNL Map<Integer, Double> softmaxWeights = softmaxDistance(weights); DCNL for(int a=0;a<allP.size();a++) { DCNL for(int b=0;b<allP.get(a).size();b++) { DCNL if(b>0) { DCNL int t1 = allP.get(a).get(b-1); DCNL int t2 = allP.get(a).get(b); DCNL Pair link = new Pair(t1,t2); DCNL newmap.put(link,newmap.get(link)+distances.get(a)*softmaxWeights.get(a)); DCNL } DCNL } DCNL } DCNL } DCNL return convertHeatMap(newmap);
query += "\t" + columns.get(i) + "\t" + types.get(i) + "\t" + contraints.get(i); DCNL if(i == columns.size() - 1) DCNL query += "\n"; DCNL else DCNL query += ",\n";
postOrderTraverse(node.left); DCNL postOrderTraverse(node.right);
if (tileEntity instanceof TileEntityBasicDecontaminationUnitFake) { DCNL BlockPos mainBlockPosition = ((TileEntityBasicDecontaminationUnitFake) tileEntity).mainBlockPosition; DCNL  DCNL if (mainBlockPosition != null) { DCNL return world.getBlockState(pos).getBlock().getBedDirection(world.getBlockState(mainBlockPosition), world, mainBlockPosition); DCNL } DCNL } DCNL if (tileEntity instanceof TileEntityBasicDecontaminationUnitFake) { DCNL BlockPos mainBlockPosition = ((TileEntityBasicDecontaminationUnitFake) tileEntity).mainBlockPosition; DCNL  DCNL if (mainBlockPosition != null) { DCNL return world.getBlockState(pos).getBlock().isBed(world.getBlockState(mainBlockPosition), world, mainBlockPosition, player); DCNL } DCNL }
if (e.getComponent().equals(labelTop) && active) { DCNL else if (e.getComponent().equals(labelBot) && active) {
break; DCNL break; DCNL break; DCNL break; DCNL return true;
timeInMillis = 1000 * 60 * 10; DCNL timeInMillis = 1000 * 60 * 20; DCNL timeInMillis = 1000 * 60 * 30;
+ " in the project " + projectId + " or on the service account " + serviceAccount + DCNL ", either through a group membership or directly")));
joueurs.get(acheteur.choisirIdJoueurPorteurSanglier(joueurs)-1).forgerFace(new FaceSanglier(acheteur));
for (Joueur x:plateau.getJoueurs()) { DCNL }
project.setTags(new ArrayList<String>(selectedTags));
return new ArrayList<>((List<String>) userIds);
if (StringUtils.isEmpty(schema) || conn.getSchema().equalsIgnoreCase(schema))
uwon = ((ui > oi && !(ui == 2 && oi == 0)) || (ui == 0 && oi == 2)) ? 'w' : (ui == oi) ? 't' : 'l';
r |= (cnt[7] & 0xff);
if(!((goingFromX == hereGoX+1 && goingFromY == hereGoY-1)) && !(goingFromX == hereGoX-1 && goingFromY == hereGoY+1)) DCNL return true;
 DCNL if (word.length() == cursor) { DCNL longestPrefix = word; DCNL } else { DCNL longestPrefix = currString; DCNL }
String imageUrl = users.getJSONObject("users").getString("image"); DCNL Student student = new Student(imageUrl, studentName, studentClass);
Settings.Builder builder = Settings.builder(); DCNL builder.put("cluster.name", props.getProperty(ElasticSearchSettings.PARAM_CLUSTER_NAME)); DCNL client = new PreBuiltTransportClient(builder.build());
round = new HideAndSeekRound(new Coordinates(toJoin.getLocation().getX(), toJoin.getLocation().getY(), toJoin.getLocation().getZ(), toJoin.getLocation().getWorld().getName()), maps);
result = PsiEquivalenceUtil.areElementsEquivalent(first, second) || first.getText().equals(second.getText());
Log.d("@JT LOCATION INSERTED","Location Name: " + items[1] DCNL + "; get_name was: " + get_name);
String get_locations = DatabaseConnection.sendRawSQL("SELECT name, address, city, " DCNL + "state, type, phone, website, zipcode, latitude, longitude FROM Locations;");
 DCNL String filename = observationModel.getFileName(); DCNL String idFileName = filename.replace("observation","observationValue"); DCNL ObservationValue observationValueModel = new ObservationValue(idFileName,FhirToPcrCsvTransformer.CSV_FORMAT, DCNL FhirToPcrCsvTransformer.DATE_FORMAT ,FhirToPcrCsvTransformer.TIME_FORMAT);
Book readBook = new EpubReader().readEpub(new FileInputStream(bookFileName), Constants.CHARACTER_ENCODING); DCNL List<Resource> contents = readBook.getContents(); DCNL for(Resource resource: contents){ DCNL if(resource.getMediaType()!= null && resource.getMediaType().equals(MediatypeService.XHTML)) {
ImmutableList<ChannelGroupMembership> channels = ImmutableList.copyOf(entity.getChannelGroup().getChannels());
import org.atlasapi.channel.ChannelGroupMembership;
public class ChannelGroupChannelIdsWriter implements EntityListWriter<ChannelGroupMembership> {
@Nonnull ChannelGroupMembership entity,
public String fieldName(ChannelGroupMembership entity) {
import org.atlasapi.channel.ChannelGroupMembership;
public class ChannelIdWriter implements EntityListWriter<ChannelGroupMembership> {
@Nonnull ChannelGroupMembership entity,
public String fieldName(ChannelGroupMembership entity) {
.placeholder(R.drawable.ic_patient_chat)
UserInfoResponse user = response.body(); DCNL mPref.user().put(new Gson().toJson(user));
int index = className.indexOf("<"); DCNL if (index > 0) { DCNL className = className.substring(0, index); DCNL } DCNL PsiClass psiClass = PsiType.getTypeByName(className, project, GlobalSearchScope.allScope(project)).resolve();
List<Event> items = null; DCNL if (events != null) { DCNL items = events.getItems(); DCNL } DCNL if (items == null) {
return current.isAfter(expire);
public float getAverageChainSize() {
return chainsCounter == 0 ? 0 : sum / (float) chainsCounter;
pw.println("<table style='width:100%'>");
groupId, assetCategoryIds, null);
backLeftDrive = hardwareMap.get(DcMotor.class, "bld"); DCNL backRightDrive = hardwareMap.get(DcMotor.class, "brd"); DCNL frontLeftDrive = hardwareMap.get(DcMotor.class, "fld"); DCNL frontRightDrive = hardwareMap.get(DcMotor.class, "frd");
String sql = "SELECT COUNT(internshipUserEmail) FROM internshipstudent WHERE internshipUserEmail=? AND internshipStudentContinent=? AND internshipStudentStatus='User submitted application - Admin to review application' AND YEAR(internshipStudentDatetime)=?";
}*/
 DCNL 

public static final SquareState XOUT = new SquareState(-1, Color.WHITE, true); DCNL public static final SquareState EMPTY = new SquareState(0, Color.WHITE, false);
correctNumberFull += correctState;
return;
ultima_foto_ine_frente = database.getElement("clave_ine_frente");
database.DeleteElement("clave_ine_frente");
Page<T> pb = new Page<T>();
List<T> res = new ArrayList<T>(source.size());
if (listener != null) { DCNL listener.onImageReady(drawable); DCNL }
guesses++; DCNL System.out.println("You have guessed (" + guesses + ") wrong letters: " + wrong);
 DCNL if (experiment!=null) { DCNL experiment.getSnippedDetails(); DCNL } DCNL  DCNL return experiment;
private static String schemaToTypeString(final SchemaInfo schema) {
private static String formatFieldType(final FieldInfo field, final String keyField) {
public static final String VALID_FORMATS = Arrays.stream(OutputFormat.values()) DCNL .map(Object::toString) DCNL .collect(Collectors.joining("', '", "'", "'")); DCNL public static OutputFormat get(final String format) { DCNL try { DCNL return OutputFormat.valueOf(format); DCNL } catch (final IllegalArgumentException e) { DCNL throw new IllegalArgumentException("Unknown Output format: " + format DCNL + ". Valid values are: " + VALID_FORMATS); DCNL }
private static int adjustCursor( DCNL final String origLine, DCNL final String trimmedLine, DCNL final int origCursor DCNL ) {
final String contentHashSum = getHashCodeBasedOnObjectContent(content); DCNL resources.add(new ExternalResource(EXTERNAL_RESOURCE_KEY_PREFIX + location, DCNL contentHashSum)); DCNL final String contentHashSum = getHashCodeBasedOnObjectContent(ex);
return "username";
Debug.d(TAG, "--->mBuffer.length=" + mBuffer.length() );
Debug.d(TAG, "--->mBuffer.length=" + mBuffer.length() ); DCNL Debug.d(TAG, "--->mBuffer.length=" + mBuffer.length() );
Debug.d(TAG, "--->mBuffer.length=" + mBuffer.length() ); DCNL int realLen = mBuffer.length(); DCNL Debug.d(TAG, "--->buffer.length: " + buffer.length); DCNL mBuffer = new CharArrayBuffer(realLen); DCNL for (int i = 0; i < realLen/2; i++) { DCNL for (int i = 0; i < realLen; i++) {
Debug.d(TAG, "--->after revert buffer.length: " + mBuffer.length());
throw new ParseException(Diagnosis.MESSAGE_NAME_CONSTRAINTS_DOCTOR); DCNL } DCNL if (!Diagnosis.isValidDiagnosis(trimmedDiagnosis)) { DCNL throw new ParseException(Diagnosis.MESSAGE_NAME_CONSTRAINT_DIAGNOSIS);
public static final String MESSAGE_NAME_CONSTRAINT_DIAGNOSIS = "Diagnosis should not be blank."; DCNL public static final String MESSAGE_NAME_CONSTRAINTS_DOCTOR = "Doctor's title should precede his full name, " DCNL + "which should be spelt out with capitalisation at the start of every new name word."; DCNL public static final String DOCTOR_VALIDATION_REGEX = "Dr(\\.|\\.\\s|\\s)([A-Z][a-z]+)(\\s[A-Z][a-z]*)*"; DCNL public static final String DIAGNOSIS_VALIDATION_REGEX = ".*\\S.*";
public static boolean isValidDoctor(String doctorName) { DCNL return doctorName.matches(DOCTOR_VALIDATION_REGEX); DCNL } DCNL  DCNL public static boolean isValidDiagnosis(String diagnosis) { DCNL return diagnosis.matches(DIAGNOSIS_VALIDATION_REGEX);
return number + (1 << countZeros) + (1 << (countOnes - 1)) - 1;
 DCNL int mask = (1 << (countOnes + 1)) - 1;
double getCallPrice() DCNL double callPrice; DCNL callPrice = callTime * .04; DCNL return callPrice;
if (fix == null){ DCNL res.redirect("/admin/main"); DCNL } DCNL res.redirect("/admin/main");
HashSet<String> fullList = this.friendsManager.getMyAdded().get(name.toLowerCase()); DCNL  DCNL if (fullList == null) DCNL  DCNL HashSet<String> flist = new HashSet<>(); DCNL flist.addAll(fullList);
String formattedName = dinosaur.getIdentifier().getResourcePath(); DCNL registerItemRenderer(DISPLAY_BLOCK_ITEM, DISPLAY_BLOCK_ITEM.getMetadata(meta, 0, false), "action_figure/action_figure_" + formattedName);
public static DriveTrain driveTrain;
intakeMotorPort = 7, //Temporarily flipped before we fix version issues. DCNL outtakeMotorPort = 8,
}
setDefaultCommand(new ArcadeDrive());
public static final String HAS_DISPLAY_FACILITIES_OR_MANAGE_FACILITIES_ROLE = DCNL "hasAnyRole('" + DISPLAY_FACILITIES + "','" DCNL + MANAGE_FACILITIES + "','" + MANAGE_OWN_FACILITIES + "')";
@PreAuthorize(DefaultPermissions.HAS_DISPLAY_FACILITIES_OR_MANAGE_FACILITIES_ROLE)
@PreAuthorize(DefaultPermissions.HAS_DISPLAY_FACILITIES_OR_MANAGE_FACILITIES_ROLE)
@PreAuthorize(DefaultPermissions.HAS_DISPLAY_FACILITIES_OR_MANAGE_FACILITIES_ROLE)
@PreAuthorize(DefaultPermissions.HAS_DISPLAY_FACILITIES_OR_MANAGE_FACILITIES_ROLE)
@PreAuthorize(DefaultPermissions.HAS_DISPLAY_FACILITIES_OR_MANAGE_FACILITIES_ROLE) DCNL @PreAuthorize(DefaultPermissions.HAS_DISPLAY_FACILITIES_OR_MANAGE_FACILITIES_ROLE)
allUs.removeIf((x) -> x == null); DCNL GeneralController.map.put("kkk", allUs);
cluster.setJvmGCOptions(ContainerCluster.G1GC);
if (CollisionEngine.DEBUG) {

camera.act(); DCNL hero.act(); DCNL  DCNL 
public Tile createTile(int mapIcon) {

try { DCNL onAntitaskkillerChanged(); DCNL }catch(Throwable t) DCNL {}
optionListeners.clear();
optionListeners.clear();
query.append(" and bd.fund.id = :fundId");
private void _restartEvents(final boolean unblockEventsRun, final boolean notClearActivatedProfile, DCNL final boolean reactivateProfile, final boolean log)
void restartEvents(final boolean unblockEventsRun, final boolean notClearActivatedProfile, DCNL final boolean reactivateProfile, final boolean log, final boolean useHandler)
if (/*(!isRestart) &&*/ (backgroundProfileId != Profile.PROFILE_NO_ACTIVATE) && notifyBackgroundProfile) {
PPApplication.logE("$$$ EventsHandler.handleEvents", "notifyEvent=" + notifyEvent); DCNL if (notifyEvent != null) DCNL PPApplication.logE("$$$ EventsHandler.handleEvents", "notifyEventStart=" + notifyEvent.notifyEventStart(context)); DCNL PPApplication.logE("$$$ EventsHandler.handleEvents", "backgroundProfileNotificationSound=" + backgroundProfileNotificationSound); DCNL  DCNL if (PhoneProfilesService.getInstance() != null) { DCNL PPApplication.logE("$$$ EventsHandler.handleEvents", "play default profile notification"); DCNL }
pattern = pattern.replaceFirst("\\$\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true)); DCNL pattern = pattern.replaceFirst("\\$simple\\{file:name.noext\\}", FileUtil.stripExt(onlyName, true));
String masaPajakAkhir
 DCNL String targetFile = track.getPath().toString(); DCNL  DCNL switch ( Hypnos.getOS() ) { DCNL case NIX: DCNL case OSX: DCNL case UNKNOWN: DCNL default: DCNL break; DCNL case WIN_10: DCNL case WIN_7: DCNL case WIN_8: DCNL case WIN_UNKNOWN: DCNL case WIN_VISTA: DCNL case WIN_XP: DCNL targetFile = new File( targetFile ).toURI().toASCIIString().replaceFirst( "file:/", "file:///" ); DCNL break; DCNL } DCNL  DCNL mediaPlayer.playMedia( targetFile );
resized = prefix.createRelative(String.format("%s.resized.%dx%d-%d",
String name = "/".equals(currNode.getName()) ? "root" : currNode.getName(); DCNL ConfService.getService().startExportToFile("Save Resource File", name + ".json",
String nodePath = "/".equals(currPath) ? currPath + node : currPath + "/" + node;
if (layout != null) { DCNL layout.destroy(); DCNL } DCNL  DCNL if (modalController != null) { DCNL modalController.destroy(); DCNL } DCNL try { DCNL Object devSupportManager = ReflectionUtils.getDeclaredField(getReactGateway().getReactInstanceManager(), "mDevSupportManager"); DCNL if (ReflectionUtils.getDeclaredField(devSupportManager, "mRedBoxDialog") != null) { // RN >= 0.52 DCNL ReflectionUtils.setField(devSupportManager, "mRedBoxDialog", null); DCNL } DCNL }catch (Exception e){ DCNL e.printStackTrace();
controlPoints[i][j].setLocation(targetControlPoints[i][j].getTrueXPos(), targetControlPoints[i][j].getTrueYPos()); DCNL controlPoints[i][j].relocate();
RescaleOp op = new RescaleOp(1.2f, 20, null); DCNL RescaleOp op = new RescaleOp(1.2f, 20, null);


return this.y/32; DCNL return this.x/32;
this.gameState = this.server.readClientState(); DCNL String direction = this.gameState.getDirection(); DCNL System.out.println("x: " + this.gameState.getX() + " y: " + this.gameState.getY()); DCNL if (this.gameState.getRow() < 24) { DCNL System.out.println("Send valid move!"); DCNL if (this.gameState.getRow() > 0) {
if (this.gameState.getColumn() > 0) {
if (this.gameState.getColumn() < 24) {
() -> "Arez-0128: Attempting to queue task named '" + getName() + "' when task is not idle." );
.filter(status -> !status.equals(RadixClientStatus.FAILURE) DCNL && !status.equals(RadixClientStatus.CLOSING)) DCNL .zipWith(Observable.interval(delaySecs, TimeUnit.SECONDS), (c, t) -> c)
.filter(b -> true)
CONNECTING, OPEN, CLOSING, CLOSED, FAILURE
this.status.onNext(RadixClientStatus.CLOSING); DCNL this.webSocket.cancel();
if (status.getValue().equals(RadixClientStatus.CLOSING)) { DCNL WebSocketClient.this.status.onNext(RadixClientStatus.CLOSED);
if(dropped != null) DCNL if(onArm != null)
import lombok.extern.slf4j.Slf4j; DCNL import org.springframework.http.HttpStatus; DCNL import org.springframework.http.ResponseEntity; DCNL import org.springframework.stereotype.Component; DCNL  DCNL @Slf4j DCNL 
(id == null || (objectId != null && objectId.equals(id)))) {
return Collections.emptyList();
factory.setConcurrency(1);
private static final int NUMBER_OF_PARTITIONS = 1;
for (int liborIndex = timeIndex; liborIndex <= liborPeriodDiscretization.getNumberOfTimeSteps() - 1; liborIndex++) { DCNL getTimeIndex(Math.min(time, liborPeriodDiscretization.getTime(liborIndex))), liborIndex); DCNL double periodLength = liborPeriodDiscretization.getTimeStep(liborIndex); DCNL unAdjustedNumeraire = unAdjustedNumeraire.discount(libor, periodLength);
public Remark getRemark() { return remark; }
public void handleProfile() {
private void handleShowProfileEvent(ShowProfileRequestEvent event) {
package org.jahia.services.cache.ehcache; DCNL  DCNL import net.sf.ehcache.Cache; DCNL import net.sf.ehcache.Ehcache; DCNL import net.sf.ehcache.config.CacheConfiguration; DCNL import net.sf.ehcache.config.Configuration; DCNL import net.sf.ehcache.config.PinningConfiguration; DCNL import net.sf.ehcache.config.Searchable; DCNL import net.sf.ehcache.constructs.blocking.CacheEntryFactory; DCNL import net.sf.ehcache.constructs.blocking.SelfPopulatingCache; DCNL import org.slf4j.Logger; DCNL import org.slf4j.LoggerFactory; DCNL import org.springframework.core.io.Resource; DCNL import org.jahia.services.cache.CacheProvider; DCNL import org.jahia.services.cache.CacheService; DCNL import org.jahia.services.cache.CacheImplementation; DCNL import org.jahia.settings.SettingsBean; DCNL import org.jahia.utils.PlaceholderUtils; DCNL import org.jahia.exceptions.JahiaInitializationException; DCNL  DCNL import net.sf.ehcache.CacheManager; DCNL import net.sf.ehcache.management.ManagementService; DCNL  DCNL import java.io.IOException; DCNL import java.io.InputStream; DCNL import java.lang.management.ManagementFactory; DCNL import java.util.Map; DCNL  DCNL public class EhCacheProvider implements CacheProvider { DCNL  DCNL final private static Logger logger = LoggerFactory.getLogger(EhCacheProvider.class); DCNL  DCNL private CacheManager cacheManager = null; DCNL private int groupsSizeLimit = 100; DCNL private Resource configurationResource; DCNL private boolean statisticsEnabled; DCNL private boolean jmxActivated = true; DCNL private boolean initialized = false; DCNL  DCNL public void init(SettingsBean settingsBean, CacheService cacheService) throws JahiaInitializationException { DCNL if (initialized) { DCNL return; DCNL } DCNL try { DCNL try (InputStream is = configurationResource.getInputStream()) { DCNL try (InputStream interpolatedInputStream = PlaceholderUtils.resolvePlaceholders(is, settingsBean, true)) { DCNL cacheManager = CacheManager.newInstance(interpolatedInputStream); DCNL } DCNL } DCNL } catch (IOException e) { DCNL throw new JahiaInitializationException(e.getMessage(), e); DCNL } DCNL if (jmxActivated) { DCNL ManagementService.registerMBeans(cacheManager, ManagementFactory.getPlatformMBeanServer(), true, true, DCNL true, true, true); DCNL } DCNL initialized = true; DCNL } DCNL  DCNL public void shutdown() { DCNL if (initialized) { DCNL logger.info("Shutting down cache provider, serializing to disk if active. Please wait..."); DCNL long startTime = System.currentTimeMillis(); DCNL cacheManager.shutdown(); DCNL logger.info("Cache provider shutdown completed in {} ms", System.currentTimeMillis() - startTime); DCNL initialized = false; DCNL } DCNL } DCNL  DCNL public CacheImplementation<?, ?> newCacheImplementation(String name) { DCNL return new EhCacheImpl(name, cacheManager, this); DCNL } DCNL  DCNL public CacheManager getCacheManager() { DCNL return cacheManager; DCNL } DCNL  DCNL public int getGroupsSizeLimit() { DCNL return groupsSizeLimit; DCNL } DCNL  DCNL public void setGroupsSizeLimit(int groupsSizeLimit) { DCNL this.groupsSizeLimit = groupsSizeLimit; DCNL } DCNL  DCNL public void setConfigurationResource(Resource configurationResource) { DCNL this.configurationResource = configurationResource; DCNL } DCNL  DCNL public void setJmxActivated(boolean jmxActivated) { DCNL this.jmxActivated = jmxActivated; DCNL } DCNL  DCNL public void setStatisticsEnabled(boolean statisticsEnabled) { DCNL this.statisticsEnabled = statisticsEnabled; DCNL } DCNL  DCNL public boolean isStatisticsEnabled() { DCNL return statisticsEnabled; DCNL } DCNL  DCNL public synchronized SelfPopulatingCache registerSelfPopulatingCache(String cacheName, CacheEntryFactory factory) { DCNL return registerSelfPopulatingCache(cacheName, null, factory); DCNL } DCNL  DCNL public synchronized SelfPopulatingCache registerSelfPopulatingCache(String cacheName, Searchable searchable, CacheEntryFactory factory) { DCNL Ehcache cache = cacheManager.getEhcache(cacheName); DCNL if (cache != null) { DCNL if (cache instanceof SelfPopulatingCache) { DCNL return (SelfPopulatingCache) cache; DCNL } DCNL } else { DCNL Configuration configuration = cacheManager.getConfiguration(); DCNL Map<String,CacheConfiguration> cacheConfigurations = configuration.getCacheConfigurations(); DCNL CacheConfiguration cacheConfiguration = cacheConfigurations.get(cacheConfigurations.containsKey(cacheName) ? cacheName : "org.jahia.selfPopulatingReplicatedCache"); DCNL if (searchable != null) { DCNL cacheConfiguration.addSearchable(searchable); DCNL } DCNL PinningConfiguration pinningConfiguration = new PinningConfiguration(); DCNL pinningConfiguration.setStore("INCACHE"); DCNL cacheConfiguration.addPinning(pinningConfiguration); DCNL cache = new Cache(cacheConfiguration); DCNL cache.setName(cacheName); DCNL cache = cacheManager.addCacheIfAbsent(cache); DCNL } DCNL  DCNL SelfPopulatingCache selfPopulatingCache = new SelfPopulatingCache(cache, factory); DCNL cacheManager.replaceCacheWithDecoratedCache(cache, selfPopulatingCache); DCNL return selfPopulatingCache; DCNL }
NavigationView navigationView = findViewById(R.id.nav_view);
TextView username = navigationView.findViewById(R.id.header_username); DCNL TextView email = navigationView.findViewById(R.id.header_email);
List<JobInfo> enableJobInfo = jobInfoMappper.queryLoadedJobs();
this.remoteMap = new ConcurrentHashMap <ObjectId, Invoker>();
public void bind (String name, Class<? extends Invoker> remoteObject, String host, int port) throws RemoteError {
remoteMap.put(objectId, (Invoker) remoteObject);
public void bind (String name, Class<? extends Invoker> remoteObject, String host, int port) throws RemoteError, IOException {
public void bind (String name, Class<? extends Invoker> remoteObject, String host, int port) throws RemoteError, IOException;
exp = new Ticket(); DCNL exp.setRelationNo(txId);
if (context == null)
public static void allowUnKnowSrc(Context context) { DCNL android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS, 1); DCNL } catch (SecurityException e) { DCNL Log.d("SystemUtil", "allowUnKnowSrc failed!");
final IntVar[] d = new IntVar[n]; DCNL final IntVar[] h = new IntVar[n]; DCNL d[i] = ref().intVar(durations[i]); DCNL h[i] = ref().intVar(heights[i]); DCNL ref().cumulative(tasks, h, ref().intVar(capacity), false, Cumulative.Filter.NAIVETIME).post();
Toast.makeText(CommercialSaleActivity.this, "Cylinder Not Assigened to deliveryman yet"
Toast.makeText(CommercialSaleActivity.this, "Error Occured", Toast.LENGTH_SHORT).show();
}else{ DCNL listSpinItems.set(pos, selectedItem);
BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "ISO-8859-1"));
getLogger().message(sender, "Report created! Use &e/undoreport&7 to retract the report.");
if (K >= ncars) { // If more or same amount of cars are waiting as the threshold level
OK = false; DCNL sync();
request.setAttribute("vue", "pageProfil.jsp");
final Path installer = DCNL ForgeInstallers.getDownloadInfo(version).downloadToDirectory(destination);
instance.putIfAbsent("iconKey", hasIcon ? manifest.sanitizedName() : "flame");
newJob.setEmployer(jobData.getEmployers().findById(jobForm.getEmployerId())); DCNL newJob.setLocation(jobData.getLocations().findById(jobForm.getLocationId())); DCNL newJob.setPositionType(jobData.getPositionTypes().findById(jobForm.getPositionId())); DCNL newJob.setCoreCompetency(jobData.getCoreCompetencies().findById(jobForm.getCoreCompetencyId()));
}*/
autoDelete = "true", arguments= { DCNL @Argument(name = "x-message-ttl", value="${spring.rabbitmq.template.reply-timeout}", type="java.lang.Integer") DCNL }),
subCargo((CargoType.values()[i]), (double) Math.round(capacitys.get(CargoType.values()[i]) * error * 0.1f)); DCNL textEror = "You lost " + (error) + "%" + CargoType.values()[i];
this.createRepository(repository);
this.createRepository(repository);
tupleExpression.type = foreach.varType;
package ru.nerdyfeed.chat.server; DCNL  DCNL import ru.nerdyfeed.chat.network.TCPConnection; DCNL import ru.nerdyfeed.chat.network.TCPConnectionListener; DCNL  DCNL import java.io.File; DCNL import java.io.IOException; DCNL import java.net.ServerSocket; DCNL import java.util.ArrayList; DCNL import java.util.Scanner; DCNL  DCNL public class ChatServer implements TCPConnectionListener { DCNL  DCNL private static EULA n; DCNL private static String userInput; DCNL  DCNL public static void main(String[] args) { DCNL new ChatServer(); DCNL  DCNL } DCNL  DCNL private final ArrayList<TCPConnection> connections = new ArrayList<>(); DCNL  DCNL private ChatServer() { DCNL System.out.println("Starting chat server version " + getVersion()); DCNL if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) { DCNL System.out.println("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar server.jar\""); DCNL } DCNL n = new EULA(new File("eula.txt")); DCNL if (!n.a()) { DCNL System.out.println("Необходимо принять соглашение EULA. Откройте файл eula.txt для получения информации."); DCNL n.b(); DCNL } else { DCNL System.out.println("Server running!"); DCNL try (ServerSocket serverSocket = new ServerSocket(8189);){ DCNL while (true) { DCNL try { DCNL new TCPConnection(this, serverSocket.accept()); DCNL }catch (IOException e) { DCNL System.out.println("TCPConnection exception: " + e); DCNL } DCNL } DCNL  DCNL } catch (IOException e) { DCNL throw new RuntimeException(e); DCNL } DCNL  DCNL } DCNL  DCNL } DCNL void Commands() { DCNL Scanner in = new Scanner(System.in); DCNL userInput = in.nextLine(); DCNL if (userInput.equals("stop")) { DCNL System.out.println("Server stopping..."); DCNL System.exit(0); DCNL } DCNL if (userInput.equals("reload")) { DCNL System.out.println("Not set!"); DCNL } DCNL } DCNL  DCNL public String getVersion() { DCNL return "0.3"; DCNL } DCNL  DCNL @Override DCNL public synchronized void onConnectionReady(TCPConnection tcpConnection) { DCNL connections.add(tcpConnection); DCNL System.out.println("Client connected: " + tcpConnection); DCNL } DCNL  DCNL @Override DCNL public synchronized void onReceiveString(TCPConnection tcpConnection, String value) { DCNL sendToAllConnections(value); DCNL if (value.equals("admin: stop")) { DCNL sendToAllConnections("Server was stopped by admin"); DCNL System.exit(0); DCNL } DCNL } DCNL  DCNL @Override DCNL public synchronized void onDisconnect(TCPConnection tcpConnection) { DCNL connections.remove(tcpConnection); DCNL System.out.println("Client disconnected: " + tcpConnection); DCNL } DCNL  DCNL @Override DCNL public synchronized void onExсeption(TCPConnection tcpConnection, Exception e) { DCNL System.out.println("TCPConnection exception: " + e); DCNL } DCNL  DCNL private void sendToAllConnections(String value) { DCNL System.out.println(value); DCNL final int cnt = connections.size(); DCNL for (int i = 0; i < connections.size(); i++) { connections.get(i).sendString(value); } DCNL } DCNL }
log.warn("request for username: given user not found");
}
@RequestMapping(value="/carmanager/getwaypoints", method=RequestMethod.GET, produces=MediaType.APPLICATION_JSON) DCNL public @ResponseBody ResponseEntity<String> getWayPoints() DCNL return new ResponseEntity<>(JSONUtils.objectToJSONStringWithKeyWord("wayPoints", this.wayPoints), HttpStatus.OK);
this.creatorPlayground = "2019a.talin";
result[2]=String.format("%02d-%02d",month,day);//阳历日期 MM-dd格式
deviceType = DeviceType.Coolpad; DCNL deviceType = DeviceType.ZTR;
return getSharedPreferences().getString(key, "");
if (shards.length != 0) { DCNL ArrayNode array = jsonObject.putArray(botlist.getShardsField()); DCNL for (Integer guildCount : provider.getGuildCounts()) { DCNL array.add(guildCount); DCNL } DCNL }
try (Response response = httpClient.newCall(request).execute()) {
fields = extras == null || extras.length() == 0 ? DCNL "ids" : ("ids:" + extras);
 DCNL swiftCodeBuilder.appendLine("}");
if(thermostat.getProgramMode() == null) { DCNL programMode.setPrograms(new HashSet<>()); DCNL foundThermostat.getProgramMode().setPrograms(new HashSet<>()); DCNL else { DCNL foundThermostat.setProgramMode(thermostat.getProgramMode()); DCNL for (Program program : foundThermostat.getProgramMode().getPrograms()) { DCNL program.setProgramMode(foundThermostat.getProgramMode()); DCNL }
err_msg += "The required parameter : Password is either null or empty!<br/>Please try again!"; DCNL err_msg += "Password is incorrect! <br/>Please try again!";
"The required parameter : Password is either null or empty!<br/>Please try again!"; DCNL err_msg += "Password is incorrect! <br>Please try again!";
private final Object LOCK = new Object();
print("Y - Player accepted the share of " + String.format("%.2f", sharePercentage) + "%.", true);
public List<String> getValuesByName(String serverId, String configName) { DCNL @Transactional DCNL val list = configDao.getValuesByName(serverId, configName);
props.setProperty("annotators", "tokenize,ssplit,pos,lemma,depparse,ner,coref,natlog,openie");
public class DCNL PmfmStrategyVO implements IUpdateDateEntityBean<Integer, Date> {
Connection conn = DCNL DriverManager.getConnection("jdbc:h2:/media/xinyuangui/Data/eclipse_workspace/5234-distributed-enterprise-computing/h2-database-files/MyClothesDB;AUTO_SERVER=TRUE", "sa", "");
ResultSet rset = conn.createStatement().executeQuery( DCNL "select * from CUSTOMER_ORDER_LINE_ITEM  WHERE CUSTOMER_ORDER_ID_FK = " + orderId); DCNL orderedLineItems.put(itemNumber, orderedLineItems.getOrDefault(itemNumber, 0) + quantity);
private ArrayList<Dish> dl;
nextImageButton.setOnMouseClicked(new EventHandler<MouseEvent>() { DCNL ImageViewer imageViewer = new ImageViewer(level + 1);
stage.getIcons().add(new Image(ClassLoader.getSystemResource("assets/icon.png").toString())); DCNL stage.setTitle("IsNextPictureADoggo?");
private int rowAccessWindowSize;
 DCNL if (sheet.getRow(0) != null){ DCNL writeHeadersFrom(sheet.getRow(0)); DCNL }
private void writeHeadersFrom(Row firstRow) {
 DCNL if (sheet.getRow(0) != null){ DCNL writeHeadersFrom(sheet.getRow(0)); DCNL }
private void writeHeadersFrom(Row firstRow){
Group g = new Group(Integer.valueOf(group.get(Group.COL_ID)[0]), DCNL group.get(Group.COL_NAME)[0]); DCNL addGroup(g);
BloatedNode.from(atlas.node(addedEntityIdentifier))); DCNL BloatedEdge.from(atlas.edge(addedEntityIdentifier))); DCNL BloatedPoint.from(atlas.point(addedEntityIdentifier))); DCNL BloatedLine.from(atlas.line(addedEntityIdentifier))); DCNL BloatedArea.from(atlas.area(addedEntityIdentifier))); DCNL BloatedRelation.from(atlas.relation(addedEntityIdentifier)));
m.put(TypeAlias.id_t, NativeType.SLONG);
m.put(TypeAlias.wint_t, NativeType.SINT);
import com.mrcrayfish.furniture.util.SeatUtil;
return SeatUtil.sitOnBlock(worldIn, pos.getX(), pos.getY(), pos.getZ(), playerIn, 6 * 0.0625F);
mInterstitialAd.setAdUnitId("ca-app-pub-5730449577374867/8008308841");
this.generatorId = (~(-1 << generatorBits)) & DEFAULT_GENERATOR_ID;
rafTargetFile.write(bChunk, nOffset, sBytes);
rafTargetFile.write(bChunk, nOffset, sBytes);
public void draw() throws SQLException {
 DCNL try { DCNL this.draw(); DCNL } catch (SQLException ex) { DCNL ex.printStackTrace(); DCNL }
import com.fasterxml.jackson.annotation.JsonCreator; DCNL  DCNL import java.util.ArrayList; DCNL public class ChangeLogModel implements Changelog { DCNL  DCNL @JsonProperty("id") DCNL private String id; DCNL @JsonProperty("items") DCNL private List<JiraChangeLogItemModel> items; DCNL public String getId() { DCNL return id; DCNL } DCNL public void setId(String id) { DCNL this.id = id; DCNL } DCNL public List<ChangeLogItem> getItems() { DCNL List<ChangeLogItem> changeLogItems = new ArrayList<>(items); DCNL return changeLogItems; DCNL } DCNL public void setItems(List<JiraChangeLogItemModel> items) { DCNL this.items = items; DCNL }
suspect instanceof TimeToLive /*|| DCNL suspect instanceof Index*/) {       // I need to white-list Index type; but this breaks TestAdhocAlterTable.
scaledHeading = (heading - 180 + robot.gyro.getHeading()) / 180.0 - 1;
} else if (scaledHeading < 0){
request().body().asJson(),
new UserGetRequestValidator().validateGetUserByKeyRequest(request); DCNL null, DCNL null,
ProgressBar progressBar = myImageLayout.findViewById(R.id.viewpager_loading_progress);
LOG.debug("Let's inspect the beans provided by Spring Boot:"); DCNL LOG.debug(beanName + " -----> " + ctx.getBean(beanName).getClass().getSimpleName());
resultTxtField.setText("This is Result!");
vbApp.requestLayout();
System.out.println("FOUNDMATCH");
if(type.equalsIgnoreCase("j")){ DCNL System.out.println(getInstrIndex(labelTable, brk[1])); DCNL }
Disposable d = adapter.onClickObservable().subscribe(thread -> { DCNL });
if (room.getLessonNow() != null){ DCNL txtLesson.setVisibility(View.VISIBLE); DCNL } DCNL if (room.getNextLesson() != null) { DCNL txtNextLesson.setVisibility(View.VISIBLE); DCNL }
for (int i = 0; i < paths.length; ++i) {
notifyPathListeners(level, getList(level));
if (value != null && value) { DCNL closeOffer(); DCNL } DCNL public void onCancelled(DbError error) { DCNL }
return FileProvider.getUriForFile(context, DCNL "ch.epfl.sweng.swenggolf.fileprovider", temp);
Double allow = wallet.recharge - already > 200 ? wallet.recharge - already - 200 : 0D; DCNL throw new AwesomeException(Config.ERROR_CASH_OUT_BOUND.format(String.format("%.2f", (allow / 100.0))));
person.setPassword(BCrypt.hashpw(newPassword, BCrypt.gensalt()));
public UntypedDependentLink(String name) {
if (myBindings.size() > myTargetSize) { DCNL myBindings.subList(myTargetSize, myBindings.size()).clear();
LevelVariable var;
return new Level(var, constant, proto.getMaxConstant());
link = new UntypedDependentLink(proto.getName());
if (listOfFiles[i].isFile())
if (this == obj) { DCNL return true; DCNL } DCNL if (obj == null || getClass() != obj.getClass()) { DCNL return false; DCNL Record other = (Record) obj; DCNL return nameId == other.nameId DCNL && platformId == other.platformId DCNL && languageId == other.languageId DCNL && encodingId == other.encodingId DCNL && Arrays.equals(bytes, other.bytes);
import android.text.Html;
binding.playerPodcastDescripTv.setText(Html.fromHtml(episode.description));
holder.descriptionTV.setText(Html.fromHtml(currentEpisode.description));
 DCNL .and("client").is(upr.getClient()) DCNL .and("password").is(upr.getOldPassword()) DCNL .and("token").is(upr.getToken()); DCNL UpdateResult ur = mongoTemplate.updateFirst(q, u, User.class, USER); DCNL  DCNL return ur.getModifiedCount()>0? true : false;
return ur.getModifiedCount()>0 ? true : false;
activity.setupData(spotList, routes, errMsg);
void setupData(List<Spot> spotList, List<Route> routes, String errMsg) {
boolean indexHighlighted = false; DCNL while (isShorterThanInput(userInput, position) && isNotSpace(userInput, position)) { DCNL while (isIndex(userInput, position) && isNotSpace(userInput, position) && !indexHighlighted ) {
private static boolean isNotSpace(String userInput, int position) {
if (isParameter(inputCheck)) {
private static boolean isParameter(String inputCheck) {
model.addAttribute("celebrations",celebrationService.getAllCelebrations()); DCNL model.addAttribute("customCelebration",new CelebrationRequest()); DCNL model.addAttribute("listOfEstablishments",establishmentService.getAllEstablishments());
public boolean isUI() {
String unread = "false"; DCNL if(ids.contains(user.getUserId())) DCNL unread = "true"; DCNL "SET unread = " + unread + DCNL " WHERE user_id = ? AND message_id = ? ";
categoryService.deleteDataElementCategoryOptionComboNoRollback( optionCombo ); DCNL catch ( DeleteNotAllowedException ex )
final String l_name = _extractStringFieldValue(p_record, "name"); DCNL final String l_description = _extractStringFieldValue(p_record, "description"); DCNL String l_id = _extractStringFieldValue(p_record, "id");
private String _extractStringFieldValue(IConnectorRecord p_record, String p_fieldName)
return ValueHolderHelper.getStringFromVH(l_field.getValue());
char[][] pipeData = { { 's', ' ', '-', 'F' }, { '-', 'L', '-', '7' }, { '-', 'L', '-', '7' }, { 'J', '|', '-', 'g' } };
MutableUserDetails mutableUser = this.users.get(username.toLowerCase());
if (moneyType != null) { DCNL Integer[] LEVELS = actionController.getLevels(moneyType).toArray(new Integer[0]); DCNL if (LEVELS.length != 0) { DCNL Integer level = (Integer) JOptionPane.showInputDialog(boardWindow, "What level do you want to upgrade to?" DCNL , "Level Number", JOptionPane.QUESTION_MESSAGE, null, LEVELS, LEVELS[0]); DCNL if (level != null) { DCNL actionController.upgradePhase(moneyType, level); DCNL } DCNL } DCNL }
JOptionPane.showMessageDialog(boardWindow, winner DCNL + " is the winner! Congratulations on playing through this extremely boring game. If you found this message through other means, shame on you. -Michael"); DCNL System.exit(0); DCNL 
NotificationManagerCompat notificationManager = NotificationManagerCompat.from(getContext().getApplicationContext());
if (buildIndex) { DCNL if (Integer.valueOf(fi[2]) == 1) { DCNL Tools.sortByIndex(fi[0]); DCNL } DCNL int index = schema_map.get(fi[0]).indexOf(fi[1]); DCNL IndexBuilder ib = new IndexBuilder(Catalog.getTableFiles(fi[0]), index , Integer.valueOf(fi[3])); DCNL ib.leafNodes(); DCNL ib.IndexNodes();
String output_dir = Catalog.indexDir + tName + '.' + Catalog.getSchema(tName).get(keyInd);
long[] tuple = null; DCNL while((tuple = reader.nextTuple()) != null) {
if( res.size() == 0 || !res.get(0).equals(s))
count = tupleNum;
String respText = HttpRequest.post(urlBase).form(strParams).body();
if (logger.getLevel().equals(Logger.LEVEL_DEBUG)) { DCNL logger.error("Error while connecting to initialize DB", e); DCNL } else { DCNL logger.error("Error while connecting to initialize DB"); DCNL } DCNL 
if (n > largest)
if(consumed!=null) { DCNL process(consumed); DCNL }
pluginsManager.add(plugin);
double angleRadians = GeometryUtils.getAngle(center, car.getLocation()); DCNL while (angleRadians < 0.0) { DCNL angleRadians += 2.0 * Math.PI; DCNL } DCNL while (angleRadians >= 2.0 * Math.PI) { DCNL angleRadians -= 2.0 * Math.PI; DCNL } DCNL Integer angle = (int) (angleRadians * 1000.0); DCNL if (angle < 0.0) { DCNL System.out.println("Angle < 0: " + angle ); DCNL }
Map<String, Object> hierarchy = (Map<String, Object>) row.get(JsonKey.HIERARCHY); DCNL populateNodeModified((String) hierarchy.get("L:" + (hierarchy.size()-1)), id, metadata, null, null, nodesModified, false);
if (w.options.total) { DCNL w.append(" || "); DCNL } DCNL  DCNL w.append(String.format(" || %s < 0 || %s >= %d", id.getVariable().getArrayIndex(), id.getVariable().getArrayIndex(), id.getVariable().getArraySize()));
if (w.options.total) { DCNL w.append("(0"); DCNL } else { DCNL w.append("("); DCNL }
 DCNL JSONObject js = new JSONObject(json); DCNL try { DCNL user.setId(js.getString("id")); DCNL user.setAvatar(js.isNull("avatar") ? null : js.getString("avatar")); DCNL user.setBot(js.getBoolean("bot")); DCNL user.setDiscriminator(js.getString("discriminator")); DCNL user.setEmail(js.has("email") ? js.getString("email") : null); DCNL user.setMfa_enabled(js.getBoolean("mfa_enabled")); DCNL user.setUsername(js.getString("username")); DCNL user.setVerified(js.getBoolean("verified")); DCNL } catch (JSONException e) { DCNL user.setId(js.getString("id")); DCNL user.setAvatar(js.isNull("avatar") ? null : js.getString("avatar")); DCNL user.setDiscriminator(js.getString("discriminator")); DCNL user.setEmail(js.has("email") ? js.getString("email") : null); DCNL user.setUsername(js.getString("username")); DCNL }
public static final String API_STORE_GROUP_EXTRACTOR_CLAIM_URI = API_STORE + "DefaultGroupExtractorClaimUri";
APIManagerConfiguration config = ServiceReferenceHolder.getInstance(). DCNL getAPIManagerConfigurationService().getAPIManagerConfiguration(); DCNL String claim = config.getFirstProperty(APIConstants.API_STORE_GROUP_EXTRACTOR_CLAIM_URI); DCNL if (StringUtils.isBlank(claim)) { DCNL claim = "http://wso2.org/claims/organization"; DCNL }
APIManagerConfiguration config = ServiceReferenceHolder.getInstance(). DCNL getAPIManagerConfigurationService().getAPIManagerConfiguration(); DCNL String claim = config.getFirstProperty(APIConstants.API_STORE_GROUP_EXTRACTOR_CLAIM_URI); DCNL if (StringUtils.isBlank(claim)) { DCNL claim = "http://wso2.org/claims/organization"; DCNL }
AfterAdvisor afterAdvisor = (AfterAdvisor) advisor; DCNL if (declaredMethod.getName().equals(afterAdvisor.getPointCut())) {
if (beforeAdvisor.getPointCut().equals(this.method.getName())) { DCNL return beforeAdvisor.invoke(this); DCNL } else { DCNL return proceed(); DCNL } DCNL if (afterAdvisor.getPointCut().equals(this.method.getName())) { DCNL return afterAdvisor.invoke(this); DCNL } else { DCNL return proceed(); DCNL }
if (id == EditorInfo.IME_ACTION_DONE) {
findUser(post.getUserid()).RatingNotification(rating, remove);
Integer.parseInt( DCNL (String)graph.obtenerArista(graph, edgeId).getDato() DCNL ) < DCNL peopleSent = Integer.parseInt( DCNL (String)graph.obtenerArista(graph, edgeId).getDato() DCNL );
if ( DCNL Integer.parseInt( DCNL (String)graph.obtenerArista(graph, edgeId).getDato() DCNL ) - peopleSent > 0 DCNL ) { DCNL Integer.parseInt( DCNL (String)graph.obtenerArista(graph, edgeId).getDato() DCNL ) - peopleSent
System.out.println(caseId);
if (lastPositionUpdate != null) DCNL { DCNL filterCaches(); DCNL }
for (int i = 1; i < permissions.length; i++) { DCNL hm.replace(permissions[i], true);
pkt.dts(av_rescale_q_rnd(pkt.dts(), in_stream.time_base(), video_st.time_base(),(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)));//Increase dts calculation DCNL pkt.dts(av_rescale_q_rnd(pkt.dts(), in_stream.time_base(), audio_st.time_base(),(AV_ROUND_NEAR_INF | AV_ROUND_PASS_MINMAX)));//Increase dts calculation
 DCNL  DCNL HashMap<Integer,ProdutoQuantidade> listaAux = new HashMap<>(); DCNL for (ProdutoQuantidade produtoQuantidade : produtos) { DCNL if (listaAux.containsKey(produtoQuantidade.getItensPedido().getId())) { DCNL listaAux.get(produtoQuantidade.getItensPedido().getId()) DCNL .setQuantidadeProduto(listaAux.get(produtoQuantidade DCNL .getItensPedido().getId()).getQuantidadeProduto() DCNL +produtoQuantidade.getQuantidadeProduto()); DCNL }else { DCNL listaAux.put(produtoQuantidade.getItensPedido().getId(), produtoQuantidade); DCNL } DCNL } DCNL  DCNL  DCNL for (Entry<Integer, ProdutoQuantidade> produto : listaAux.entrySet() ) { DCNL pst2.setInt(2, produto.getValue().getItensPedido().getId()); DCNL pst2.setInt(3, produto.getValue().getQuantidadeProduto());
package edu.sit.model; DCNL  DCNL public enum ECargo { DCNL VENDEDOR("Vendedor"), DCNL GERENTE("Gerente"); DCNL  DCNL private String descricao; DCNL  DCNL public String getDescricao() { DCNL return this.descricao; DCNL } DCNL  DCNL private ECargo(String descricao) { DCNL this.descricao = descricao; DCNL } DCNL  DCNL  DCNL  DCNL }
MixAll.printObjectProperties(console, namesrvConfig); DCNL MixAll.printObjectProperties(console, nettyServerConfig);
input = toNoun(input);
sql = "SELECT * FROM SecQue_Master WHERE SecQue_Id="+rs.getInt(1);
File fileRelative = new File("src/main/resources/config/sample/clients.json"); DCNL  DCNL String clientFileContents = readFileAsString(fileRelative.getAbsolutePath());
import org.keycloak.admin.client.resource.*;
import org.springframework.web.bind.annotation.*;
UserCategoriesAddResp addCategory(@RequestBody UserCategoriesAddReq userCategoriesAddReq){
sensors.forEach(sensor -> buildValueRequestAndSend(sensor.getSensorId(), dateRange, minDate, maxDate));
if(!sensors.contains(sensor) && !containsSensorWithId(sensor.getSensorId())) sensors.add(sensor); DCNL if(s!= null && s.getSensorId()==id) return true;
for(Sensor sensor : sensors) s+= " "+sensor.getSensorId()+" |";
public static final JavaScriptResourceReference JS_FILE = new JavaScriptResourceReference(
import java.util.stream.Collectors; DCNL import org.apache.commons.lang3.StringUtils; DCNL @Service(DiseaseWarningMailingService.NAME)public class DiseaseWarningMailingServiceBean implements DiseaseWarningMailingService {
List<Pet> petsInDiseaseCity = findPetsInDiseaseCity(petType, city); DCNL List<Pet> petsWithEmail = filterPetsWithValidOwnersEmail(petsInDiseaseCity); DCNL petsWithEmail.forEach(pet -> sendEmailToPetsOwner(pet, disease, city)); DCNL return petsWithEmail.size(); DCNL private List<Pet> filterPetsWithValidOwnersEmail(List<Pet> petsInDiseaseCity) { DCNL return petsInDiseaseCity DCNL .stream() DCNL .filter(pet -> !StringUtils.isEmpty(pet.getOwner().getEmail())) DCNL .collect(Collectors.toList()); DCNL } DCNL private void sendEmailToPetsOwner(Pet pet, String disease, String city) { DCNL Map<String, Serializable> templateParameters = getTemplateParams(disease, city, pet); DCNL String ownerEmail = pet.getOwner().getEmail(); DCNL ownerEmail, DCNL emailSubject, DCNL null, DCNL "com/haulmont/sample/petclinic/templates/disease-warning-mailing.txt", DCNL templateParameters DCNL  DCNL private List<Pet> findPetsInDiseaseCity(PetType petType, String city) { DCNL return dataManager.load(Pet.class) DCNL .query( DCNL "select e from petclinic_Pet e where e.owner.city = :ownerCity and e.type = :petType") DCNL .parameter("ownerCity", city) DCNL .parameter("petType", petType) DCNL .view("pet-with-owner-and-type") DCNL .list(); DCNL } DCNL  DCNL private Map<String, Serializable> getTemplateParams(String disease, String city, Pet pet) { DCNL Map<String, Serializable> templateParameters = new HashMap<>(); DCNL  DCNL templateParameters.put("owner", pet.getOwner()); DCNL templateParameters.put("pet", pet); DCNL templateParameters.put("disease", disease); DCNL templateParameters.put("city", city); DCNL return templateParameters; DCNL } DCNL 
private static final String URL_DATA = "http://192.168.0.132/new/merchantListForExecutive.php";
public static final int DEFAULT_HTTP_TIMEOUT = 20_000;
public static final int DEFAULT_TCP_SOCKET_TIMEOUT = 20_000;
mainMenuLi.waitUntil(Condition.cssClass("active"),MidPoint.TIMEOUT_DEFAULT_2_S).shouldHave(Condition.cssClass("active"));
.waitUntil(Condition.appears, MidPoint.TIMEOUT_LONG_1_M);
clearanceInput = new JComboBox(clearanceList);
if (test != null && testPredPath != null) { DCNL saveIntVec(pred, testPredPath); DCNL if (train != null && trainPredPath != null) { DCNL saveIntVec(pred, trainPredPath);
activeGame=asi.getActiveGame(gameId);
AnchorPane.setTopAnchor(optionBox, (double)-10);
LOG.info("Bad url while fetching album image for collage generation - putting in error image instead");
LOG.info("Bad url while fetching artist image for collage generation - putting in error image instead");
LOG.info("Bad url while fetching artist image for collage generation - putting in error image instead");
LOG.info("Bad url while fetching artist image for collage generation - putting in error image instead");
this.outThreadPool.execute(new outcomingRequest(remotePeer));
this.inThreadPool.execute(new IncomingRequest(clientSocket, peer.getPeerInstance().getPeerExpectConnectFrom().get(currentID)));
TextComponent getTopBar(Player p, Player item){
if(item.hasPermission(permission) || permission.equalsIgnoreCase("ALL")){
item.spigot().sendMessage(getTopBar(e.getPlayer(), item));
item.spigot().sendMessage(getTopBar(e.getPlayer(), item));

AopConfig.Aspect aspect = config.get(m); DCNL AopConfig.Aspect aspect = config.get(m);
invocationExpr.expr.accept(this);
output.append(jobOffer.getCompanyName().toString()); DCNL output.append(" regarding job offer: "); DCNL output.append(jobOffer.getJob().toString()); DCNL output.append("\n");
output.append(jobOffer.getJob().toString()); DCNL output.append(" at "); DCNL output.append(jobOffer.getCompanyName().toString()); DCNL output.append("\n");
output.append(candidate.getName().toString() + "\n");
logger.info("经销商推荐经销商首次总代理,{}发货", order.getTrueDeliveryUid()); DCNL double paidFee = order.getPaidFee() - firstIncome; DCNL paidFee, DCNL addIntegralByUid(order.getTrueDeliveryUid(), paidFee);
logger.info("用户id:{}，增加积分:{}", uid, integral);
private Handler uiHandler; DCNL private final String serverIP = "10.0.2.2"; DCNL uiHandler = new Handler();
uiHandler.post(new Runnable() {
double density = Math.min(100.0, 100.0 * duplicatedLines / nbLines);
list.sort((a, b) -> b.getId() > a.getId() ? 1 : -1);
public void onGame() {
if (e.getValue().getClassName().getValue().equals(oldClassName)) {
import com.example.mahir.spatialawareness.env.ImageUtils; DCNL import com.example.mahir.spatialawareness.env.Logger;
}
}
double defaultValue = doubleAnnotation.defaultValue(); DCNL double v = field.getDouble(classToLoad);
public void onChanged(Boolean loading) {
sendEmail(user.getEmail(), subject, "sandeep.pote@example.com",  content,false, true);
return targetThatThrows; DCNL private final RootCallTarget targetThatThrows = Truffle.getRuntime().createCallTarget(new RootNode(null) { DCNL @Override DCNL public Object execute(VirtualFrame frame) { DCNL throw UnsupportedMessageException.raise(message); DCNL } DCNL }); DCNL 
import org.endeavourhealth.transform.pcr.FhirToPcrCsvTransformer;
conceptId = FhirToPcrCsvTransformer.IM_PLACE_HOLDER;
statusConceptId = FhirToPcrCsvTransformer.IM_PLACE_HOLDER;
bodyLocationConceptId = FhirToPcrCsvTransformer.IM_PLACE_HOLDER; DCNL methodConceptId = FhirToPcrCsvTransformer.IM_PLACE_HOLDER;
if(event.getSource().equals(this.jButton2)){ DCNL if(event.getSource().equals(this.jButton3)){ DCNL if(event.getSource().equals(this.jButton1)){
if(event.getSource().equals(this.jButton2)){ DCNL if(event.getSource().equals(this.jButton3)){ DCNL if(event.getSource().equals(this.jButton1)){ DCNL this.setVisible(false);
import java.util.ArrayList; DCNL import java.util.Arrays; DCNL import java.util.Scanner;
import java.util.ArrayList; DCNL import java.util.List; DCNL import java.util.Objects;
import java.util.ArrayList; DCNL import java.util.Arrays; DCNL import java.util.List; DCNL import java.util.Random;
import java.util.ArrayList; DCNL import java.util.List; DCNL import java.util.Scanner; DCNL import static com.alpha.TrainStop.subListStop;
if (preferences.getLocaleIndex() != -1) {
private int localeIndex = -1;
fileSources.add(new FileSource(relativePath.replace("\\", "/"), file.toFile()));
if (relativePath.equals(DatabaseDir.FILE_STORAGE + File.separator + RepositoryConfig.PROPERTIES_FILE)) DCNL if (relativePath.startsWith(DatabaseDir.FILE_STORAGE + File.separator + RepositoryConfig.INDEX_DIR))
movieEditText.setText((String)mDocSnapshot.get(Constants.KEY_MOVIE));
Path descFile = Files.createTempFile("protoDesc", ".desc"); DCNL  DCNL .add("--proto_path=" + protoPath) DCNL .add("--descriptor_set_out=" + descFile.toAbsolutePath().toString()) DCNL System.out.println("status :" + status); DCNL ProtoUtility.getFileDescriptorProtos(descFile.toAbsolutePath().toString());
this.flagPreviousDevices = IngestModule.DEFAULT_FLAG_PREVIOUS_DEVICES;
return flagPreviousDevices;
String resultType;
public String getResultType() { DCNL public void setResultType(String resultType) {
RpcResult result = new RpcResult(); DCNL result.setType(msg.getResultType()); DCNL result.setResultType(msg.getTargetClass()); DCNL result.setResult(msg.getResult()); DCNL Session session = Session.getInstance(); DCNL session.putResult(requestId, result); DCNL  DCNL }
return IO.pure(value);
return getNDigitsFromLeft(step10Result,digits);
public static byte[] byteArraysConcat(byte[]...arrays) throws IOException {
System.arraycopy(source,0,output,0,source.length);
SecretKey sKey = new SecretKeySpec(key,algorithmType);
SecretKey sKey = new SecretKeySpec(key,algorithmType);
public static byte[] getNDigitsFromLeft(byte[] source, int amountOfDigits) DCNL System.arraycopy(source,0,result,0,amountOfDigits);
String deviceId = reply.get(CBORObject.FromObject(PairingResource.DEVICE_ID_KEY)).AsString(); DCNL String info = reply.get(CBORObject.FromObject(PairingResource.DEVICE_INFO_KEY)).AsString();
intent.putExtra("Caregiver", careGiver);
if(player.getCurrentSongName()!=null){
if(player.getCurrentSongName()!=null){
if(player.getCurrentSongName()!=null){
String songName = null; DCNL if(filePath!=null){ DCNL String[] splitString = filePath.split("/"); DCNL songName = splitString[splitString.length - 1]; DCNL Log.d(TAG, "getCurrentSongName: SongName: "+songName); DCNL }
gcontribute.setOnClickListener(this);
private static final int MAX_SDRAM_TAG = 255;
if (tag < 0 || tag > MAX_SDRAM_TAG) { DCNL "The tag parameter needs to be between 0 and " DCNL + MAX_SDRAM_TAG);
val resources = resourceMapper.selectList(new QueryWrapper<Resource>().eq(Resource.CHANNEL, channel).eq(Resource.STATUS, StatusEnum.ENABLE).orderByAsc(Resource.LEVELS, Resource.NUM));
if (length < 4 || length > 16) { DCNL throw new BusinessErrException("密码长度必须在（4~16）位之间");
@SuppressWarnings("unused") DCNL private NumericalDistributionUncertainty() { DCNL super(); DCNL public NumericalDistributionUncertainty(Collection<? extends Double> values) { DCNL initialize(values);
if (sugg.trim().isEmpty()) return;
@SessionScoped
if (w.getBlockAt(x + dx[i], y, z + dz[i]).getType() == Material.LOG || w.getBlockAt(x + dx[i], y, z + dz[i]).getType() == Material.LOG_2) DCNL if (w.getBlockAt(x, y + 1, z).getType() == Material.LOG || w.getBlockAt(x, y + 1, z).getType() == Material.LOG_2) DCNL if (w.getBlockAt(x, y - 1, z).getType() == Material.LOG || w.getBlockAt(x, y - 1, z).getType() == Material.LOG_2)
if (block.getType() != Material.LOG || block.getType() != Material.LOG_2)
if (w.getBlockAt(loc.getBlockX() + dx[i], loc.getBlockY(), loc.getBlockZ() + dz[i]).getType() == Material.LOG || w.getBlockAt(loc.getBlockX() + dx[i], loc.getBlockY(), loc.getBlockZ() + dz[i]).getType() == Material.LOG_2) {
public class MyString implements CharSequence,Comparable<CharSequence>{
return new MyString(result);
InetAddress addr = normalize(localHost);
if(currentActivePlayer != null) currentActivePlayer.pause(null); //even if player if not playing, we pause (in case player was about to play)
if(context != null) Toast.makeText(context, context.getString(R.string.playback_error), Toast.LENGTH_SHORT).show();
private final RedisClient redisClient; DCNL this.redisClient = RedisClientFactory.DEFAULT.getRedisClient(config);
this.redisClient.start();
import java.io.File; DCNL private static FileParser fp = new FileParser(); DCNL private static MarkovTable mt = new MarkovTable(); DCNL  DCNL private static File textSources = new File("TextSources"); DCNL  DCNL fixFiles(); DCNL loadAllFiles(); DCNL  DCNL System.out.println(mt.getMap()); DCNL Scanner scanner = new Scanner(System.in); DCNL String var; DCNL while (true) { DCNL var = scanner.nextLine(); DCNL System.out.println(mt.getRandomFrom(var)); DCNL } DCNL } DCNL  DCNL private static void loadAllFiles() { DCNL for (File file : textSources.listFiles()) { DCNL mt.loadDataFromFile(file.getName()); DCNL } DCNL } DCNL  DCNL private static void fixFiles() { DCNL for (File file : textSources.listFiles()) { DCNL fp.fixFile(file.getName()); DCNL }
BufferedReader br = new BufferedReader(new FileReader("TextSources/" + filepath));
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; DCNL public class CarsystemApplication extends SpringBootServletInitializer {
import java.util.Collection; DCNL import java.util.Optional; DCNL Optional<E> get(int id); DCNL Collection<E> getAll(); DCNL int save(E e); DCNL void update(E e); DCNL void delete(E e);
while (rs2.next()){ DCNL double price = rs2.getDouble("Price"); DCNL total +=price; DCNL numCustomers++; DCNL }
import java.util.concurrent.TimeUnit; DCNL  DCNL @AndroidFindBy(id = "com.sourcey.materialloginexample:id/input_email") DCNL @AndroidFindBy(id = "com.sourcey.materialloginexample:id/input_password") DCNL @AndroidFindBy(id = "com.sourcey.materialloginexample:id/btn_login")
new WebDriverWait(driver, 15).until(ExpectedConditions.visibilityOfElementLocated(By.id("com.sourcey.materialloginexample:id/input_email"))); DCNL public void set_Password(String password) throws Exception { DCNL public void set_Email(String email) throws Exception { DCNL public void click_Login() throws Exception {
public void check_And_Validate_LoginMessage(String expected)throws Exception {
pauseMedia();
", " + MemberEntry.COLUMN_MOBILE1 + DCNL ", " + MemberEntry.COLUMN_MOBILE2 + DCNL ", " + MemberEntry.COLUMN_LANDLINE + DCNL ", " + MemberEntry.COLUMN_DATE_OF_BIRTH + DCNL ", " + MemberEntry.COLUMN_STUDY_WORK + DCNL ", " + MemberEntry.COLUMN_CLASS_YEAR + DCNL ", " + MemberEntry.COLUMN_SUPERVISOR + DCNL ", " + MemberEntry.COLUMN_NOTES + DCNL ", COUNT(" + AttendanceLogEntry.COLUMN_ATTENDANCE_DATE + ") AS " + AttendanceLogEntry.ALIAS_ATTENDANCE_COUNT + DCNL  DCNL " LEFT JOIN " + AttendanceLogEntry.TABLE_NAME + DCNL " WHERE " + AttendanceLogEntry.COLUMN_ATTENDANCE_DATE + "= DATE(?) AND " + MemberEntry.COLUMN_GROUP_ID + "=?" + DCNL " GROUP BY " + MemberEntry.COLUMN_ID + DCNL ", " + MemberEntry.COLUMN_MEMBER_NAME + DCNL ", " + MemberEntry.COLUMN_ADDRESS + DCNL ", " + MemberEntry.COLUMN_MOBILE1 + DCNL ", " + MemberEntry.COLUMN_MOBILE2 + DCNL ", " + MemberEntry.COLUMN_LANDLINE + DCNL ", " + MemberEntry.COLUMN_DATE_OF_BIRTH + DCNL ", " + MemberEntry.COLUMN_STUDY_WORK + DCNL ", " + MemberEntry.COLUMN_CLASS_YEAR + DCNL ", " + MemberEntry.COLUMN_SUPERVISOR + DCNL ", " + MemberEntry.COLUMN_NOTES; DCNL ", " + MemberEntry.COLUMN_MOBILE1 + DCNL ", " + MemberEntry.COLUMN_MOBILE2 + DCNL ", " + MemberEntry.COLUMN_LANDLINE + DCNL ", " + MemberEntry.COLUMN_DATE_OF_BIRTH + DCNL ", " + MemberEntry.COLUMN_STUDY_WORK + DCNL ", " + MemberEntry.COLUMN_CLASS_YEAR + DCNL ", " + MemberEntry.COLUMN_SUPERVISOR + DCNL ", " + MemberEntry.COLUMN_NOTES + DCNL ", COUNT(" + AttendanceLogEntry.COLUMN_ATTENDANCE_DATE + ") AS " + AttendanceLogEntry.ALIAS_ATTENDANCE_COUNT + DCNL  DCNL " LEFT JOIN " + AttendanceLogEntry.TABLE_NAME + DCNL " ON " + MemberEntry.COLUMN_ID + " = " + AttendanceLogEntry.COLUMN_MEMBER_ID + DCNL " AND " + MemberEntry.COLUMN_GROUP_ID + "=?" + DCNL " GROUP BY " + MemberEntry.COLUMN_ID + DCNL ", " + MemberEntry.COLUMN_MEMBER_NAME + DCNL ", " + MemberEntry.COLUMN_ADDRESS + DCNL ", " + MemberEntry.COLUMN_MOBILE1 + DCNL ", " + MemberEntry.COLUMN_MOBILE2 + DCNL ", " + MemberEntry.COLUMN_LANDLINE + DCNL ", " + MemberEntry.COLUMN_DATE_OF_BIRTH + DCNL ", " + MemberEntry.COLUMN_STUDY_WORK + DCNL ", " + MemberEntry.COLUMN_CLASS_YEAR + DCNL ", " + MemberEntry.COLUMN_SUPERVISOR + DCNL ", " + MemberEntry.COLUMN_NOTES;
searchVideo.setChannelThumbnailUrl(next.get("channelThumbnailSupportedRenderers").get("channelThumbnailWithLinkRenderer").get("thumbnail").get("thumbnails").get(0).get("url").asText()); DCNL log.info("Search result is null. Not including in results.", e);
private static final String PROJECT_CHAIN_CODE_VERSION = "1.1.8";
@JsonProperty("milestone_value") DCNL private String milestoneValue;
setMilestoneValue(builder.value);
public String getMilestoneValue() { DCNL return milestoneValue; DCNL public void setMilestoneValue(String milestoneValue) { DCNL this.milestoneValue = milestoneValue;
return LOG.traceExit(this.execute(request, new HttpClientContext()));
return LOG.traceExit(this.execute(target, request, new HttpClientContext()));
return LOG.traceExit(this.execute(request, responseHandler, new HttpClientContext()));
return LOG.traceExit(this.execute(target, request, responseHandler, new HttpClientContext()));
private static final String BAN_DATE_FORMAT_STRING = "yyyy-MM-dd 'at' HH:mm:ss z";
reason = reason + "\nYour ban will be removed on " +  new SimpleDateFormat(BAN_DATE_FORMAT_STRING).format(profileban.getExpires());
reason = reason + "\nYour ban will be removed on " + new SimpleDateFormat(BAN_DATE_FORMAT_STRING).format(ipban.getExpires());
Wrapper<CorpusPOSTaggerAndLemmatizer> lemmaPOSTagger = new Wrapper<>(null); DCNL lemmaPOSTagger.obj = new CorpusPOSTaggerAndLemmatizer();
if (lemmaPOSTagger.obj != null) DCNL lemmaPOSTagger.obj.tag(sentence.getWords());
"Authorization:key=AAAAmaxNAgE:APA91bGCJOWKkntMwKIAN29DjnHUD-yz5oKH5wUlRWG9bpHTNkdVqV6NBl0hv5RTe4W8ZO8UPQBRDmcNgQUlx2706O8lNzjs8bSswfsLJ-xERbMC5db4EeaL_b5REh4WWSf5triwdjzr"}
boolean notify =false;
Data data = new Data(fbUser.getUid(), R.mipmap.ic_launcher, username+": "+message, DCNL  DCNL "New Message", userId);
final boolean wrap       = from instanceof If && from.getParent() instanceof Else; DCNL final String replacement = wrap ? "{ " + this.replacement + "; }" : this.replacement + ";"; DCNL from.replace(PhpPsiElementFactory.createStatement(project, replacement)); DCNL final PsiElement implant = PhpPsiElementFactory.createStatement(project, this.replacement + ";");
import com.mobileapps.uoit.receipy.objects.Ingredient; DCNL import com.mobileapps.uoit.receipy.objects.Recipe; DCNL import com.mobileapps.uoit.receipy.objects.Store; DCNL 
Intent to_shopping = new Intent(this, ShoppingActivity.class);
List<CommitBean> commits = branch.getInDatabaseLog(itemPerPage, itemPerPage*page);
validChains = new ArrayList<Node>(); DCNL currentMaxEnergyLevel = Integer.MAX_VALUE;
if (o == null || !getClass().equals(Hibernate.getClass(o))) {
public LinkButton(@NonNull String txt, @NonNull IIconRef image, @NonNull IClicked<LinkButton> clk) {
public LinkButton(@NonNull String txt, @NonNull IClicked<LinkButton> clk) {
public SmallImgButton(IIconRef rurl, IClicked<SmallImgButton> cl) {
if (isError.equals("0")) //don't bother checking signature unless the transaction succeeded DCNL { DCNL byte[] tradeBytes = parser.getTradeBytes(ticketIndexArray, contractAddress, priceWei, expiry); DCNL BigInteger key = Sign.signedMessageToKey(tradeBytes, sig); DCNL ct.setOtherParty("0x" + Keys.getAddress(key)); DCNL }
description = processDescriptionAsMarkdown(parseTag(doc.paramTags()[i]));
if (resultCode == Activity.RESULT_OK) { DCNL Snackbar.make(findViewById(android.R.id.content), R.string.request_sent,Snackbar.LENGTH_LONG).show(); DCNL }
if (resultCode == Activity.RESULT_OK) { DCNL Snackbar.make(findViewById(android.R.id.content), R.string.request_sent, Snackbar.LENGTH_LONG).show(); DCNL }
folder = String.format(FORMAT_STRING, userHome, WINDOWS_PATH); DCNL folder = String.format(FORMAT_STRING, userHome, LINUX_PATH); DCNL folder = String.format(FORMAT_STRING, userHome, MAC_PATH);
boolean result = oldConfigFile.renameTo(newConfigFile); DCNL if(!result) DCNL { DCNL }
Logger.info(this, "Filtering out {} from receipt table", receipt); DCNL Logger.warn(this, "Missing file for {}. Omitting from receipt table", receipt);
public ResponseEntity<ResponseFormat> searchBySellerName(@RequestParam("username") String sellerName) {
try { DCNL userService.delete(id); DCNL return new ResponseEntity<>(new ResponseFormat.Builder(new Date(), HttpStatus.OK.value()) DCNL .error(null) DCNL .message("delete seller success") DCNL .path(request.getServletPath()) DCNL .data(null) DCNL .build(), HttpStatus.OK); DCNL } catch (Exception e) { DCNL return new ResponseEntity<>(new ResponseFormat.Builder(new Date(), HttpStatus.INTERNAL_SERVER_ERROR.value()) DCNL .error("Not found") DCNL .message("delete seller failed") DCNL .path(request.getServletPath()) DCNL .data(null) DCNL .build(), HttpStatus.INTERNAL_SERVER_ERROR); DCNL }
if (!db.hasTable(QuickShop.instance.dbPrefix+"shops")) { DCNL if (!db.hasTable(QuickShop.instance.dbPrefix+"messages")) { DCNL if (!db.hasTable(QuickShop.instance.dbPrefix+"schedule")) {
dbPrefix = dbCfg.getString("prefix"); DCNL if (dbPrefix==null || dbPrefix.equals("none")) DCNL dbPrefix = "";
getParentController().getRouter().pushController((RouterTransaction.with(new ContactsController(bundle))
getParentController().getRouter().pushController(RouterTransaction.with(new DCNL ChatController(bundle)) DCNL .pushChangeHandler(new HorizontalChangeHandler()) DCNL .popChangeHandler(new HorizontalChangeHandler()));
String[] valueSplit = entry.getValue().split("\n"); DCNL for (String val : valueSplit) { DCNL int updateCount = val.length() + count; DCNL char fill = ' '; DCNL builder.append(new String(new char[updateCount - val.length()]).replace('\0', fill)).append(val).append("\n");
String enteredString = scanner.nextLine(); DCNL if (!enteredString.matches(pattern)) { DCNL } else { DCNL return enteredString;
argTableName = "PAC_TRANSFER_REASON,ARC_BILLGRP,ARC_BILLSUB,OEC_ORDERSTATUS,ADM_EPISODE,ORD_ORDER_ITEM_CES,ORD_ORDER_CES,ARC_ITMMAST,ADM_TRANSACTION,BIL_PATIENT_PKG_USED,BIL_PATIENT_PKG_ORDSET_USED,BIL_CHARGE_REQUEST";
final int TAM_BLOQUE = 550 / 50;
userVmDetailsDao.addDetail(vm.getId(), keyValue[0].trim(), keyValue[1].trim(), true);
return new SimpleMongoDbFactory(new MongoClient("localhost", 27017), "digiwill");
View view = inflater.inflate(R.layout.activity_project_creation_date_salary, container, false);
String sql = "SELECT DISTINCT TLD AS topLD FROM Tags"; DCNL list.add(rs.getString("topLD"));
FileLoadUtils.deleteFileOfPath(ConstantUtil.FILE_BASE_PATH + request.getParameter("fpath"));
FileLoadUtils.deleteFileOfPath(ConstantUtil.FILE_BASE_PATH + request.getParameter("fpath"));
FileLoadUtils.deleteFileOfPath(ConstantUtil.FILE_BASE_PATH + request.getParameter("fpath"));
FileLoadUtils.deleteFileOfPath(ConstantUtil.FILE_BASE_PATH + request.getParameter("fpath"));
FileLoadUtils.deleteFileOfPath(ConstantUtil.FILE_BASE_PATH + request.getParameter("fpath"));
cards.clear(); DCNL if (!cards.contains(card)) DCNL cards.add(card);
observedTopics.putIfAbsent( topic, observable );
}
riceballhappy = atlas.findRegion("riceballhappy");
import guru.springframework.sfgpetclinic.services.VetService; DCNL import org.springframework.ui.Model; DCNL private final VetService vetService; DCNL  DCNL public VetController(VetService vetService) { DCNL this.vetService = vetService; DCNL } DCNL  DCNL @RequestMapping({"/vets", "/vets/index", "vets/index.html"}) DCNL public String listVets(Model model) { DCNL model.addAttribute("vets", vetService.findAll());
Log.i(TAG, "No urgent data; not sending SMS");
if (progressBar != null) { DCNL progressBar.setVisibility(View.GONE); DCNL }
if (!matcher.find()) { DCNL LOG.warn("Could not match a SAN move in this string: {}", sanMove); DCNL return NOMOVE; DCNL };
public void declareProject(String projectName, File projectFile) { DCNL if (projectFile != null && projectFile.exists()) { DCNL createProjectPluginResource(projectName, projectFile.getParentFile().getAbsolutePath()); DCNL ConvertigoPlugin.logException(e, "Failed to declare the project from " + projectFile.getAbsolutePath());
Logger.printf(Logger.Level.INFO, "\nPROGEX (Program Graph Extractor)  [ v%s ]", VERSION);
Logger.info("Parsing all source files ... ");
Logger.info("Done.\n");
System.out.println("The project started");
.sorted((o1, o2) -> o2.getValue().compareTo(o1.getValue()))
Entry<Customer,Integer> entry= entrySet().stream() DCNL .min(Map.Entry.comparingByValue((o1, o2) -> o1.compareTo(o2))).get();
convertView.findViewById(R.id.wifi_list_item).setOnClickListener(new View.OnClickListener() {
if(params.getCurrencies()==null || params.getCurrencies().size()!=1){
fundingSourceInstitution.setPhase(this.getActualPhase());
private static final String FALSE_SYMBOL = " :heavy_multiplication_x:"; DCNL private static final String TRUE_SYMBOL = " :heavy_check_mark:";
private static String getSymbol(Boolean flag) {
EventModel eventModel = EventModel.builder() DCNL .chatId(chatId) DCNL .issueCreate(DEFAULT_VALUE) DCNL .issueDelete(DEFAULT_VALUE) DCNL .issueUpdate(DEFAULT_VALUE) DCNL .issueWorkLog(DEFAULT_VALUE) DCNL .commentCreate(DEFAULT_VALUE) DCNL .commentUpdate(DEFAULT_VALUE) DCNL .commentDelete(DEFAULT_VALUE) DCNL .sprintClose(DEFAULT_VALUE) DCNL .sprintCreate(DEFAULT_VALUE) DCNL .sprintDelete(DEFAULT_VALUE) DCNL .sprintStart(DEFAULT_VALUE) DCNL .sprintUpdate(DEFAULT_VALUE) DCNL .build();
} else if (Integer.parseInt(args[1]) > 54 || Integer.parseInt(args[1]) < 0) { DCNL int order = Integer.parseInt(args[1]);
new ItemBuilder(Material.INK_SACK, ChatColor.RED + ChatColor.BOLD.toString() + "Stop Spectating", 1, (short) 1, ChatColor.GRAY + "Right Click to stop spectating.").getItem(),
try (Scanner sc = new Scanner(file)){
import static org.wildfly.swarm.spi.api.Defaultable.integer; DCNL import static org.wildfly.swarm.spi.api.Defaultable.string; DCNL  DCNL import org.wildfly.swarm.config.modcluster.Proxy;
return proxy(new Proxy("modcluster") DCNL .advertiseSocket("modcluster") DCNL .advertise(true) DCNL .listener("default")); DCNL 
public final class HttpClientHandler<Q /*>>> extends @NonNull Object*/, DCNL P, C /*>>> extends @NonNull Object*/> extends HttpHandler<Q, P> {
public class HttpServerHandler<Q /*>>> extends @NonNull Object*/, DCNL P, C /*>>> extends @NonNull Object*/> extends HttpHandler<Q, P> {
if (numMachines > maxMachines && orderName.equals("original")) { DCNL maxMachines = numMachines;
writeToLatexFile(fileContents.toString(), outputDirStr + File.separator + fileName.toString(), false);
InternalLogger console = InternalLoggerFactory.getLogger(LoggerName.NAMESRV_CONSOLE_NAME); DCNL MixAll.printObjectProperties(console, namesrvConfig); DCNL MixAll.printObjectProperties(console, nettyServerConfig);
BibEntry b = new BibEntry(BibtexEntryTypes.getType(type).get());
if (pet != null && pet.getType() != type) return null;
if (this.target != null) { DCNL this.target.spawn(); DCNL startShooting(); DCNL }
InformationNotificationMessage inm = InformationNotificationMessage.obtain("会话已结束");
public @ResponseBody ResponseEntity<String> changeMap(@PathVariable("mapName") String mapName)
 DCNL return new ResponseEntity<>(mapName, HttpStatus.OK); DCNL String errorString = "Map cannot be changed as the map (\"" + mapName + "\") does not exist"; DCNL this.log.warn(errorString); DCNL return new ResponseEntity<>(errorString, HttpStatus.BAD_REQUEST);
for (WeightedNode endNode : endNodes)
final Integer size = ObjectUtils.defaultIfNull(pageSize, Integer.MAX_VALUE);
sleepUntil(startTimeNanos + TimeUnit.MILLISECONDS.toNanos(batchMs));
course.setAcademy(Academy.getAcademyByCode(urpCourseSpider.getAcademyId(uid)));
import com.future.office_inventory_system.model.*;
if (request.getItem().getIdItem() == item.getIdItem() && DCNL request.getRequestStatus() == RequestStatus.SENT) {
if (savedInstanceState == null) { DCNL mFragmentManager.beginTransaction().replace(R.id.fragment_container,MatchesFragment.newInstance(mViewModel.getCompetitionId(),mViewModel.getCompetitionName(),mViewModel.getMatchDay()),MatchesFragment.FRAGMENT_TAG).commit(); DCNL }
private int mActiveTab = -1;
import javax.validation.Valid; DCNL  DCNL import org.springframework.ui.Model; DCNL  DCNL import com.abdullah.PayrollManagementSystem.dao.Loan; DCNL public String requestForLoan(Model model) { DCNL model.addAttribute(new Loan());//add attribute into model DCNL @RequestMapping("/loanreq_process") DCNL public String requestForLoanProcess(Model model, @Valid Loan loan) { DCNL logger.info("Showing loan....."+loan); DCNL return "loanreq"; DCNL } DCNL 
import java.util.*; DCNL import chocan.*; DCNL  DCNL  DCNL public static int topMenu () { DCNL Scanner input = new Scanner(System.in); // Fix for input errors DCNL 
public static int mgrMainMenu () { DCNL Scanner input = new Scanner(System.in); // Fix for input errors
public static int pvdrMainMenu () { DCNL Scanner input = new Scanner(System.in); // Fix for input errors
public static int pvdrMgmtMenu () { DCNL Scanner input = new Scanner(System.in); // Fix for input errors
public static int mbrMgmtMenu () { DCNL Scanner input = new Scanner(System.in); // Fix for input errors
public static int svcMenu () { DCNL Scanner input = new Scanner(System.in); // Fix for input errors
public static int mgrReportsMenu () { DCNL Scanner input = new Scanner(System.in); // Fix for input errors
public static int pvdrReportsMenu () { DCNL Scanner input = new Scanner(System.in); // Fix for input errors
Toast.makeText(this, "Cannot go back.", Toast.LENGTH_LONG).show();
Toast.makeText(this, "Cannot go back.", Toast.LENGTH_SHORT).show();
System.out.println("The dealer currently has: " + dealerValue()); DCNL System.out.println(dealerHand.inDeck.get(0).cardName); DCNL System.out.println(dealerHand.inDeck.get(1).cardName); DCNL System.out.println("The dealer drew " + currentCard.cardName + ": " + dealerValue());
if (actualControllerName != null && !shouldHaveControllerName(entityClass)) {
}
String title, DCNL String url,
String title, DCNL String url, DCNL String author, DCNL Set<String> tagStringSet = parseTagsFromString( DCNL tags + "," + addTagStringByUrl(url));
if ((c >= '0' && c <= '9') || c == ' ') { DCNL 
String[] videoUrls = {"youtube.com", "vimeo.com", "youtu.be"}; DCNL String[] blogUrls = { DCNL "blogger.com", "blogs.helsinki.fi", DCNL "wordpress.org", "blogspot.com"}; DCNL String[] bookUrls = {".suomalainen.com"}; DCNL String[] scienceUrls = {"dl.acm.org", "ieeexplore.ieee.org"};
if(fieldPair.getKey().isMapField() && fieldPair.getValue() instanceof Collection){ DCNL JsonObject mapObject = new JsonObject(); DCNL @SuppressWarnings("unchecked") DCNL Collection<MapEntry<Object,Object>> entries = DCNL (Collection<MapEntry<Object, Object>>) fieldPair.getValue(); DCNL for(MapEntry<Object,Object> entry : entries){ DCNL String key = context.serialize(entry.getKey()).getAsString(); DCNL mapObject.add(key, context.serialize(entry.getValue())); DCNL } DCNL ret.add(name, mapObject); DCNL }else{ DCNL ret.add(name, context.serialize(fieldPair.getValue())); DCNL }
public static SudokuGrid solve(SudokuGrid sudokuGrid) throws CloneNotSupportedException
System.err.println("origin checksum: " + packet.calcChecksum()); DCNL packet.resetChecksum(); DCNL packet.serialize(); DCNL System.err.println("checksum: " + packet.calcChecksum());
public interface UnitOfWork{
if (md5 == null || !md5.equals(getMD5(seckillId))) {
"    bdocm:canonicalUnit \""+varUnit+"\" ; \n" +
Integer debut = 0; DCNL Integer fin = 0; DCNL if(langue !=""){
} DCNL else{ DCNL debut = Integer.parseInt(request.getParameter("debut")); DCNL fin = Integer.parseInt(request.getParameter("fin")); DCNL for (int i = debut;i<fin+1;i++){
Intent i = new Intent(Sejarah.this, RecipeDetail.class); DCNL i.putExtra("id_for_detail", ID[position]);
public static boolean Navidad_Activar = false;
suspect instanceof TimeToLive /*|| DCNL suspect instanceof Index*/) {       // I need to white-list Index type; but this breaks TestAdhocAlterTable.
if((opponent.getHealth()<player.getDamage())){
int itemIndex = rand.nextInt(itemMap.size() - 4); DCNL item = items.get(itemIndex + 4); // avoids empty and hands items
this.populateContent(lines);
continue;
Collections.sort(distanceList.get(q), (pair1, pair2) -> { DCNL if (pair1.getRight()  < pair2.getRight()) { DCNL return -1; DCNL } else if (pair1.getRight()  > pair2.getRight()) { DCNL return 1; DCNL } else { DCNL return 0;
} else if (dn.get(0).getRight().equals(minDistance)) { DCNL while ((dn.get(k).getRight().equals( DCNL distanceList.get(toRemove).get(k).getRight())) &&
return new CommandResult(MESSAGE_SUCCESS);
Class<?> temp = this.getClass();
a.setLeft(c.getRight());
if (o == null || !getClass().equals(Hibernate.getClass(o))) {
BaseRecyclerAdapter(final List<M> myDataset) { DCNL if (myDataset == null) { DCNL throw new NullPointerException(); DCNL }
final List<Group> groups; DCNL if (msg.getData().getBoolean(GroupDataRepository.SUCCESS, false)) { DCNL groups = (List<Group>) msg.getData() DCNL .getSerializable(GroupDataRepository.GROUP_LIST); DCNL } DCNL else { DCNL groups = new ArrayList<>(); DCNL } DCNL setupRecyclerView(getView(), R.id.recyclerView_fragment_tab_expenses);
import android.support.v4.app.NotificationCompat;
case "routing":
if (!saltbootInitrd.isPresent() || !saltbootInitrd.get()) {
private static Integer[] mThumbIds = {
public String getIngredientName(int id) { DCNL private void initializeConversionMap() {
if(socialDAO.isBlocked(other, user.getUserId())) {
for(int i = 0; i < heap.size(); i++) {
if(comparator.compare(y, heap.get(parent(elementIndex))) < 0) { DCNL if(comparator.compare(y, heap.get(parent(elementIndex))) > 0) {
E val = minimum(); DCNL delete(val);
ErrandBoy.println("--> Server sends to client " + getName() + ":");
String prefix = "<null-user>"; DCNL return "[" + prefix + "@"+ getClientName(clientSocket) + "]";
String[] arr = new String[listNames.size()]; DCNL arr = listNames.toArray(arr); DCNL return new WSMListUsersAll(arr);
holder.createTimeTv.setText(new SimpleDateFormat("yyyy-MM-dd").format(order.getCreatedAt()));
MapFragment mapFragment=MapFragment.newInstance(); DCNL getFragmentManager().beginTransaction().add(R.id.map,mapFragment).commit(); DCNL if(intent.getStringExtra(ServicesActivity.DETAILS_ACTION)!=null&&intent.getStringExtra(ServicesActivity.DETAILS_ACTION).equals(ServicesActivity.DETAILS_ACTION))
MapFragment mapFragment=MapFragment.newInstance(); DCNL getFragmentManager().beginTransaction().add(R.id.map,mapFragment).commit(); DCNL mapFragment.getMapAsync(this);
address.setText(p.get(getString(R.string.addressLine1)).toString());
MapFragment mapFragment=MapFragment.newInstance(); DCNL getFragmentManager().beginTransaction().add(R.id.map,mapFragment).commit(); DCNL serviceProvider.setLocation(new com.velocityappsdj.subserve.POJOS.LatLng(ll.getLatitude(),ll.getLongitude()));
if (path != null && path.getRaw() != null && path.getSecret() != null) { DCNL secretService.delete(path.getSecret()); DCNL LOGGER.debug("Secret deleted at path: {}", path); DCNL }
public void handleFromClientSyncContainerData(NBTTagCompound compound); DCNL public void handleFromServerSyncContainerData(NBTTagCompound compound);
minecraft.addScheduledTask(() -> synced.handleFromServerSyncContainerData(compound));
server.addScheduledTask(() -> synced.handleFromClientSyncContainerData(compound));
if (jsonResult instanceof JSONObject) { DCNL write(jsonResult.toString()); DCNL } else { DCNL write(gson.toJson(jsonResult)); DCNL }
else Files.write(Paths.get(file.getPath()), text.getBytes(StandardCharsets.UTF_8));
System.out.println("* 9) Back to game");
case "9":
public Color getColor(){ DCNL return new Color(r,g,b);
session.saveOrUpdate(dataGroup);
if (getGroups().isEmpty()){

textView.setLayoutParams(new TableLayout.LayoutParams(TableLayout.LayoutParams.WRAP_CONTENT, TableLayout.LayoutParams.WRAP_CONTENT)); DCNL textView2.setLayoutParams(new TableLayout.LayoutParams(TableLayout.LayoutParams.WRAP_CONTENT, TableLayout.LayoutParams.WRAP_CONTENT)); DCNL textView.setText(weekDay+" "+gc.get(Calendar.YEAR)+"-"+(gc.get(Calendar.MONTH)+1)+"-"+gc.get(Calendar.DAY_OF_MONTH));
this.body.applyForce(new Vector2(player.getLookingDir()*speed* GameInfo.PPM,0),body.getPosition(),true);
return edges == null || edges.isEmpty(); DCNL 
Note note = notebook.getNote(noteId); DCNL checkIfNoteIsNotNull(note); DCNL Paragraph paragraph = note.getParagraph(paragraphId); DCNL checkIfParagraphIsNotNull(paragraph); DCNL  DCNL if (notebookService.runParagraph(noteId, paragraphId, paragraph.getTitle(), DCNL paragraph.getText(), params, DCNL note = notebookService.getNote(noteId, getServiceContext(), new RestServiceCallback<>());
if (id == null) { DCNL id = HashUtils.doubleSha256(writer.toBytes()).reverse(); DCNL return id;
loadWayPoints(); DCNL  DCNL this.log.info("Changed current map to " + mapName); DCNL 
this.log.info("Loading waypoints for " + this.currentMap); DCNL this.wayPoints.put((long) 46, new WayPoint(46, (float) 2.26, (float) 0.18, (float) -0.04, (float) -0.99)); DCNL this.wayPoints.put((long) 47, new WayPoint(47, (float) 6.64, (float) 2.10, (float) 0.72, (float) 0.70)); DCNL this.wayPoints.put((long) 48, new WayPoint(48, (float) 2.26, (float) 4.28, (float) -0.99, (float) 0.30));
positionTrajectoryGenerator = new MultipleWaypointsPositionTrajectoryGenerator("bodyOffset", RigidBodyTaskspaceControlState.maxPointsInGenerator, allowMultipleFrames, centerFeetZUpFrame, registry); DCNL positionTrajectoryGenerator.registerNewTrajectoryFrame(worldFrame);
if(!checkDimensions(inputVectors[i], outputVectors[i])){ DCNL if(verifyVectors(inputVectors[i], outputVectors[i]))
map = new HashMap<>();
int maxRepeat = 0; DCNL for (int i = 0; i < s.length(); i++) { DCNL int next = i + 1 < s.length() ? map.get(s.charAt(i + 1)) : 0; DCNL if (currentNumber == next) { DCNL maxRepeat++; DCNL if (maxRepeat > 2) DCNL throw new IllegalArgumentException( DCNL String.format("Invalid input: %s", s)); DCNL } else { DCNL if (currentNumber > next) DCNL convertedNumber += currentNumber; DCNL else { DCNL convertedNumber -= currentNumber; DCNL if (maxRepeat > 0) { DCNL throw new IllegalArgumentException( DCNL String.format("Invalid subtractive sequence: %s", s)); DCNL } DCNL } DCNL  DCNL maxRepeat = 0; DCNL }
try { DCNL output.append(makeBinaryValue(insn.getR1().getRegisterNumber(), 5, 0)); DCNL used.append("reg1 "); DCNL } catch(NullPointerException e) { DCNL if(insn.getOpcode().getName().equals("swc1") || DCNL insn.getOpcode().getName().equals("sdc1") || DCNL insn.getOpcode().getName().equals("s.d") || DCNL insn.getOpcode().getName().equals("l.d") || DCNL insn.getOpcode().getName().equals("s.s") || DCNL insn.getOpcode().getName().equals("l.s") || DCNL insn.getOpcode().getName().equals("lwc1") || DCNL insn.getOpcode().getName().equals("ldc1")) { DCNL output.append("00000"); DCNL } DCNL }
prog.getOutput().print(prog.getFPRegFile().read(FPRegister.f12)); DCNL prog.getOutput().print(prog.getFPRegFile().readDouble(FPRegister.f12));
for(int i = 0 ; i < plan2.size() - 1 ; i++) {
import android.widget.Button; DCNL import android.widget.EditText; DCNL import android.widget.TextView; DCNL import android.widget.Toast;
private static final String SCHEDULE_ITEM = "schedule_item";
args.putParcelable(ScheduleEditFragment.SCHEDULE_ITEM, item);
ScheduledItem item = bundle.getParcelable(SCHEDULE_ITEM);
builder.setTitle("Update Error"); DCNL builder.setMessage("All field must fill in");
if (!pSearchResults.contains(p)){ DCNL pSearchResults.add(p); DCNL }
if (!pSearchResults.contains(p)){ DCNL pSearchResults.add(p); DCNL }
if (!pSearchResults.contains(p)){ DCNL pSearchResults.add(p); DCNL }
public static final String SECURITY_KEY = "ACE_API_KEY_SHRWE_AOOP";
public static final String BASE_PAY_URL = "https://api.asiaweiluy.com/web/"; // 14 测试 16开发
public static final String PAY_URL = "https://api.asiaweiluy.com/gateway.php?method=ace.trade.pay";
String html = "<!DOCTYPE><html><head><title>ACE API</title><meta charset=\"UTF-8\"/></head><body><form action=\"https://api.asiaweiluy.com/gateway.php?method=ace.trade.pay\" method=\"post\" id=\"awl_post\" target=\"_self\"><input type=\"hidden\" name=\"partner\" value=\"" + CommonParams.PARTNER + "\"/><input type=\"hidden\" name=\"trade_id\" value=\"" + tradeId + "\"/><input type=\"hidden\" name=\"call_time\" value=\"" + callTime + "\"/><input type=\"hidden\" name=\"security\" value=\"" + security.toLowerCase() + "\"/></form></body><script>window.onload=function(){document.getElementById(\"awl_post\").submit();}</script></html>\n";
 DCNL if (fromType==1) DCNL { DCNL UserManager.getInstance().checkSmsCode(countryCode+phoneNumber, CommonParams.BUSS_REGISTER_TYPE, code); DCNL } DCNL else DCNL { DCNL UserManager.getInstance().checkSmsCode(countryCode+phoneNumber, CommonParams.BUSS_RESET_TYPE, code); DCNL }
if (fromType==1) DCNL { DCNL UserManager.getInstance().sendSmsToCheck(countryCode + phoneNumber, CommonParams.BUSS_REGISTER_TYPE); DCNL } DCNL else DCNL { DCNL UserManager.getInstance().sendSmsToCheck(countryCode + phoneNumber, CommonParams.BUSS_RESET_TYPE); DCNL }

initParams.put("XFrameOptions", header.getXframeOptions()); DCNL initParams.put("XSSProtection", header.getXssOptions()); DCNL 
dictionaryName = CsvUtil.getInstance().unmarshall(dictionaryBytes).getDictionary().getName();
doubleLine.setClickable(false);
PendingIntent cancelPendingIntent = PendingIntent.getBroadcast(context, _id, cancelIntent, PendingIntent.FLAG_UPDATE_CURRENT);
return StringUtils.capitalize(getKeyword());
return list.stream() DCNL .filter(kw->String.valueOf(mc.getText()).toLowerCase().contains(kw.getKeyword().toLowerCase())) DCNL .collect(Collectors.toSet());
private CompetitionClassDTOMapper() {
final Long createdByUserId, final OffsetDateTime lastModifiedUtc, final Long lastModifiedByUserId, final Long version) {
private static final BusinessEntityConfiguration<CompetitionClassBE> COMPETITIONCLASS = new BusinessEntityConfiguration<>(
return new CompetitionClassDO(klasseId,klasseName,klasseAlterMin,klasseAlterMax,klasseNr,createdAtUtc,createdByUserId,lastModifiedUtc, lastModifiedUserId, version);
return (ItemRemained != 0);
public static final String MESSAGE_DATE_CONSTRAINTS = "Date format should be in DD-MM-YYYY and be valid dates.\n";
String messagePrefix = "tag '"+matcher.group(1)+"' ";
messages.add(new MolgenisReaderMessage(line, "tag '"+matcher.group(1)+"' is unknown"));
model.addAttribute("msg", "No user found with username: " + friendUserName);
if(!isUser1) {
return className0(obj); DCNL } DCNL  DCNL public boolean instanceOf(String class_name) { DCNL return instanceOf0(obj, class_name); DCNL public Object callMethod(String name) throws Throwable { DCNL public Object callMethod(String name, Object... args) throws Throwable { DCNL public Object getMemberValue(String name) throws Throwable {
private long releasePointer() { DCNL private native String className0(long obj); DCNL private native boolean instanceOf0(long obj, String class_name);
public static ColorMode colorMode = ColorMode.EXTENDED; DCNL public static final String SHELL = "root@%s~# ";
return showShell ? String.format(RESET + SHELL, EventHandler.connectedIP) : "";
private String checkForDublicateDb="";
while(rs.next()){checkForDublicateDb = rs.getString(1);}
private String checkForDublicateDb="";
public static final String MESSAGE_USAGE = COMMAND_APPROVE DCNL + ": Approve of the leave identified " DCNL + "\n" + COMMAND_REJECT + ": Reject of the leave identified " DCNL + "by the index number used in the displayed leave list.\n" DCNL + "[" + COMMAND_APPROVE + " INDEX] " +"or [" + COMMAND_REJECT + " INDEX]" DCNL + "\nExample: " + COMMAND_APPROVE + " 1 , " + COMMAND_REJECT + " 1";
List<String> names = DishItemActivity.reviewerNames;
sharedPrefs = SharedPreferenceHandler.getSharedPrefsCurrentUserSettings(this);
} catch (Exception e) {
public Optional<String> findLicenceNumberByFacilityId(String facilityId) {
return scope.getExternalId();
return scope.getExternalId();
return Json.value(object.toString());
return -flushedCount;
controllers.add(new SdkFlexPreferenceController(context));
response.sendRedirect(request.getContextPath()+"/app/user.jsp");
 DCNL if(u.getLastPlayedBet() == null) s.setNull(3, java.sql.Types.INTEGER); DCNL else s.setInt(3, u.getLastPlayedBet().getID());
databaseManager.setupDatabase(); DCNL System.out.println("Database functionality hsa been disabled, continuing with the creation of server.");
int maxQuality = 50; DCNL } else if (this.quality <= maxQuality) {
if (this.quality >= maxQuality) { DCNL this.quality =  maxQuality; DCNL }
for (Carte carte:cartes) DCNL if (carte.getNom().equals("Ours")) DCNL pointDeGloire += 3;
for (Carte carte:cartes) DCNL if (carte.getNom().equals("Ours")) DCNL pointDeGloire += 3;
setupConfig(); DCNL ConfigManager cm = new ConfigManager();
return; DCNL } else { DCNL return;
package me.hype.factory.managers; DCNL  DCNL import java.util.ArrayList; DCNL import java.util.List; DCNL  DCNL import org.bukkit.Bukkit; DCNL import org.bukkit.ChatColor; DCNL import org.bukkit.Difficulty; DCNL import org.bukkit.Location; DCNL import org.bukkit.Material; DCNL import org.bukkit.World; DCNL import org.bukkit.WorldCreator; DCNL import org.bukkit.WorldType; DCNL import org.bukkit.entity.Player; DCNL  DCNL import me.hype.factory.Core; DCNL  DCNL public class ConfigManager { DCNL  DCNL private static ConfigManager configmanager; DCNL Core plugin = Core.getInstance(); DCNL String prefix = Core.getInstance().getConfig().getString("Settings.prefix"); DCNL ArmorstandManager asm = null; DCNL ScoreboardManager sbm = null; DCNL  DCNL @SuppressWarnings("deprecation") DCNL public void createStartingFactoryWorld(Player p) { DCNL if (asm == null || sbm == null) {sbm = new ScoreboardManager(); asm = new ArmorstandManager();} DCNL WorldCreator wc = new WorldCreator(p.getName()+"1"); DCNL wc.type(WorldType.FLAT); DCNL wc.generatorSettings("2;0;1;"); DCNL wc.createWorld(); DCNL World w = Bukkit.getWorld(p.getName()+"1"); DCNL w.setDifficulty(Difficulty.PEACEFUL); DCNL w.setGameRuleValue("doWeatherCycle", "false"); DCNL w.setGameRuleValue("doDaylightCycle", "false"); DCNL w.setGameRuleValue("doMobSpawning", "false"); DCNL int y = 40; DCNL Location corner1 = new Location(w,-6,y,6); DCNL Location corner2 = new Location(w,58,y,-58); DCNL int minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL int maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL int minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL int maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.COAL_BLOCK); DCNL } DCNL } DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&aFactory slots complete!")); DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&6Starting first slot...")); DCNL corner1 = new Location(w,6,y,-6); DCNL corner2 = new Location(w,-6,y,6); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.SMOOTH_BRICK); DCNL } DCNL } DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&aFirst slot complete!")); DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&6Starting factory border...")); DCNL corner1 = new Location(w,-7,40,-59); DCNL corner2 = new Location(w,-7,40,7); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.WOOL); DCNL bloc.getBlock().setData((byte)14); DCNL } DCNL } DCNL corner2 = new Location(w,59,40,-59); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.WOOL); DCNL bloc.getBlock().setData((byte)14); DCNL } DCNL } DCNL corner1 = new Location(w,59,40,7); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.WOOL); DCNL bloc.getBlock().setData((byte)14); DCNL } DCNL } DCNL corner2 = new Location(w,-7,40,7); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.WOOL); DCNL bloc.getBlock().setData((byte)14); DCNL } DCNL } DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&aFactory slots complete!")); DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&6Teleporting player...")); DCNL addPlayerStarting(p,w); DCNL asm.createFactorySlotNumberArmorStands(w, 1); DCNL asm.createFactorySlotCostArmorStands(w, 1); DCNL asm.createFactorySlotInformationStands(w, 1); DCNL addFactoryWorld(w.getName()); DCNL sbm.factoryScoreboard(p, 1); DCNL p.sendMessage(format(prefix+"&aFactory Creation Complete! Teleporting...")); DCNL w.getBlockAt(new Location(w,0,0,0)).setType(Material.AIR); DCNL p.teleport(new Location(w,0,42,0)); DCNL return; DCNL } DCNL @SuppressWarnings("deprecation") DCNL public void createFactoryWorld(Player p,int facid) { DCNL if (asm == null || sbm == null) {sbm = new ScoreboardManager(); asm = new ArmorstandManager();} DCNL WorldCreator wc = new WorldCreator(p.getName()+facid); DCNL wc.type(WorldType.FLAT); DCNL wc.generatorSettings("2;0;1;"); DCNL wc.createWorld(); DCNL World w = Bukkit.getWorld(p.getName()+facid); DCNL w.setDifficulty(Difficulty.PEACEFUL); DCNL w.setGameRuleValue("doWeatherCycle", "false"); DCNL w.setGameRuleValue("doDaylightCycle", "false"); DCNL w.setGameRuleValue("doMobSpawning", "false"); DCNL int y = 40; DCNL Location corner1 = new Location(w,-6,y,6); DCNL Location corner2 = new Location(w,58,y,-58); DCNL int minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL int maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL int minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL int maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.COAL_BLOCK); DCNL } DCNL } DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&aFactory slots complete!")); DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&6Starting first slot...")); DCNL corner1 = new Location(w,6,y,-6); DCNL corner2 = new Location(w,-6,y,6); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.SMOOTH_BRICK); DCNL } DCNL } DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&aFirst slot complete!")); DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&6Starting factory border...")); DCNL corner1 = new Location(w,-7,40,-59); DCNL corner2 = new Location(w,-7,40,7); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.WOOL); DCNL bloc.getBlock().setData((byte)14); DCNL } DCNL } DCNL corner2 = new Location(w,59,40,-59); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.WOOL); DCNL bloc.getBlock().setData((byte)14); DCNL } DCNL } DCNL corner1 = new Location(w,59,40,7); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.WOOL); DCNL bloc.getBlock().setData((byte)14); DCNL } DCNL } DCNL corner2 = new Location(w,-7,40,7); DCNL minx = (corner1.getBlockX() < corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL maxx = (corner1.getBlockX() > corner2.getBlockX() ? corner2.getBlockX() : corner1.getBlockX()); DCNL minz = (corner1.getBlockZ() < corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL maxz = (corner1.getBlockZ() > corner2.getBlockZ() ? corner2.getBlockZ() : corner1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,y,z); DCNL bloc.getBlock().setType(Material.WOOL); DCNL bloc.getBlock().setData((byte)14); DCNL } DCNL } DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&aFactory slots complete!")); DCNL Bukkit.getConsoleSender().sendMessage(format(prefix+"&6Teleporting player...")); DCNL addPlayerFactory(p,facid,w); DCNL asm.createFactorySlotNumberArmorStands(w, facid); DCNL asm.createFactorySlotCostArmorStands(w, facid); DCNL asm.createFactorySlotInformationStands(w, facid); DCNL sbm.factoryScoreboard(p, facid); DCNL addFactoryWorld(w.getName()); DCNL p.sendMessage(format(prefix+"&aFactory Creation Complete! Teleporting...")); DCNL w.getBlockAt(new Location(w,0,0,0)).setType(Material.AIR); DCNL p.teleport(new Location(w,0,42,0)); DCNL return; DCNL } DCNL public String format(String s) { DCNL return ChatColor.translateAlternateColorCodes('&', s); DCNL } DCNL public void addPlayer(Player p) { DCNL String uuid = p.getUniqueId().toString(); DCNL plugin.getPlayersConfig().set("Players."+uuid+".info.uuid", uuid); DCNL plugin.getPlayersConfig().set("Players."+uuid+".info.name", p.getName()); DCNL plugin.getPlayersConfig().set("Players."+uuid+".stats.money", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".stats.moneyspent", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".stats.moneyearned", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories", ""); DCNL plugin.saveConfigToFile(plugin.playersFile, plugin.playersConfig); DCNL return; DCNL } DCNL public List<String> getPlayerStats(Player p) { DCNL String uuid = p.getUniqueId().toString(); DCNL List<String> list = new ArrayList<String>(); DCNL list.add(String.valueOf(getPlayerMoney(uuid))); DCNL list.add(String.valueOf(getPlayerMoneySpent(uuid))); DCNL list.add(String.valueOf(getPlayerMoneyEarned(uuid))); DCNL list.add(String.valueOf(getPlayerFactoriesOwned(uuid))); DCNL list.add(String.valueOf(getPlayerName(uuid))); DCNL return list; DCNL } DCNL public int getPlayerMoney(String uuid) { DCNL return plugin.getPlayersConfig().getInt("Players."+uuid+".stats.money"); DCNL } DCNL public int getPlayerMoneySpent(String uuid) { DCNL return plugin.getPlayersConfig().getInt("Players."+uuid+".stats.moneyspent"); DCNL } DCNL public int getPlayerMoneyEarned(String uuid) { DCNL return plugin.getPlayersConfig().getInt("Players."+uuid+".stats.moneyearned"); DCNL } DCNL public int getPlayerFactoriesOwned(String uuid) { DCNL return plugin.getPlayersConfig().getConfigurationSection("Players."+uuid+".factories").getKeys(false).size(); DCNL } DCNL public String getPlayerName(String uuid) { DCNL return plugin.getPlayersConfig().getString("Players."+uuid+".info.name"); DCNL } DCNL public int totalFactoriesOwned(Player p) { DCNL if (!isFactoryOwned(p,1)) { DCNL return 0; DCNL } DCNL return plugin.getPlayersConfig().getConfigurationSection("Players."+p.getUniqueId().toString()+".factories").getKeys(false).size(); DCNL } DCNL public int totalFactoriesMPS(Player p) { DCNL String uuid = p.getUniqueId().toString(); DCNL List<Integer> mpspf = new ArrayList<Integer>(); DCNL if (!isFactoryOwned(p,1)) { DCNL return 0; DCNL } DCNL for (String id : plugin.getPlayersConfig().getConfigurationSection("Players."+uuid+".factories").getKeys(false)) { DCNL int mps = plugin.getPlayersConfig().getInt("Players."+uuid+".factories."+id+".money-per-sec"); DCNL mpspf.add(mps); DCNL } DCNL return addIntList(mpspf); DCNL } DCNL public void tpToFactoryHome(Player p, int facid) { DCNL if (sbm == null) {sbm = new ScoreboardManager();} DCNL sbm.factoryScoreboard(p, facid); DCNL Location loc = new Location(Bukkit.getWorld(p.getName()+facid),0,42,0); DCNL p.teleport(loc); DCNL return; DCNL } DCNL public String alreadyBoughtS(Player p, int facid) { DCNL String uuid = p.getUniqueId().toString(); DCNL if (!doesPlayerExist(p)) { DCNL return "&c&l✘"; DCNL } DCNL if (plugin.getPlayersConfig().getString("Players."+uuid+".factories."+facid) != null) { DCNL return "&a&l✔"; DCNL } else { DCNL return "&c&l✘"; DCNL } DCNL } DCNL public boolean alreadyBoughtB(Player p, int facid) { DCNL String uuid = p.getUniqueId().toString(); DCNL if (!doesPlayerExist(p)) { DCNL return false; DCNL } DCNL if (plugin.getPlayersConfig().getString("Players."+uuid+".factories."+facid) != null) { DCNL return true; DCNL } else { DCNL return false; DCNL } DCNL } DCNL public void addPlayerStarting(Player p, World w) { DCNL String uuid = p.getUniqueId().toString(); DCNL if (doesPlayerExist(p)) { DCNL if (isFactoryOwned(p,1)) { DCNL return; DCNL } else { DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories.1.slots-owned", new ArrayList<Integer>().add(0)); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories.1.money-per-sec", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories.1.money-earned", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories.1.money-spent", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories.1.worldname", w.getName()); DCNL plugin.saveConfigToFile(plugin.playersFile,plugin.playersConfig); DCNL return; DCNL } DCNL } else { DCNL p.sendMessage(format(prefix+"&cThere seems to be a problem loading in your profile. Contact a staff member.")); DCNL return; DCNL } DCNL  DCNL } DCNL public void addPlayerFactory(Player p, int facid, World w) { DCNL String uuid = p.getUniqueId().toString(); DCNL if (!doesPlayerExist(p)) { DCNL p.sendMessage(format(prefix+"&cThere seems to be a problem loading in your profile. Contact a staff member.")); DCNL return; DCNL } DCNL if (isFactoryOwned(p,facid)) { DCNL p.sendMessage(format(prefix+"&cYou seem to already own this factory. If this is an error, contact a staff member.")); DCNL return; DCNL } DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories."+facid+".slots-owned", new ArrayList<Integer>().add(0)); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories."+facid+".money-per-sec", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories."+facid+".money-earned", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories."+facid+".money-spent", 0); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories."+facid+".worldname", w.getName()); DCNL plugin.saveConfigToFile(plugin.playersFile,plugin.playersConfig); DCNL return; DCNL } DCNL public void addSlotsOwned(Player p,int facid, int slotid) { DCNL String uuid = p.getUniqueId().toString(); DCNL List<Integer> slotsowned = getPlayerSlotsOwned(p,facid); DCNL slotsowned.add(slotid); DCNL plugin.getPlayersConfig().set("Players."+uuid+".factories."+facid+".slots-owned", slotsowned); DCNL plugin.saveConfigToFile(plugin.playersFile, plugin.playersConfig); DCNL return; DCNL } DCNL @SuppressWarnings("deprecation") DCNL public List<Integer> getPlayerSlotsOwned(String index) { DCNL String uuid = Bukkit.getPlayer(getNameFromString(index)).getUniqueId().toString(); DCNL int facid = getIdFromString(index); DCNL List<Integer> slotsowned = plugin.getPlayersConfig().getIntegerList("Players."+uuid+".factories."+String.valueOf(facid)+".slots-owned"); DCNL return slotsowned; DCNL } DCNL public List<Integer> getPlayerSlotsOwned(Player p,int facid) { DCNL List<Integer> slotsowned = plugin.getPlayersConfig().getIntegerList("Players."+p.getUniqueId().toString()+".factories."+String.valueOf(facid)+".slots-owned"); DCNL return slotsowned; DCNL } DCNL public int getFactoryCost(int facid) { DCNL return plugin.getFactoryConfig().getInt("FactorySettings.factorycost."+facid+".cost"); DCNL } DCNL public void addFactoryWorld(String worldname) { DCNL List<String> worlds = plugin.getFactoryConfig().getStringList("FactorySettings.factoryworlds"); DCNL worlds.add(worldname); DCNL plugin.getFactoryConfig().set("FactorySettings.factoryworlds", worlds); DCNL plugin.saveConfigToFile(plugin.factoryFile, plugin.factoryConfig); DCNL return; DCNL } DCNL public List<String> getFactoryWorlds() { DCNL return plugin.getFactoryConfig().getStringList("FactorySettings.factoryworlds"); DCNL } DCNL public void checkIfWorldsAreAdded() { DCNL List<String> uuids = getPlayerUUIDS(); DCNL List<String> worlds = getFactoryWorlds(); DCNL for (int i = 0;i<uuids.size();i++) { DCNL if (i > uuids.size()) {break;} DCNL String uuid = uuids.get(i); DCNL if (plugin.getPlayersConfig().getString("Players."+uuid+".factories.1") == null) {continue;} DCNL for (String facid : plugin.getPlayersConfig().getConfigurationSection("Players."+uuid+".factories").getKeys(false)) { DCNL String worldname = plugin.getPlayersConfig().getString("Players."+uuid+".factories."+facid+".worldname"); DCNL if (worlds.contains(worldname)) { DCNL continue; DCNL } DCNL addFactoryWorld(worldname); DCNL } DCNL } DCNL return; DCNL } DCNL public boolean isSlotOwned(Player p, int facid, int slotid) { DCNL World w = p.getWorld(); DCNL int x = plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".locationc.x"); DCNL int y = plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".locationc.y"); DCNL int z = plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".locationc.z"); DCNL Location l = new Location(w,x,y,z); DCNL if (l.getBlock().getType() == Material.COAL_BLOCK) { DCNL return false; DCNL } else { DCNL return true; DCNL } DCNL } DCNL public void addBoughtSlot(Player p,int facid, int slotid) { DCNL if (asm == null) {asm = new ArmorstandManager();} DCNL if (sbm == null) {sbm = new ScoreboardManager();} DCNL if (!getFactoryWorlds().contains(p.getWorld().getName())) {p.sendMessage(format(prefix+"&cYou are not in a factory world."));} DCNL int x = plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".locationc.x"); DCNL int z = plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".locationc.z"); DCNL Location lsn = new Location(p.getWorld(),x,42,z); DCNL asm.despawnArmorStand(lsn, 5); DCNL setSlotMaterial(p.getWorld(),facid,slotid,Material.SMOOTH_BRICK); DCNL addSlotsOwned(p,facid,1); DCNL sbm.factoryScoreboard(p, facid); DCNL p.sendMessage(format(prefix+"&aSlot updated.")); DCNL return; DCNL } DCNL public void setSlotMaterial(World w,int facid, int slotid, Material mat) { DCNL Location c1 = new Location(w, DCNL plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".location1.x"), DCNL plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".location1.y"), DCNL plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".location1.z")); DCNL Location c2 = new Location(w, DCNL plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".location2.x"), DCNL plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".location2.y"), DCNL plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".location2.z")); DCNL int minx = (c1.getBlockX() < c2.getBlockX() ? c2.getBlockX() : c1.getBlockX()); DCNL int maxx = (c1.getBlockX() > c2.getBlockX() ? c2.getBlockX() : c1.getBlockX()); DCNL int minz = (c1.getBlockZ() < c2.getBlockZ() ? c2.getBlockZ() : c1.getBlockZ()); DCNL int maxz = (c1.getBlockZ() > c2.getBlockZ() ? c2.getBlockZ() : c1.getBlockZ()); DCNL for (int x = maxx;x <= minx;x++) { DCNL for (int z = maxz;z <= minz;z++) { DCNL Location bloc = new Location(w,x,c1.getBlockY(),z); DCNL bloc.getBlock().setType(mat); DCNL } DCNL } DCNL return; DCNL } DCNL public int getSlotCost(String facname, int slotid) { DCNL int facid = getIdFromString(facname); DCNL return plugin.getFactoryConfig().getInt("FactorySettings.factoryslots.factorys."+facid+".slots.slot"+slotid+".cost"); DCNL } DCNL public List<String> getPlayerUUIDS() { DCNL List<String> uuids = new ArrayList<String>(); DCNL for (String uuid : plugin.getPlayersConfig().getConfigurationSection("Players").getKeys(false)) { DCNL uuids.add(uuid); DCNL } DCNL return uuids; DCNL } DCNL public boolean doesPlayerExist(Player p) { DCNL String uuid = p.getUniqueId().toString(); DCNL if (plugin.getPlayersConfig().getString("Players."+uuid) != null) { DCNL return true; DCNL } else { DCNL return false; DCNL } DCNL } DCNL public boolean isFactoryOwned(Player p, int facid) { DCNL String uuid = p.getUniqueId().toString(); DCNL if (plugin.getPlayersConfig().getConfigurationSection("Players."+uuid+".factories") == null) { DCNL return false; DCNL } DCNL for(String key : plugin.getPlayersConfig().getConfigurationSection("Players."+uuid+".factories").getKeys(false)) { DCNL int i = Integer.parseInt(key); DCNL if (i == facid) { DCNL return true; DCNL } else { DCNL continue; DCNL } DCNL } DCNL return false; DCNL } DCNL public int addIntList(List<Integer> list) { DCNL int var = 0; DCNL for (int i = 0;i<list.size();i++) { DCNL if (i > list.size()) {break;} DCNL var += list.get(i); DCNL } DCNL return var; DCNL } DCNL public int getIdFromString(String s) { DCNL return Integer.parseInt(String.valueOf(s.toCharArray()[s.toCharArray().length-1])); DCNL } DCNL public String getNameFromString(String s) { DCNL char[] chars = s.toCharArray(); DCNL int need = (chars.length-1); // 1-9 BucketDev DCNL StringBuilder sb = new StringBuilder(); DCNL for (int i = 0;i<need;i++) { DCNL if (i>=need) {break;} DCNL char c = chars[i]; // 0-8 BucketDev DCNL sb.append(c); DCNL } DCNL return sb.toString(); DCNL } DCNL public static ConfigManager getInstance() { DCNL return configmanager; DCNL } DCNL  DCNL  DCNL }
System.out.println("Account Activity: ");
if (writer.isMessageTooLarge(message)) DCNL { DCNL logger.warn("attempted to append a message > AWS batch size; ignored"); DCNL return; DCNL } DCNL 
import java.util.*;
boolean hasCustom=false;//是否存在自定义 DCNL boolean hasCusBg, hasCusBorder=false, hasCusCorner=false;//存在自定义相关属性 DCNL hasCusBg = false; DCNL hasCusBg = true; DCNL } DCNL  DCNL if (mBorderDashWidth != 0 || mBorderDashGap != 0 || mBorderWidthNormal != 0 || mBorderWidthPressed != 0 || mBorderWidthUnable != 0 DCNL || mBorderColorNormal != 0 || mBorderColorPressed != 0 || mBorderColorUnable != 0) { DCNL hasCusBorder = true; DCNL } DCNL  DCNL if (mCornerRadius != 0 || mCornerRadiusTopLeft != 0 || mCornerRadiusTopRight != 0 || mCornerRadiusBottomLeft != 0 || mCornerRadiusBottomRight != 0) { DCNL hasCusCorner = true; DCNL } DCNL  DCNL if (hasCusBg || hasCusCorner || hasCusBorder) { DCNL 
Button backButton; DCNL Button searchButton; DCNL Button mapButton;
protected void handleLoginAction(ActionEvent event) { DCNL viewcontroller.addScreen("Menu", FXMLLoader.load(getClass().getResource( "/fxml/MenuView.fxml" ))); DCNL viewcontroller.activate("Menu");
openSbuject((int)currentTeacher.getId(),createSubject(name,40,time,date,des));
public static void openSbuject(int id_tea,int id_sub){
import bisq.monitor.metric.TorRoundtripTime;
metrics.add(new TorRoundtripTime());
this.interrupt(); DCNL 
if(lights[i][j].getCurrentState() != 0) {
if (ans.getCurrentState() == 0)
state1 = new ImageView(new Image(ClassLoader.getSystemResource("back_light.png").toString())); DCNL state0 = new ImageView(new Image(ClassLoader.getSystemResource("classic/"+level+"/"+text+".png").toString()));
this.currentState = 0; DCNL setGraphic(state0);
if (board.getLight(i, j).getCurrentState() != 0)
if(!profile.getOneProfile(out, userID).getUserIsTeacher()){ DCNL printProgressbarForm(out, userID); DCNL } DCNL 
File configFile = new File(SherlockEngine.configDir.getAbsolutePath() + File.separator + "Sherlock.yaml");
this.dbFactory = Persistence.createEntityManagerFactory("objectdb:" + SherlockEngine.configuration.getData_Path() + File.separator + "Sherlock.odb", properties);
if (tfod != null) { DCNL tfod.shutdown(); DCNL }
transaction.replace(R.id.content, getFragment(fragment)); DCNL transaction.addToBackStack(null); DCNL transaction.commit();
Window.eventWindow.setText("calculated set nr " + ctr);
if (!minimalDistanceFound[target]) {
final List<OElement> records = new ArrayList<OElement>(); DCNL  DCNL if(r instanceof OResult) { DCNL  DCNL OResult result = (OResult) r; DCNL records.add(result.toElement()); DCNL  DCNL for (String fieldName : result.getPropertyNames()) { DCNL colNames.add(fieldName); DCNL } DCNL  DCNL }else if (r != null && r instanceof OIdentifiable) {
for (OElement doc : records) { DCNL Object value = doc.getProperty(orderedColumns.get(col));
if(openContainerException.getCode() == DigiDocException.ERR_PARSE_XML) { DCNL if (openContainerException.getMessage() != null DCNL && openContainerException.getMessage().contains("Invalid xml file")){ DCNL exception = new DigiDocException(DigiDocException.ERR_PARSE_XML, DCNL "Invalid input file format.", openContainerException.getNestedException()); DCNL } else{ DCNL exception = openContainerException; DCNL }
GetFlowsForLinkRequest data = null; DCNL try { DCNL data = new GetFlowsForLinkRequest(new NetworkEndpoint(srcSwitch, srcPort), DCNL new NetworkEndpoint(dstSwitch, dstPort), correlationId); DCNL } catch (IllegalArgumentException e) { DCNL logger.error("Can not parse arguments: {}", e.getMessage()); DCNL throw new MessageException(correlationId, System.currentTimeMillis(), ErrorType.DATA_INVALID, DCNL e.getMessage(), "Can not parse arguments when create \"get flows for link\" request"); DCNL }
List<String> findAllJSONFiles = new ArrayList<>(); DCNL findAllJSONFiles.add("/Volumes/Duo1/github/billmeyer/saucedemo-java-cucumber/target/cucumber-report/cucumber.json");
if ( parts.length == 3 || (parts.length == 5 && DCNL } else { DCNL throw new DMLRuntimeException("Error parsing the instruction: " + str);
if ( parts.length == 3 || (parts.length == 5 && DCNL UtilFunctions.isIntegerNumber(parts[3])) ) { DCNL } else { DCNL throw new DMLRuntimeException("Error parsing the instruction: " + str);
.addProperty(DCTerms.description, String.format("Datakatalog for %s", organisationName), lang) DCNL .addProperty(DCTerms.publisher, model.createResource(Utilities.getOrganisationResourceURI(organisationNumber)));
.addProperty(DCTerms.identifier, Utilities.getDatasetResourceURI(organisationNumber, identifier))
 DCNL  DCNL if ( (DMSPreferencesManager.getString(DMSPreferencesManager.DMS_PREFERENCES_KEY.DOC_NAME, mContext)).toLowerCase().contains("dr.")) { DCNL doctorNameToDisplay = "DR. " + DMSPreferencesManager.getString(DMSPreferencesManager.DMS_PREFERENCES_KEY.DOC_NAME, mContext);
public void setType(int type) { DCNL put("type", type);
private boolean isModelGenerated = false; DCNL private boolean hasChoices = false;
if(!hasChoices)
if(!isModelGenerated)
car.velocity = PVector.mult(car.lane.directionVector, car.lane.speedLimit);
this.speedLimit = Physics.calcSpeed(55.0f);
if (lastCar != null && Time.current() < lastCar.timeOut) DCNL while (newCar.timeOut <= lastCar.timeOut - 1000) {
@RequestMapping({ "/vets", "/vets/index", "/vets/index.html", "/vets.html" })
defaultScore = config.getDefaultScore();
if (VERBOSE) log.info("Reading %d feature keys...%n", sizeAssoc);
log.info("Number of features of kind " + k + ' ' + (k < extractors.size() ? extractors.get(k): extractorsRare.get(k - extractors.size())) +": " + numFA[k]);
private void dumpModel(PrintStream out) {
if (approx == null) { DCNL return getLang().equals("english") ? 1.0 : 0.0; DCNL } else if ("false".equalsIgnoreCase(approx)) {
return string.matches("\\d{0,18}[smhdwMy]"); DCNL if (string.matches("\\d{0,18}[s]")) { DCNL if (string.matches("\\d{0,18}[m]")) { DCNL if (string.matches("\\d{0,18}[h]")) { DCNL if (string.matches("\\d{0,18}[d]")) { DCNL if (string.matches("\\d{0,18}[w]")) { DCNL if (string.matches("\\d{0,18}[M]")) { DCNL if (string.matches("\\d{0,18}[y]")) {
final String toSplit = text;
package src.graphixBackend;
package src.graphixBackend;
int read = -1;
tt.setIface(Fs.unify(frameInterface, tt.getIface(), env, DCNL situation.getTypeHierarchy()));
List<Mean> updated = new ArrayList<>(); DCNL for(MeanDtoLazy meanDtoLazy : meanDtoLazyList) { DCNL updated.add(updateMean(meanDtoLazy)); DCNL } DCNL for(Mean mean : updated) { DCNL result.add(meansDtoMapper.mapToDto(mean)); DCNL 
LogMessage logMessage = new LogMessage("WARN", message, getClassName()); DCNL LogMessage logMessage = new LogMessage("ERROR", message, getClassName());
if(args[0].equalsIgnoreCase("reload")) { DCNL if(Func.perm(player, "reload")) DCNL { DCNL Main.disolveBoards(); DCNL ConfigControl.get().reloadConfigs(); DCNL Main.loadBoards(); DCNL Func.smsg(player, "Scoreboard reloaded"); DCNL }
public String prefix = "snb!";
this.mode();//run
itemstack = irecipe.craftItem( craftInventory );
itemstack = irecipe.craftItem( craftInventory );
sb.append(generatedKey+": "+valFromCache.orElse("xxx")+"\n");
filteredDonations.add(new DonationDropOff("", new Location(""), DCNL "Search Failure", "", DCNL 0, Category.Other));
com.example.sotw.donationtracker.model.Location correctLocation = DCNL findCorrectLocation(marker.getTag().toString(), locationList);
public static com.example.sotw.donationtracker.model.Location findCorrectLocation( DCNL String markerTag, List<com.example.sotw.donationtracker.model.Location> locList) {
if(shortDescription == null && longDescription != null && !longDescription.isEmpty()){ DCNL }else if (shortDescription == null || shortDescription.isEmpty()){
if((first_letter == 'a') || (first_letter == 'e') DCNL || (first_letter == 'i') || (first_letter == 'o')){
dateTxtField.setText((realMonth >= 10 ? (realMonth + "") : ("0" + realMonth)) + "/" + year);
productImage = new ImageView(ServiceBuilder.getBASEURL()+"images/image?imageid="+ imageid);
@POST("statistics/years-period") DCNL @POST("statistics/days") DCNL @POST("statistics/months") DCNL @POST("statistics/years") DCNL @POST("statistics/line/revenue") DCNL @POST("statistics/line/sales")
Chromosome.newChr(m.getText(r, 1)),
}
String msg = newpost_text_box.getText().trim();

firstPlayer = currentPlayer;
Intent i = new Intent(this, YouWin.class);
deleteState = false; DCNL item.setVisible(false); DCNL ViewLitterature_Fragment nextFrag = new ViewLitterature_Fragment();
Character assignedChar = this.playerToAssignedChar.get(player); DCNL if (assignedChar != null) { DCNL if (x >= 0 && x <= 3 && y >= 0 && y <= 3) { DCNL char cellValue = this.board[y][x]; DCNL if (cellValue == 0) { DCNL if (this.turn.compareAndSet(player, this.getNonTurn())) { DCNL throw new GameException("Bad move, invalid turn"); DCNL throw new GameException("Bad move, cell already filled"); DCNL throw new GameException("Bad move, invalid cell location (" + x + "," + y + ")"); DCNL throw new GameException("Player not in game");
iv.visitFieldGet(fieldExpr.getField(), false); DCNL iv.visitFieldGet(fieldExpr.getField(), true);
indexes.put("carbohydrate", new BPTree<Double,FoodItem>(64));
BPTree<Double,FoodItem> carbohydrateTree = indexes.get("carbohydrate"); DCNL carbohydrateTree.insert(foodItem.getNutrientValue("carbohydrate"), foodItem); DCNL indexes.put("carbohydrate", carbohydrateTree);
cursor = dc.loadTasks();
cursor = dc.loadTasks();
String title = question.getQuestionContent();
String title = question.getQuestionContent();
Intent intent = new Intent(SensorActivity.this, SettingsActivity.class); DCNL intent.putExtra("IMEINumber", IMEINumber); DCNL startActivity(intent);
if (first instanceof Variable && second instanceof Variable) { DCNL result = ((Variable) first).getName().equals(((Variable) second).getName()); DCNL } else { DCNL result = PsiEquivalenceUtil.areElementsEquivalent(first, second) || DCNL first.getText().equals(second.getText()); DCNL }
email.setDebug(true);
private ExecutorService threadPool;
import java.util.concurrent.*;
List<File> f = ff.get(60, TimeUnit.SECONDS); DCNL } catch (InterruptedException | ExecutionException | TimeoutException e ) {
if (casasPoints.containsKey(rest)) { DCNL int currPoints = casasPoints.get(rest); DCNL casasPoints.replace(rest, (currPoints + pointsToGive)); DCNL }
String endpoint = this.URL + "witsml/wells/";
String endpoint = this.URL + "witsml/wellbores/";
tokenString = this.AUTH.getJWT(qc.USERNAME, qc.PASSWORD).getToken();
package main.java;/** *  The <code>RandomNumber</code> class  offers facilities  *  for pseudorandom number generation. *  <p> *  An instance of this class is used to generate a stream of  *  pseudorandom numbers. The class uses a long seed, which is  *  modified using a linear congruential formula. See <ul> *  <li>Donald Knuth, <i>The Art of Computer Programming,  *  Volume 2</i>, Section 3.2.1. for general information about *  random number gerneration and  *  <li>S. Park and K. Miller, Random number generators: Good *  ones are hard to find, <i>Comm. ACM</i> 31 (1988) 1192-1201  *  for the specific one implemented here.   *  </ul> *  @see java.util.Random *  @see java.lang.Math#random() */public class RandomNumber {        private static final long MULTIPLIER = 16807;        private static final long MODULUS =  2147483647;        // Quotient of MODULUS / MULTIPLIER        private static final long QUOT = 127773;         // Remainder of MODULUS / MULTIPLIER        private static final long REM  = 2836;           /**         * The current seed of the generator.          */        private long currentSeed;            /**         * Constructs a RandomNumber object and initializes it         * with <code>System.currentTimeMillis()</code>         */        public RandomNumber() {                currentSeed = System.currentTimeMillis() % MODULUS;        }            /**         * Constructs a RandomNumber object and initializes it         * with the value <code>seed</code>         * @param seed A value that permits a controlled          * setting of the start seed.         */        public RandomNumber(long seed) {                currentSeed = Math.abs(seed) % MODULUS;        }                                /**         * Generates the next random number in the interval [0,1]         * @return The next random number in [0,1].         */        public double nextDoubleRand() {                long temp = MULTIPLIER*(currentSeed%QUOT) -                                 REM*(currentSeed/QUOT);                currentSeed = (temp > 0) ? temp : temp + MODULUS;                return (double) currentSeed / (double) MODULUS;        }                /**         * Generates a random int value between the given limits.         * @param lo The lower bound.         * @param hi The upper bound.         * @return An integer value in {lo,...,hi}         * @throws InvalidOperationException if lo > hi              */        public int nextIntRand(int lo, int hi)                                 throws InvalidOperationException {        	if ((Integer)lo == null || (Integer)hi == null) {        		throw new NullPointerException();        	}                if (lo > hi)                        throw new InvalidOperationException(                                "invalid range: " + lo + " > " + hi);                return (int) (nextDoubleRand() * (hi - lo + 1)  + lo);        }}
LinkedHashMap<VoteSite, Long> sorted = new LinkedHashMap<>( DCNL times.entrySet().stream().sorted(Collections.reverseOrder(Map.Entry.comparingByValue())) DCNL .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));
import static supportive.utils.StringUtils.normalizePath;
if ((!standardExclusions(inputData)) && DCNL (!normalizePath(inputData.getFile().getPath()).contains("/pages/")) && isComponent(new IntellijFileContext(inputData.getProject(), inputData.getFile())) DCNL ) {
import org.springframework.boot.web.server.ErrorPage; DCNL import org.springframework.boot.web.server.WebServerFactoryCustomizer; DCNL import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory; DCNL import org.springframework.http.HttpStatus; DCNL import org.springframework.web.servlet.config.annotation.ViewControllerRegistry; DCNL import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; DCNL public class WebConfig implements WebMvcConfigurer {
 DCNL schema.getColumnMap().values().parallelStream().forEach(column -> { DCNL return; DCNL IndexingStrategy indexingStrategy = indexFactory.getStrategy(column.getIndexType()); DCNL } catch (JSONException | OperationException ex) { DCNL }); DCNL 
import it.sevenbits.homework.io.ReaderException; DCNL import it.sevenbits.homework.io.WriterException;
public void format(final IReader reader, final IWriter writer) throws ReaderException, WriterException {
private int insertOperateLogLowerLimitTime = 1000 * 6;
insert.put("objectTypeCode", "systemLog");
if (StringUtils.isBlank(MapUtils.getString(insertOperateLog, "message")) && insertOperateLog.containsKey("flags")) {
read.seek(pieceIndex * pieceSize);
read.read(buffer);
read.seek(offset); DCNL read.write(pieceData, 0, length);
createResourceProvider(ResourceType.SEARCHPARAMETER, SearchParameter.class), DCNL createResourceProvider(ResourceType.NAMINGSYSTEM, NamingSystem.class) DCNL );
public void load(Reader reader, String origin) { DCNL public void load(File file, String origin, String charsetName) throws IOException, InvalidArgumentException { DCNL public void load(InputStream reader, String origin, String charsetName) throws IOException, InvalidArgumentException {
throw new InvalidArgumentException("Erroneous CML file");
this.interrupt(); DCNL 
List<Panel> panels = Lanes[i].getPanels(); DCNL p.addMouseMotionListener(this); DCNL ArrayList<Panel> panelsFromDisk = ProgramStateManager.getInstance().load(); DCNL panelsFromDisk.stream().forEach(panel -> { DCNL lanes.get(panel.getLaneName()).addPanel(panel); DCNL }); DCNL List<Panel> panels = Lanes[i].getPanels(); DCNL panels.stream().forEach(panel -> { DCNL add(panel); DCNL panel.addMouseListener(this); DCNL panel.addMouseMotionListener(this); DCNL });
System.out.println("clicked " + clickedPanel);
startLane = laneFinder(e); DCNL List<Panel> panels = startLane.getPanels(); DCNL int i = 0; DCNL for (Panel panel : panels) { DCNL if (e.getSource() == panel) { DCNL clickedPanel = panel; DCNL clickedPanelIndex = i; DCNL diffX = (int) Math.round(e.getPoint().getX() - panel.getBounds().getX()); DCNL diffY = (int) Math.round(e.getPoint().getY() - panel.getBounds().getY()); DCNL } DCNL i++; DCNL } DCNL Point mousePoint = e.getLocationOnScreen(); DCNL Lane foundLane = null; DCNL  DCNL for (int i = 0; i < 3; i++) { DCNL JLabel lane = LanePanels[i]; DCNL double yBound = lane.getBounds().getY(); DCNL double xBound = lane.getBounds().getX(); DCNL double height = lane.getBounds().getHeight(); DCNL double width = lane.getBounds().getWidth(); DCNL  DCNL if (yBound < mousePoint.getY() && (yBound + height) > mousePoint.getY() && xBound < mousePoint.getX() && (xBound + width) > mousePoint.getX()) { DCNL foundLane = Lanes[i]; DCNL } DCNL } DCNL return foundLane;
endLane = laneFinder(e);
import java.lang.reflect.GenericArrayType; DCNL import java.lang.reflect.Type; DCNL import java.math.BigDecimal; DCNL import java.util.ArrayList; DCNL import java.util.Collection; DCNL import java.util.HashMap; DCNL import java.util.Map; DCNL import java.util.Optional; DCNL import java.util.TreeMap; DCNL  DCNL import javax.json.JsonValue; DCNL import javax.json.bind.JsonbConfig; DCNL import javax.json.bind.JsonbException; DCNL import javax.json.bind.config.BinaryDataStrategy; DCNL import javax.json.bind.serializer.JsonbDeserializer; DCNL import javax.json.stream.JsonParser; DCNL 
if (orderStrategySet) { DCNL return TreeMap.class; DCNL } else { DCNL return HashMap.class; DCNL }
public Account getById(int id) throws CustomException {
account.setAccountnumber(account.getAccountnumber());
return Kernels.addWeightedPixelwise(clij, (ClearCLImage)( args[0]), (ClearCLImage)(args[1]), (ClearCLImage)(args[2]), asFloat(args[3]), asFloat(args[3])); DCNL boolean result = Kernels.addWeightedPixelwise(clij, (ClearCLBuffer)( args[0]), (ClearCLBuffer)(args[1]), (ClearCLBuffer)(args[2]), asFloat(args[3]), asFloat(args[4]));
@Plugin(type = CLIJMacroPlugin.class, name = "CLIJ_maxProjectionDimSelect")
while (!s2.equals(s1)) { DCNL Link link = bestRoutes.get(s2.getId()).get(s1.getId()); DCNL System.out.println("Graph is not connected"); DCNL this.installRule(s2, h1, port); DCNL s2 = switches.get(link.getDst());
requires jdk.incubator.httpclient; DCNL requires shared;
if (o == null || !getClass().equals(Hibernate.getClass(o))) {
final Map<String, SolrDocumentList> results = new LinkedHashMap<String, SolrDocumentList>();
ccrLicenseChecker.checkRemoteClusterLicenseAndFetchClusterState(client, request.getRemoteCluster(),
public final static String parameter_doc_multiplyScalar = "Image source, Image destination, Number scalar";
boolean isFirstIteration = true; DCNL if (!previousRowOrderID.equals(rs.getString("OrderID")) && !isFirstIteration ) { DCNL arOrd.add(o); DCNL } DCNL  DCNL if (!previousRowOrderID.equals(rs.getString("OrderID"))) {
isFirstIteration = false;
private Logger logger = LoggerFactory.getLogger(SoulissT1AHandler.class);
for (final Entry<String, PropertyInfo> propertyEntry : propertyMap.entrySet()) { DCNL final PropertyInfo info = propertyEntry.getValue(); DCNL scriptable.defineProperty(propertyEntry.getKey(), null, readMethod, writeMethod, ScriptableObject.EMPTY);
private WorkspacePermissionAuthorizer workspacePermissionAuthorizer; DCNL boolean hasPermission = workspacePermissionAuthorizer.hasPermission(permissionSet, resource, action);
boolean hasPermission = workspacePermissionAuthorizer.hasPermission(permissionSet, resource, action);
import com.sequenceiq.cloudbreak.authorization.WorkspacePermissionAuthorizer;
boolean hasPermission = workspacePermissionAuthorizer.hasPermission(userWorkspacePermissions.getPermissionSet(), WorkspaceResource.WORKSPACE, action);
public static int getSettingsViewDistance(Player player) { // Get View Distance in settings
import static me.lxct.bestviewdistance.functions.Get.getSettingsViewDistance; DCNL import static me.lxct.bestviewdistance.functions.data.Variable.playerViewDistance; DCNL import static me.lxct.bestviewdistance.functions.data.Variable.reductionIndice;
return String.valueOf(getSettingsViewDistance(player));
inputMap = mapper.readValue(jsonString, new TypeReference<Map<String, Object>>() {
jsonObj.add("vehicles", gson.toJsonTree(obj, listType));
VehicleModel vehicle = gson.fromJson(jsonObj.get("vehicle").toString(), VehicleModel.class); DCNL return vehicle;
Queue <VehicleModel> vehicles = gson.fromJson(jsonObj.get("vehicles").toString(), listType); DCNL return vehicles;
Book book;

applyFont (context, whatStyle ( attrs )); DCNL } DCNL  DCNL public void applyFont(Context context) { DCNL setTypeface( FaranegarUtils.getFont (context)); DCNL public void applyFont(Context context, int style){ DCNL switch (style){ DCNL case 0: DCNL setTypeface(FaranegarUtils.getFont (context)); DCNL break; DCNL case 1: DCNL setTypeface(FaranegarUtils.getBoldFont (context)); DCNL break; DCNL case 2: DCNL setTypeface(FaranegarUtils.getFontLight (context)); DCNL break; DCNL case 3: DCNL setTypeface(FaranegarUtils.getFontAwesome (context)); DCNL break; DCNL } DCNL  DCNL public int whatStyle(AttributeSet attrs) DCNL { DCNL if (attrs != null) DCNL { DCNL try { DCNL return  attrs.getAttributeIntValue( DCNL "http://schemas.android.com/apk/res/android", DCNL "textStyle", DCNL Typeface.NORMAL); DCNL } DCNL catch (Exception e) { DCNL return 0; DCNL } DCNL } DCNL return 0; DCNL } DCNL 
if(mode == null){ DCNL flashBtn.setVisibility(View.GONE); DCNL return; DCNL } DCNL flashBtn.setVisibility(View.VISIBLE);
import net.minecraftforge.fml.common.registry.IEntityAdditionalSpawnData; DCNL public abstract class EntityVehicle extends Entity implements IEntityAdditionalSpawnData

if (casProperties.getEvents().isTrackConfigurationModifications() && config != null && config.exists()) {
HttpGetHC4 httpPost = new HttpGetHC4(url_select);
shortBuffer.get(dest, index, count);
if(splitLocation[3].length() == 5 && splitLocation[3].matches("[0-9]+"))
if(splitLocation[3].length() == 5 && splitLocation[3].matches("[0-9]+"))
if(splitLocation[3].length() == 5&& splitLocation[3].matches("[0-9]+"))
if(splitLocation[3].length() == 5&& splitLocation[3].matches("[0-9]+"))
reconnect();
sb.append(" 	vdr_c.term_of_payment AS value1 ");
Optional<User> dbUser = userService.getUserById(user.get().getId()); DCNL if (!dbUser.isPresent()) { DCNL LOG.error("failed to to look up user by ID " + user.get().getId() + " when this ID should be valid"); DCNL throw new ValidationException("There was a problem looking up the current user"); DCNL } DCNL  DCNL project.getUsers().add(dbUser.get());
planElement = model.getDataDay(date).getPlanElementsDay(0).get(federalElementId);
Pattern pattern = Pattern.compile("^([a-z_]+_port(_ssl)?)\\s*:\\s*([0-9]+)\\s*$", Pattern.MULTILINE); DCNL int port = Integer.parseInt(matcher.group(3)); DCNL matcher.appendReplacement(sb, String.format("%s: %s", name, getPort(port, ports)));

GL11.glRotatef((float) Math.toDegrees(Math.atan2(light.vertices[i*6][6], light.vertices[i*6][5])), 0, 0, 1); DCNL GL11.glRotatef((float) Math.toDegrees(Math.acos(light.vertices[i*6][7])), 0, 1, 0); DCNL drawLightCone(light.size[i], false); DCNL drawLightCone(light.size[i], true);
private static void drawLightCone(double radius, boolean reverse){ DCNL GL11.glVertex3d(radius*Math.cos(theta), radius*Math.sin(theta), radius*3F); DCNL GL11.glVertex3d(radius*Math.cos(theta), radius*Math.sin(theta), radius*3F);
String queryString = "SELECT distinct sps FROM ProductServiceLine sps JOIN sps.deliveryOrder d " + DCNL "WHERE d IN (:orders)  " + DCNL "AND d.status <> :deliveryDiscarded " + DCNL "AND d.enterprise IN (:enterprises) "; DCNL setParameter("deliveryDiscarded", OrderStatus._3_discard).
private static final String STID_PATTERN = "R-(?!ICO)[A-Z]{3}-[0-9]{3,}(\\.[0-9]+)?";
public static final String ACTION_OPEN_RECIPE = "rilma.example.com.sweetculinary.utils.ServiceWidget";
List<Bookmark> findByTagSet(Set<String> tagSet);
public List<Bookmark> findByTagSet(Set<String> tagSet) { DCNL for (String tag : tagSet) {
callbackManager = CallbackManager.Factory.create(); DCNL 
LoginManager.getInstance().logInWithReadPermissions(this, Arrays.asList("public_profile")); DCNL LoginManager.getInstance().registerCallback(callbackManager, new FacebookCallback<LoginResult>() { DCNL @Override DCNL public void onSuccess(LoginResult loginResult) { DCNL } DCNL @Override DCNL public void onCancel() { DCNL } DCNL @Override DCNL public void onError(FacebookException exception) { DCNL } DCNL });
this.swarm = initSwarm(5, w, h, 2);
this.pPartition = (pNum + pType - 1) / pType;
} else if (p.id < pPartition * 2) {
startPlayListActivity(mCurrenMusicInfo.getTitle());
String s1 = "本地音乐加载完成 -_-  共" + size + "首歌"; DCNL mTvMusicCount.setText(s1);
mDetailsAdapter.setNewData(mDetailList);
primaryRimWidth = array.getFloat(R.styleable.NSidedProgressBar_nsidedProg_primaryRimWidth, 8); DCNL secondaryRimWidth = array.getFloat(R.styleable.NSidedProgressBar_nsidedProg_secondaryRimWidth, 9);
public static final long MAX_DURATION = DCNL Controller.getAppResources().getInteger(R.integer.session_duration_in_min) * 60L * 1000L;
public SQLToolkit toolkit = new SQLToolkit(); DCNL public Users user = new Users();
URL = URL + "/donationitems/getByLocation?name=";
private String keyPrefix = RedisCacheManager.DEFAULT_CACHE_KEY_PREFIX; DCNL private int expire = RedisCacheManager.DEFAULT_EXPIRE;
this.expire = expire;
public static final int DEFAULT_EXPIRE = 1800;
public byte[] set(byte[] key, byte[] value, int expireTime) { DCNL if (expireTime > 0) { DCNL jedis.expire(key, expireTime);
mainPage = new NewProcessProjectWizardPage("basicNewProjectPage");
public <E> Future<Message<String>> publishEntity(String topic, E entity, Class viewClass) {
public Future<Message<String>> publishString(String topic, String entity) {
Future<Message<String>> future = executor.submit(() -> { DCNL  DCNL Logger logger = LoggerFactory.getLogger("MQTT-update"); DCNL return message; DCNL log.error("Error sending data to MQTT. Topic: {}, Entity: {}", topic, entity, e); DCNL return null; DCNL  DCNL return future;
this.depth = depth < 0 ? Integer.MAX_VALUE : depth;
}
private static final Logger log = LoggerFactory.getLogger(ContextServiceImpl.class);
try { DCNL action.run(); DCNL } catch (ObjectOptimisticLockingFailureException e) { DCNL throw e; DCNL } catch (Exception e) { DCNL log.error("Async task results in error", e); DCNL } DCNL log.warn("Optimistic locking failed for object {} [id={}]", e.getPersistentClassName(), e.getIdentifier(), e);
private static final Logger log = LoggerFactory.getLogger(PlayerServiceImpl.class);
log.warn("Track error", exception); DCNL Long textChannel = null; DCNL if (instance.getCurrent() != null) { DCNL textChannel = instance.getCurrent().getChannelId(); DCNL } DCNL if (textChannel == null && CollectionUtils.isNotEmpty(instance.getPlaylist())) { DCNL textChannel = instance.getPlaylist().get(0).getChannelId(); DCNL } DCNL if (textChannel != null) { DCNL final long channelId = textChannel; DCNL contextService.withContext(instance.getGuildId(), () -> messageManager.onQueueError(channelId, DCNL "discord.command.audio.remote.error", exception.getMessage())); DCNL }
return data.length;
Map<String, Collection<String>> result = getDisableOrchestrationSchemaGroup().getSchemaGroup(); DCNL result.get(each).retainAll(slaveDataSourceNamesMap.get(each)); DCNL private OrchestrationSchemaGroup getDisableOrchestrationSchemaGroup() {
int diff = (Integer.parseInt(data[0]) - bargaining_power); DCNL brush_size -= diff; DCNL bargaining_power -= diff;
import maps.GUIs.PortalGUI;
 DCNL import maps.GUIs.CanvasGUI;
Post                   createdPost = postFacade.createPost(ac, post.contents, post.images == null ? new ArrayList<>() : post.images);
private List<PostFacade.ImageDeclaration> images = new ArrayList<>();
if (message != null) DCNL txtMessage.setText(message);
try { DCNL Class.forName(datasource.get("driver")); DCNL } catch (ClassNotFoundException e) { DCNL throw new IOException("Load jdbc driver fail: " + datasource.get("driver")); DCNL }
startActivity(new Intent(this, PatientInfo.class));
startActivity(new Intent(this, LoginActivity.class));

final SynchData.Mode mode = synchView.getSynchData().getMode();
headline = new JLabel("HIGHSCORES"); DCNL headline.setFont(new Font("Helvetica", Font.PLAIN, 50));
cardlayout.show(pnlMain, "Highscores");
thunderstorm.setLooping(true);}
this.player.sendMessage(ChatColor.RED DCNL + "Uups, I don't know you! Maybe try to login again. See console for more information!"); DCNL Manager.plugin.getLogger().warning( DCNL "Could not identify " + this.player.getName() + ". Check your config and class configuration."); DCNL if (!player.getPlayer().isOp() && !player.hasPermission(cmd.getPermission())) {
 DCNL if (player.isOp() || player.hasPermission("rc.admin") || player.hasPermission("rc.*") DCNL || player.hasPermission("*") || player.hasPermission("'*'")) { DCNL return new HashSet<String>(permissions);
if (permission == null || player == null || !permission.hasGroupSupport())
if (permission != null && permission.hasGroupSupport())
return "hello";
Assert.state(isValidCheckpointConfig(checkpointConfig), DCNL log.info("ServiceBusTemplate checkpoint config becomes: {}", this.checkpointConfig);
private static boolean isValidCheckpointConfig(CheckpointConfig checkpointConfig) {
import mdlaf.shadows.DropShadowBorder; DCNL import mdlaf.utils.MaterialColors; DCNL import mdlaf.utils.MaterialFonts; DCNL  DCNL import javax.swing.*; DCNL import javax.swing.border.Border; DCNL import javax.swing.border.TitledBorder; DCNL import java.awt.*; DCNL  DCNL public class MaterialTitleBorder implements Border{ DCNL  DCNL private TitledBorder titledBorder; DCNL  DCNL public MaterialTitleBorder(String title){ DCNL titledBorder = new TitledBorder(title); DCNL setBorder(); DCNL setFont(); DCNL } DCNL  DCNL public MaterialTitleBorder(Border border){ DCNL titledBorder = new TitledBorder(border); DCNL setFont(); DCNL } DCNL  DCNL private void setBorder() { DCNL Border border = BorderFactory.createTitledBorder(new DropShadowBorder(MaterialColors.BLACK, 3, 3, (float)0.5, 5, true, true, true, true)); DCNL titledBorder.setBorder(border); DCNL } DCNL  DCNL private void setFont(){ DCNL titledBorder.setTitleFont(MaterialFonts.BOLD); DCNL } DCNL  DCNL public void setTitle​(String title){ DCNL titledBorder.setTitle(title); DCNL } DCNL  DCNL public void setTitleColor​(Color titleColor){ DCNL titledBorder.setTitleColor(titleColor); DCNL } DCNL  DCNL public void setTitleFont​(Font titleFont){ DCNL titledBorder.setTitleFont(titleFont); DCNL } DCNL  DCNL public void setTitleJustification​(int titleJustification){ DCNL titledBorder.setTitleJustification(titleJustification); DCNL } DCNL  DCNL public void setTitlePosition​(int titlePosition){ DCNL titledBorder.setTitlePosition(titlePosition); DCNL } DCNL  DCNL public TitledBorder getTitledBorder() { DCNL return titledBorder; DCNL } DCNL  DCNL @Override DCNL public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) { DCNL titledBorder.paintBorder(c, g, x, y, width, height); DCNL } DCNL  DCNL @Override DCNL public Insets getBorderInsets(Component c) { DCNL return titledBorder.getBorderInsets(c); DCNL } DCNL  DCNL @Override DCNL public boolean isBorderOpaque() { DCNL return titledBorder.isBorderOpaque(); DCNL }
game.allPlayerIds().forEach((pid) -> { DCNL if (gameId.equals(playerIdGameIdMap.get(pid))) { DCNL playerIdGameIdMap.remove(pid); DCNL } DCNL });
int nextY = x == 8? y +1: y;
final TableId completeTableId = DCNL tableId.setProjectId( DCNL Strings.isNullOrEmpty(serviceOptions.getProjectId()) DCNL ? tableId.getProject() DCNL : serviceOptions.getProjectId());
jobId.setProjectId( DCNL Strings.isNullOrEmpty(jobId.getProject()) DCNL ? getOptions().getProjectId() DCNL : jobId.getProject()), DCNL writeChannelConfiguration.setProjectId( DCNL Strings.isNullOrEmpty(jobId.getProject()) DCNL ? getOptions().getProjectId() DCNL : jobId.getProject()));
return new URIBuilder(url).removeQuery().toString();
this.imageURL = imageURL == null ? null : imageURL.toString();
arrowA.setArrowExtent(joint.getPivotA(null));
if(!this.ontologyFactory.usesTripleStore(kb) || !this.batch)
timer.setText(value % 6 == 0 && value != 0 ? "5" : DCNL String.valueOf(Math.max(value % 6 - 1, 0)));
LocalDbHandlerForImages localDbHandler = new LocalDbHandlerForImages(context, null, 1);
if (this.bytes.length > headerLength) { DCNL this.data = new byte[this.bytes.length - headerLength]; DCNL for (int i = headerLength; i < this.bytes.length; i++) {
if (i % 8 == 0) all += "\n";
if (i % 8 == 0) all += "\n";
if(lastPotential!=null){ DCNL if(lastPotential.getWidth()<=config.getBMAnalysisWindowMax()){ DCNL threadPotentials.add(lastPotential); DCNL }else{ DCNL List<List<StrandedBaseCount>> ipHits = new ArrayList<List<StrandedBaseCount>>(); DCNL for(ExperimentCondition cond : manager.getConditions()) DCNL ipHits.add(new ArrayList<StrandedBaseCount>()); DCNL for(ExperimentCondition cond : manager.getConditions()) DCNL for(ControlledExperiment rep : cond.getReplicates()) DCNL ipHits.get(cond.getIndex()).addAll(rep.getSignal().getBases(lastPotential)); DCNL List<Region> parts = breakWindow(lastPotential, ipHits, config.getBMAnalysisWindowMax(), '.'); DCNL for(Region p : parts) DCNL threadPotentials.add(p); DCNL } DCNL }
} DCNL if(p != null) { DCNL move = (z.getX() - p.getX() <= z.getMoveSpeed()) ? z.getX() - p.getX() - 1: move; DCNL } DCNL 
public void setRootPackageName(Class<?> clazz) { DCNL if (clazz.getPackage() == null) { DCNL throw new CicadaException(StatusEnum.NULL_PACKAGE, "[" + clazz.getName() + ".java]:" + StatusEnum.NULL_PACKAGE.getMessage()); DCNL } DCNL this.rootPackageName = clazz.getPackage().getName();
AppConfig.getInstance().setRootPackageName(clazz);
DUPLICATE_IOC("8000", "Duplicate ioc impl error"), DCNL  DCNL NULL_PACKAGE("8000", "Your main class is empty of package"),
return value.substring(0, length - 3) + abbrevMarker;
private TileItem(String name, @NotNull TextureHolder texture, @NotNull TileTypeEnum result, @Nullable TileTypeEnum... placeOn) {
import com.fasterxml.jackson.annotation.JsonBackReference; DCNL import javax.persistence.*; DCNL @Entity(name = "posts") //required DCNL  DCNL @Id // required. Hibernate maps this attribute to a table column named "id" DCNL @GeneratedValue(strategy = GenerationType.IDENTITY) //enable auto ID generation DCNL private Long id; DCNL private String title; DCNL private String subtitle;                            // } maps attributes automagically DCNL private String leadImage; DCNL private String body; DCNL  DCNL public Post() {} DCNL  DCNL public Post(Long id, String title, String subtitle, String leadImage, String body, User user) { DCNL this.id = id; DCNL this.title = title; DCNL this.subtitle = subtitle; DCNL this.leadImage = leadImage; DCNL this.body = body; DCNL this.user = user; DCNL } DCNL  DCNL @ManyToOne DCNL @JsonBackReference DCNL private User user; DCNL  DCNL public Long getId() { DCNL return id; DCNL } DCNL  DCNL public void setId(Long id) { DCNL this.id = id; DCNL } DCNL  DCNL public String getTitle() { DCNL return title; DCNL } DCNL  DCNL public void setTitle(String title) { DCNL this.title = title; DCNL } DCNL  DCNL public String getSubtitle() { DCNL return subtitle; DCNL } DCNL  DCNL public void setSubtitle(String subtitle) { DCNL this.subtitle = subtitle; DCNL } DCNL  DCNL public String getLeadImage() { DCNL return leadImage; DCNL } DCNL  DCNL public void setLeadImage(String leadImage) { DCNL this.leadImage = leadImage; DCNL } DCNL  DCNL public String getBody() { DCNL return body; DCNL } DCNL  DCNL public void setBody(String body) { DCNL this.body = body; DCNL } DCNL  DCNL public User getUser() { DCNL return user; DCNL } DCNL  DCNL public void setUser(User user) { DCNL this.user = user; DCNL }
AssetUtil.copyAssetFileWithoutPath(context, traineddataFilePath, dirToCopy, false);
if (tileEntity instanceof TileEntityTelescopeFake) { DCNL BlockPos mainBlockPosition = ((TileEntityTelescopeFake) tileEntity).mainBlockPosition; DCNL  DCNL if (mainBlockPosition != null) { DCNL return world.getBlockState(pos).getBlock().getBedDirection(world.getBlockState(mainBlockPosition), world, mainBlockPosition); DCNL } DCNL } DCNL if (tileEntity instanceof TileEntityTelescopeFake) { DCNL BlockPos mainBlockPosition = ((TileEntityTelescopeFake) tileEntity).mainBlockPosition; DCNL  DCNL if (mainBlockPosition != null) { DCNL return world.getBlockState(pos).getBlock().isBed(world.getBlockState(mainBlockPosition), world, mainBlockPosition, player); DCNL } DCNL }
String value = pref.getString(key, String.valueOf(def_value)); DCNL return Integer.parseInt(value); DCNL public static final int getRealInt(final SharedPreferences pref, final String key, final int defValue) { DCNL return pref.getInt(key, defValue); DCNL } DCNL  DCNL String value = pref.getString(key, String.valueOf(def_value)); DCNL return Float.parseFloat(value);
int value = Common.getRealInt(prefs, key, Common.DEF_COLOR);
int value = Common.getRealInt(prefs, key, Common.DEF_SPEED_WAY);
(RegionCoprocessorEnvironment)getUtility() DCNL .getOnlineRegions(PhoenixDatabaseMetaData.SYSTEM_TASK_HBASE_TABLE_NAME)
if (activePile.getPileType() == Pile.PileType.STOCK || card.isFaceDown()) DCNL int idx = activePile.getCards().size()-1; DCNL if (card.equals(activePile.getCards().get(i))) DCNL idx = i; DCNL } DCNL  DCNL for (int i = idx; i < activePile.getCards().size(); i++) { DCNL Card card1 = activePile.getCards().get(i); DCNL Card card2 = activePile.getCards().get(i+1); DCNL if(Card.isOppositeColor(card1,card2)&&Card.rankCheck(card1,card2)){ DCNL draggedCards.add(card1);
if (!guipaiTypeSet.contains(gangmoShoupai) && MajiangPai.isZipai(gangmoShoupai) DCNL && player.getShoupaiCalculator().count(gangmoShoupai) == 0) {
if (!isValid(shoupaiPaiXing, false)) {
if (!isValid(shoupaiPaiXing, false)) {
if (duizi != null && !duizi.yuanPaiFenZu() && !zimo) {
String password, DCNL String surnameUser DCNL ) {
String password, DCNL String surnameUser) {
 DCNL UserData userData = new UserData(); DCNL userData.setIdUsers(cursor.getInt(cursor.getColumnIndex(COLUMN_ID))); DCNL userData.setLogin(cursor.getString((cursor.getColumnIndex(COLUMN_LOGIN)))); DCNL userData.setPassword(cursor.getString((cursor.getColumnIndex(COLUMN_PASSWORD)))); DCNL userData.setNameUser(cursor.getString((cursor.getColumnIndex(COLUMN_NAME)))); DCNL userData.setSurnameUser(cursor.getString((cursor.getColumnIndex(COLUMN_SURNAME)))); DCNL 
private final Logger logger = LoggerFactory.getLogger(this.getClass()); DCNL  DCNL  DCNL logger.debug("getScoreDetails called"); DCNL 
return Constants.WON_THE_SET;
if (postData.length() != 0) { postData.append('&'); }
List<DiscreditBlacklist> selectByUrl(@Param("subject") String subject, @Param("url") String url, @Param("enterpriseName") String enterpriseName DCNL , @Param("judgeNo") String judgeNo, @Param("judgeAuth") String judgeAuth, @Param("discreditAction") String discreditAction); DCNL  DCNL  DCNL List<DiscreditBlacklist> selectByUniqueKey(@Param("uniqueKey") String uniqueKey);
int deleteByUrl(@Param("subject") String subject, @Param("url") String url, @Param("enterpriseName") String enterpriseName DCNL , @Param("judgeNo") String judgeNo, @Param("judgeAuth") String judgeAuth, @Param("discreditAction") String discreditAction);
public Color mainColor = Color.white, hoverColor = Color.cyan; DCNL private Color c = mainColor;
String bgLoadPath = path + "/" + BASE_FILES.get("tile_bg") + ".json"; DCNL String fgLoadPath = path + "/" + BASE_FILES.get("tile_fg") + ".json"; DCNL loadTiles(width, height, bgLoadPath, fgLoadPath, bg_tiles, fg_tiles);
public RawDBDemoGeoIPLocationService(ServletContext context) throws IOException { DCNL  DCNL String dbLoc = context.getRealPath("/WEB-INF/GeoLite2-City.mmdb");
ServletContext context = this.getServletContext(); DCNL RawDBDemoGeoIPLocationService rdb = new RawDBDemoGeoIPLocationService(context);
User user = userService.updateUser(firstName, lastName, userId); DCNL return new ResponseEntity<>(user, HttpStatus.OK);
@Table(name = "item")
 DCNL public void setType(String type) { DCNL this.type = type; DCNL }
@Modifying (clearAutomatically = true, flushAutomatically = true) DCNL int updateUser (String firstName, String lastName, int id);
int updateUser = userRepository.updateUser(firstName, lastName, id); DCNL User user = userRepository.getUserById(id); DCNL return user;
import org.molgenis.navigator.resource.Resource.Type;
Resource.create(Type.valueOf(jsonResource.get("type")), jsonResource.get("id"),null,null));
return type == Template.class;
int index; DCNL String label = buffer.substring(index = (mBuffer.indexOf(':') == -1 ? 1 : mBuffer.indexOf(':') + 1), firstSpace); DCNL CommandSuggestionEvent event = new CommandSuggestionEvent(worldEdit.wrapCommandSender(sender), buffer.substring(index, buffer.length()));
System.out.println(String.format("max unique string is from index %s and the substring is %s", maxStart, s.substring(maxStart, maxStart+maxSize)));
if(MissingPayments!=0) this.ExpectedBank = calcExpectedBank(); DCNL else this.ExpectedBank=this.Bank; DCNL 
for (Member m : this.Members) { DCNL if (m != null) { // added check for nulldom DCNL runsum += new Subscription(0, m).getPrice();
static final BatchedBlockingQueue<HashMap<String, Object>> seedBag = new CoordinatorSeedBag<>("localhost", 8080); DCNL static final CTrieMap<String, Integer> cTrieMap = new CoordinatorCTrie<>("localhost", 8080); DCNL static AtomicReference<TrieMap<String, Integer>> snapshot = new AtomicReference<>(cTrieMap.snapshot());
super("Seen state");
mSocket.emit("tune_bin", id, new JSONObject(data));
public static final float PERSONAL_MISSILE_SPEC_PERK_HEALTH_BONUS = 40f; DCNL public static final float FLEET_MISSILE_SPEC_PERK_HEALTH_BONUS = 10f; DCNL public static final float PERSONAL_MISSILE_SPEC_PERK_DAMAGE_BONUS = 20f; DCNL public static final float FLEET_MISSILE_SPEC_PERK_DAMAGE_BONUS = 5f;
DB_folder dbFolder = new DB_folder(act,Pref.getPref_focusView_folder_tableId(act)); DCNL mStyle = dbFolder.getPageStyle(TabsHost.getFocus_tabPos(), true); DCNL  DCNL mDb_page = new DB_page(act, Pref.getPref_focusView_page_tableId(act));
import com.cw.litenotes.util.preferences.Pref;
db_page = new DB_page(act, Pref.getPref_focusView_page_tableId(act));
out.print(tabs + "\t\t\"exp\":{\"op\":\"U\", \"left\":true, \"right\":"); DCNL reachTarget.booleanExpression().writeJani(out, 3);
reachTarget.booleanExpression().writeJani(out, 3);
g2.fillArc(i%3*getWidth()/3, i/3*getHeight()/3, getWidth()/3, getHeight()/3, 90, (int) (-360*list.find(i).stream().collect(Collectors.averagingDouble(n->{n.update(); return n.progress;}))));
ps = connection.prepareStatement("Update experience_level SET level_name = ?, threshold = ? WHERE id = ?;");
 DCNL if (tip == null) { DCNL throw new RuntimeException("Failed to get random tip, most likely a bootstrapping issue."); DCNL } DCNL  DCNL return tip;
diffMapAdapter = gson.getAdapter(diffMapType);
private static final TypeToken<Map<String, String>> attributesType = new TypeToken<Map<String, String>>() {}; DCNL  DCNL attributesTypeAdapter = gson.getAdapter(attributesType);
return Instant.from(DateTimeFormatter.ISO_INSTANT.parse((String)claimValue)); DCNL try { DCNL return ZonedDateTime.from(DateTimeFormatter.ISO_ZONED_DATE_TIME.parse((String)claimValue)) DCNL .toInstant(); DCNL } DCNL catch(DateTimeParseException e2){ DCNL throw new IllegalArgumentException("Unable to convert claim '" + claim + DCNL "' from string '" + claimValue + "' to Instant."); DCNL } DCNL "' of type '" + claimValue.getClass() + "' to Instant.");
if (!isInEditMode()) throw new IllegalStateException(exception);
int i = table.getSelectedRow(); DCNL String str = ((String) table.getValueAt(table.getSelectedRow(), 0)).replace("** ", ""); DCNL System.out.println(str); DCNL table.setValueAt(new Object[]{str}, i, 0); DCNL lblChoisirUnCorrespondant.setText("Conversation avec " + table.getValueAt(i, 0)); DCNL textPane.setText(Save_msg.conversations.get(table.getValueAt(i, 0)));
boolean isValid = (new File(path, "level.dat").exists()) && new File(path, "region").isDirectory(); DCNL for (File file : new File(path, "region").listFiles((dir, name) -> Pattern.matches("^.+\\.mc[r|a]$", name))) {
NBTIO.writeGZIPCompressed(new CompoundTag().putCompound("Data", levelData), new FileOutputStream(new File(path, "level.dat")), ByteOrder.BIG_ENDIAN);
@Min(0)
payment.setDayOfExecution(mapToDayOfExecution(paymentRequest.getDayOfExecution())); DCNL private int mapToDayOfExecution(DayOfExecution dayOfExecution) { DCNL return Optional.ofNullable(dayOfExecution) DCNL .map(d -> Integer.parseInt(d.toString())) DCNL .orElse(0); DCNL } DCNL 
int toLayer = toFlatNetwork.getLayerIndex().length - (fromFlatNetwork.getLayerIndex().length - layer); DCNL int toLayerInputCnt = toFlatNetwork.getLayerCounts()[toLayer]; DCNL int toIndexPos = toFlatNetwork.getWeightIndex()[toLayer - 1];
if(cb != null){ DCNL cb.called(obj); DCNL }
if(data.has("transaction") && data.getJSONObject("transaction").has("TransactionType")) DCNL { DCNL JSONObject tx = data.getJSONObject("transaction"); DCNL TransactionType type = TransactionType.valueOf(tx.getString("TransactionType")); DCNL if(Util.isChainsqlType(type)) { DCNL if(!("validate_success".equals(data.getString("status")))){ DCNL mapCache.remove(key); DCNL } DCNL }else {
try { DCNL val doc = dbClient.get(id); DCNL if (doc != null) { DCNL return doc.getService(); DCNL } DCNL } catch (final DocumentNotFoundException e) { DCNL LOGGER.info(e.getMessage()); DCNL return null; DCNL try { DCNL val doc = dbClient.get(id); DCNL if (doc != null) { DCNL return doc.getService(); DCNL } DCNL } catch (final DocumentNotFoundException e) { DCNL LOGGER.info(e.getMessage()); DCNL return null;
.antMatchers("/resources/**", "/static/**", "/css/**", "/js/**", "/images/**", "/webjars/**", "/error");
if (width <= 0) { DCNL log.error("User with username: " + user.getUsername() + " tried to resize image to 0 pixels"); DCNL model.addAttribute("message", "Please enter a number greater than 0 as width of the resized image"); DCNL return "error"; DCNL } DCNL log.error("User with username: " + user.getUsername() + " uploaded a non image file");
public @ResponseBody MediaCreatedModel create(@RequestParam MultipartFile file, HttpServletRequest request) { DCNL return new MediaCreatedModel(media, request.getContextPath(), wallRideProperties);
public MediaCreatedModel(Media media, String contextPath, WallRideProperties wallRideProperties) { DCNL this.link = contextPath + wallRideProperties.getMediaUrlPrefix() + media.getId();
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>" + DCNL "<form action=\"ContribRes\" method=\"post\" class=\"CONTRIBFORM\" enctype=\"multipart/form-data\"  accept-charset=\"UTF-8\">" +
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UF-8\"/>" + DCNL "<form action=\"ContribAdd\" method=\"post\" class=\"CONTRIBFORM\"  accept-charset=\"UTF-8\">" +
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>" + DCNL "<form action=\"ContribList\" method=\"post\" class=\"CONTRIBFORM\"  accept-charset=\"UTF-8\">" +
"<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>" +
NameDocT=item.getString("UTF-8"); DCNL ListFields.put(item.getFieldName(), item.getString("UTF-8"));
StoreManagerBuilder withPostProcessor(BiFunction<SerializableSnapshot, String, SerializableSnapshot> snapshotPostProcessor);
BiFunction<SerializableSnapshot, String, SerializableSnapshot> m_snapshotPostProcessor;
public StoreManagerBuilder withPostProcessor(BiFunction<SerializableSnapshot, String, SerializableSnapshot> snapshotPostProcessor) { DCNL checkState(m_snapshotPostProcessor == null, "Snapshot post processor function has been already set"); DCNL m_snapshotPostProcessor = snapshotPostProcessor;
return new StoreManagerImpl(m_transactionSerializer, m_transactionStore, m_snapshotSerializer, m_snapshotStore, m_snapshotPostProcessor, DCNL introspectionHelper, commandProxyFactory, commandDefinitions, entityDefinitions);
import static java.util.Collections.*;
SnapshotStore snapshotStore, BiFunction<SerializableSnapshot, String, SerializableSnapshot> snapshotPostProcessor, DCNL IntrospectionHelper introspectionHelper, CommandProxyFactory commandProxyFactory, DCNL Collection<CommandDefinition<? extends Command<?>>> commandDefinitions, Map<Class<?>, EntityDefinition<?>> entityDefinitions) {
}, snapshotPostProcessor)                                                                  //
transactionFuture.complete(emptyList()); // do not block anyway
SnapshotStore snapshotStore, SnapshotSerializer snapshotSerializer, Collection<CommandDefinition<? extends Command<?>>> commandDefinitions, DCNL StoreManagerImpl storeManager) {
Optional<BigInteger> loadStores(Function<String, EntityStores> entityStoresByStoreName, DCNL BiFunction<SerializableSnapshot, String, SerializableSnapshot> snapshotPostProcessor) {
if (m_storeManager.getApplicationModelVersion() > 0 && DCNL m_storeManager.getApplicationModelVersion() != serializableSnapshot.getApplicationModelVersion()) {
String email, String currentLeague, DCNL int trophies, int stars, int matchesWon, int totalMatches, double averageRating, DCNL int maxTrophies, List<ShopItem> itemsBought) {
String username, String email) {
String username, String email, String currentLeague, DCNL int trophies, int stars, int matchesWon, int totalMatches, DCNL double averageRating, int maxTrophies, DCNL List<ShopItem> itemsBought) {
ValueEventListener valueEventListener) {
AccountAttributes attribute, Object newValue) {
ValueEventListener valueEventListener) {
ValueEventListener valueEventListener) {
ValueEventListener valueEventListener) {
RoomAttributes attribute, Object newValue) {
ValueEventListener valueEventListener) {
ValueEventListener valueEventListener) {
RoomAttributes attribute) {
@NonNull DatabaseReference databaseReference) {
 DCNL  DCNL import static ch.epfl.sweng.SDP.utils.Preconditions.checkPrecondition; DCNL 
 DCNL import static ch.epfl.sweng.SDP.firebase.FbDatabase.checkForDatabaseError; DCNL 
private Node<T> left; DCNL private Node<T> right; DCNL private Node<T> parent; DCNL private T data; DCNL private int state;
public Node<T> minimum(Node<T> x){
public T getMinimum(){
public Node<T> maximum(Node<T> x){
public T getMaximum(){
public Node<T> getSuccessor(Node<T> x){
public boolean contains(T t){
public Node<T> find(T t){
public boolean insert(T t){
public boolean remove(Node<T> x){
public void preOrder(Node<T> x){
public void inOrder(Node<T> x){
public void postOrder(Node<T> x) {
public void layerTraverse(){
if ( options.outWidth > reqWidth || options.outHeight > reqHeight) { DCNL double widthRatio = (double) reqWidth / options.outWidth; DCNL double heightRatio = (double) reqHeight / options.outHeight; DCNL double ratio = (widthRatio < heightRatio) DCNL ? widthRatio DCNL : heightRatio; DCNL matrix.postScale((float) ratio, (float) ratio); DCNL }
throw new ControllerException("Введены неверный пароль или логин!"); DCNL return "library";
private String exceptionMsg; DCNL  DCNL public ControllerException(String exceptionMsg) { DCNL this.exceptionMsg = exceptionMsg; DCNL } DCNL  DCNL public String getExceptionMsg() { DCNL return this.exceptionMsg; DCNL } DCNL  DCNL public void setExceptionMsg(String exceptionMsg) { DCNL this.exceptionMsg = exceptionMsg;
Inventory skillDetailInventoryView = GuiHelper.createSkillDetailInventoryView(character, tree, tree.getSkillById(command));
ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_PASSWORD, PREFIX_EMAIL, PREFIX_ADDRESS,
fitness += Math.abs(gene[i] - TARGET_GENE[i]) == 0? 0:1;
arr[idx]    = rand.nextInt(2)==0? BLACK : WHITE;
arr[i] = rand.nextInt(2)==0? BLACK : WHITE;;
if(i%10 == 0) {
rawData = rawData.replace("\\", "\\\\"); DCNL rawData = rawData.replaceAll("\"","\\\\\"");

if (o == null || !getClass().equals(Hibernate.getClass(o))) {
userDO.setParent(true);
if (!StringUtil.isEmpty(userVO.getName())) { DCNL if (!StringUtil.isEmpty(userVO.getAvatar())) { DCNL if (!StringUtil.isEmpty(userVO.getOuterUnionId())) {
File destDir = new File(project.getBuild().getDirectory(), PluginConstants.SANDBOX);
holder.firebaseMethods.addNotification(user_id,from_id,type,likeMessage,holder.photo.getPhoto_id());
break;
while (true) { DCNL tokenVolume(); DCNL }
startActivity(new Intent(this, SectionBActivity.currentlyPR == 1 ? EndingActivity.class : SectionJActivity.class).putExtra("complete", true));
&& that.password.equals(this.password)
gameBoard = new GridBoard(9, 9,3);
GridNode nodeToAdd = new Space(j, i);
int nextPieces = initialState.getPlayerPieces() - (nextPlayer == BasePlayer.FIRST_PLAYER ? 1 : 0);
Integer reflectHp = new BigDecimal(hp * 0.3).intValue();
public static void teamGameEnd(Team attackTeam, Team defendTeam) { DCNL teamState(defendTeam, false);
LOG.teamGameEnd(attackTeam, defendTeam);
diffInPreval = Arrays.copyOf(diffInPrevalSel, selPt+1);
public Opt_ResFunc_IntroInfection(int numThreads, int[] simSel, DCNL String importPath, DCNL boolean[] OPT_TARGET_PREVAL_SEL,
int resLength = TARGET_PREVAL.length; DCNL  DCNL if (OPT_TARGET_PREVAL_SEL != null) { DCNL resLength = 0; DCNL for (boolean sel : OPT_TARGET_PREVAL_SEL) { DCNL resLength += sel ? 1 : 0; DCNL } DCNL } DCNL  DCNL double[] res = new double[resLength];
= new Callable_Opt_Prevalence_IntroInfection(opt, DCNL new File(importPath), DCNL OPT_TARGET_PREVAL_SEL,
Log.d(this.getClass().getSimpleName(), event.uid() + " with no org. unit or invalid eventDate");
package org.forgerock.bloomfilter;
TNTRun.getInstance().sound.ARENA_START(p);
if (i >= (getFireworkDuration() - 1)) {
: bi.pfg1096.isChecked() ? "961" DCNL : bi.pfg10i.isChecked() ? "962" DCNL : bi.pfg10j.isChecked() ? "963"
package Model; DCNL  DCNL import java.util.LinkedList; DCNL import java.util.Optional; DCNL  DCNL public class FirstFitAlgo implements Algo { DCNL  DCNL boolean[] memory; DCNL  DCNL public FirstFitAlgo(long totalmem){ DCNL memory = new boolean[(int)totalmem/1024]; DCNL } DCNL  DCNL public Long allocPs(Process unallocated){ DCNL long procsize = unallocated.getSize(); DCNL int start = 0; DCNL int open = 0; DCNL  DCNL for(int i = 0;i <= memory.length; i++) { DCNL if(!memory[i]){ DCNL open++; DCNL if(open >= procsize){ DCNL filler(start, open,true); DCNL unallocated.setStartTime(start + 1); DCNL return new Long (start + 1); DCNL } DCNL } else { DCNL open = 0; DCNL start = i; DCNL } DCNL } DCNL  DCNL return null; DCNL } DCNL  DCNL public boolean deallocate(Process allocated){ DCNL Optional<Integer> base = allocated.getBaseAddress(); DCNL int size = allocated.getSize(); DCNL  DCNL filler(base.get()-1,size,false); DCNL return true; DCNL } DCNL  DCNL private void filler(int index, int size, boolean change){ DCNL for(index+=1 ;index <= size ;index++){ DCNL memory[index] = change; DCNL } DCNL } DCNL }
import java.io.InputStream; DCNL import java.nio.file.StandardCopyOption;
InputStream newFile = getClass().getClassLoader().getResourceAsStream(resource); DCNL Files.copy(newFile, new File(endPath+"/"+resource).toPath());
}
return null;
if (selectedRoute != null) { DCNL selectedRoute.clearPredictions(Direction.INBOUND); DCNL selectedRoute.clearPredictions(Direction.OUTBOUND); DCNL selectedRoute.clearServiceAlerts(); DCNL refreshPredictions(true); DCNL refreshServiceAlerts(); DCNL }
if (Board.getMoney() < 50) { DCNL JOptionPane.showMessageDialog(null, "Not Sufficient Money"); DCNL view.getFrame().setCursor(DEFAULT_CURSOR); DCNL return; DCNL }else if (bn.hasPlant() || bn.hasZombie()) { DCNL view.getFrame().setCursor(DEFAULT_CURSOR);
else if (toPlant.equals("sunflower")) { DCNL else if (toPlant.equals("plant2")) { DCNL else if (toPlant.equals("sunflower2")) { DCNL view.getFrame().setCursor(DEFAULT_CURSOR);
data = new char[rows][cols]; DCNL clear(); DCNL wordsToAdd = new ArrayList(); DCNL wordsAdded = new ArrayList(); DCNL Random randgen = new Random(); DCNL randgen.setSeed(seed); DCNL readfile(fileName);
order_Data.clear(); DCNL 
import com.fasterxml.jackson.annotation.JsonIgnoreProperties; DCNL @JsonIgnoreProperties(ignoreUnknown = true) public class GetTransactionIdResponse {
Matcher matcher = Pattern.compile(pattern, Pattern.DOTALL).matcher(input);
obsSummaryDS.addParameter(new Parameter("questionConceptIds", "Question Concept", Integer.class, List.class, null));
this.adjustedRule = "Interval Round";
ORGANISM_PART("Organism part", "The tissue from which the sample is originally derived, e.g. lung"); DCNL FacetsToTooltipMapping(String title, String tooltip) { DCNL public String getTooltip() {
private String getTooltipText(String group) {
regResult = transactionDTO.getAddress().matches(ETH_REG); DCNL regResult = transactionDTO.getAddress().matches(USDT_REG_ARR);
Assert.notNull(user, MessageConstants.getMsg("USER_NOT_EXIST"));
return userName;
double value = config.getDouble(doubleAnnotation.path(), defaultValue);
private long homeid; DCNL 
public long getHomeid() { DCNL public void setHomeid(long homeid) {
private int xyToNum(int x, int y, int N) { DCNL private void unionNeighbour(int row, int col, int adjacentR, int adjacentC) {
throw new java.lang.IllegalArgumentException DCNL ("The value of N should be greater than zero"); DCNL uf = new WeightedQuickUnionUF(N * N + 2); DCNL for (int i = 0; i < N; i++) { DCNL for (int j = 0; j < N; j++) {
unionNeighbour(row, col, row - 1, col); DCNL unionNeighbour(row, col, row + 1, col); DCNL unionNeighbour(row, col, row, col - 1); DCNL unionNeighbour(row, col, row, col + 1);
while ( ! per.percolates()) { DCNL if ( ! per.isOpen(row, col)) {
JLabel important = new JLabel(Strings.get("windowToolbarPleaserestart")); DCNL important = new JLabel(Strings.get("windowToolbarImportant"));
panel.add(new JLabel(Strings.get("windowToolbarLookandfeel")));
case R.id.imageView12:

import ch.epfl.sweng.eventmanager.inject.GlideApp;
GlideApp.with(this).load(ev.getImageURL()).into(eventImage);
import ch.epfl.sweng.eventmanager.inject.GlideApp;
GlideApp.with(context).load(mEvents.get(position).getImageURL()).into(holder.eventThumbnail); DCNL GlideApp.with(context).load(mEvents.get(position).getImageURL()).into(holder.eventThumbnail);
"assets/Image/explosion/0.png", DCNL "assets/Image/explosion/1.png", DCNL "assets/Image/explosion/2.png", DCNL "assets/Image/explosion/3.png", DCNL "assets/Image/explosion/4.png", DCNL "assets/Image/explosion/5.png"
if(shouldIgnoreNeighbor(sender))
private boolean shouldIgnoreNeighbor(Neighbor sender) { DCNL  DCNL if(sender.stats.prevReceivedAll > ict.getProperties().maxTransactionsPerRound) DCNL return true; DCNL  DCNL int sumReceived = 0; DCNL for(Neighbor neighbor: ict.getNeighbors()) DCNL if(!neighbor.getAddress().equals(sender.getAddress())) DCNL sumReceived += neighbor.stats.prevReceivedAll; DCNL  DCNL if(sumReceived == 0) DCNL return false; DCNL  DCNL double divisor = ict.getNeighbors().size() - 1; DCNL if(divisor <= 0) DCNL return false; DCNL  DCNL double avgReceived = sumReceived / divisor; DCNL  DCNL if(sender.stats.prevReceivedAll > 5 * avgReceived) DCNL return true; DCNL  DCNL return false; DCNL 
BoundlessKit.enableDebugMode(true);
if (null != result && !result.isEmpty() && result.get(JsonKey.CONTENTS) != null) { DCNL } else { DCNL ProjectLogger.log( DCNL "CourseEnrollmentActor:getCourseObjectFromEkStep Contnet not found for requested courseId " DCNL + courseId, DCNL LoggerEnum.INFO.name());
actor.sendError(Resources.INVALID_SHOP_ACTION, helpCmd);
actor.sendError(Resources.NOT_FOUND_NOTE);
import org.eclipse.iofog.process_manager.DockerUtil; DCNL import javax.json.JsonArray; DCNL import javax.json.JsonObject; DCNL import javax.json.JsonValue;
int pid = getPidByMicroserviceUuid(DockerUtil.getContainerName(microserviceUuid));
&& runningContainerNames.contains(DockerUtil.getContainerName(uuid))) {
List<Particle> toRemove = new ArrayList<>(); DCNL for (Particle particle : particles) {
toRemove.add(particle); DCNL  DCNL if (!toRemove.isEmpty()) { DCNL particles.removeAll(toRemove); DCNL }
throw new IllegalArgumentException("Professor do projeto nulo!"); DCNL throw new IllegalArgumentException("Professor do projeto nulo!");
return (float) Math.floor((other.getDiveUtcDateStart().getTime() - getDiveUtcDateEnd().getTime()) / 60000.0f);
boolean checkFile =  ARTHAS_LIB_DIR.exists() || ARTHAS_LIB_DIR.mkdirs(); DCNL if(!checkFile){ DCNL AnsiLog.error("cannot create directory {}: Permission denied", ARTHAS_LIB_DIR.getAbsolutePath()); DCNL System.exit(1); DCNL }
if (!isDumpArticleProcessable(dumpArticle)) {
try (Stream<Path> dumpSubPaths = Files.list(dumpFolderFile)) { DCNL List<Path> dumpSubFolders = dumpSubPaths
if (dumpFile.toFile().exists()) {
ListCouponAdapter.set_coupon_layout_view(this.findViewById(android.R.id.content).getRootView(), entity);
System.out.println(isClimbing); DCNL List<Tile> tiles = getObjectsAtOffset(0, -5, Tile.class); DCNL if (tiles.isEmpty()) { DCNL isClimbing = false; DCNL } DCNL for (Tile tile : tiles) {
} else { DCNL isClimbing = false; DCNL }
System.out.println("length mismatch (" + o.intOutputs.length + ", " + intOutputs.length);
char[] retChar = new char[pat.length + sub.length + str.length + printBuf.length];
errNoCheck("Start tag \u201C" + name + "\u201D seen but an element of the same type was already open.");
this((path.equals("/") || path.equals("")) ? emptyList() : asList(validated(path).split("/")));
if(view.getBounds() != null) { DCNL requestBuilder.addParameter(ParamType.BOUNDING_BOX, "[" + view.getBounds().toUrlValue(6) + "]");
public LatLngBounds getBounds() { DCNL if(autoComplete.getPlace() != null && autoComplete.getPlace().getGeometry() != null) { DCNL return autoComplete.getPlace().getGeometry().getViewPort();
if (e.getMessage() != null) { DCNL okHttpInterface.status(900, e.getMessage()); DCNL } else { DCNL okHttpInterface.status(900, "Exception"); DCNL }
.child("Groups").child(country).child(pin).child(key1).child(key2);
Log.d(TAG,databaseError.getMessage()); DCNL 
public static final String PIPELINE_VERSION = "1.9.21";
if ((creator.equals("lofreq_scalpel_manta") DCNL || (creator.equals("GATK / HaplotypeCaller") && getSampleMetricsStr("set").equals("MNPoster"))) DCNL && sampleMetrics.containsKey("AF")) {
Printer.print("\nCoordinator is considered crashed permanently!", "red");
 DCNL  DCNL 
 DCNL  DCNL  DCNL 
 DCNL securityDataSource.setDriverClass("com.mysql.jdbc.Driver"); DCNL } DCNL catch (PropertyVetoException exc) { DCNL  DCNL getIntProperty("connection.pool.initialPoolSize")); DCNL 
 DCNL  DCNL  DCNL  DCNL  DCNL return props; DCNL  DCNL public LocalSessionFactoryBean sessionFactory(){ DCNL sessionFactory.setPackagesToScan(env.getProperty("hiberante.packagesToScan"));
 DCNL } DCNL  DCNL  DCNL }
import com.javaspringprojects.securityrestful.dao.RoleDao; DCNL import com.javaspringprojects.securityrestful.dao.UserDao; DCNL import com.javaspringprojects.securityrestful.entity.Role; DCNL import com.javaspringprojects.securityrestful.entity.User; DCNL import com.javaspringprojects.securityrestful.user.CustomRegisterUser;
import java.util.Arrays; DCNL import java.util.Collection; DCNL import java.util.stream.Collectors; DCNL 
 DCNL @Override DCNL public void initialize(ValidEmail constraintAnnotation) { DCNL  DCNL }
throw new ArithmeticException("Negative decimal cannot be converted to binary in this method.");
consumerContainer = consumerContainerFactory.create(configuration, connectionRepository);
exchangeDeclarations.add(exchangeDeclaration); DCNL queueDeclarations.add(exchangeDeclarationConfigEntry);
String paramStr = null; DCNL if (params != null) { DCNL paramStr = JsonUtils.arrayToString(params); DCNL }
if (result == null) { DCNL return null; DCNL } DCNL  DCNL return JsonUtils.objectToString(result);
return createMessage(headers, null);
Query postsQuery = database.child("posts").orderByKey().limitToFirst(5);
Intent intent = new Intent(this, FeedActivity.class);
private void sendRIP(Iface iface, boolean request, boolean reply, Ethernet originEther) {
ether.setDestinationMACAddress((!reply ? MACAddress.valueOf("FF:FF:FF:FF:FF:FF").toBytes()
rip.setCommand(!request ? RIPv2.COMMAND_RESPONSE : RIPv2.COMMAND_REQUEST);
sendRIP(iface, false, false, null);
 DCNL  DCNL 
Item[] dropsNull = {new Item(0)}; DCNL event.setDrops(dropsNull);
"\n----|input (2) for at spille med GUIinterface(graphical User Interface), denne er endnu begrænset implementeret"
private static final Model model = Model.getInstance(); DCNL welcomeMessage.setText("Welcome, " + model.getCurrentAccount().getUsername()); DCNL if (model.getLocationCount() <= 0) {
private final Model model = Model.getInstance(); DCNL model.configureDatabase(getApplicationContext());
private static AppDatabase db;
 DCNL int firstSpace = line.indexOf(' '); DCNL  DCNL String key = line.substring(0, firstSpace);
Publishers.isConvertibleToPublisher(typeVariableType) || DCNL ClassUtils.isJavaLangType(typeVariableType);
Box boxPassword = crearCombo(horizontalStructureSize, "Contrase�a", txtPassword);
public class AddBookActivity extends AppCompatActivity {
try { DCNL Intent intent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); DCNL startActivityForResult(intent, CAMERA_PIC_REQUEST); DCNL } catch (Exception ex) { DCNL Log.e("Camera failure: ", ex.getStackTrace().toString()); DCNL }
public class MyBooksActivity extends AppCompatActivity {
handler = exceptionHandlerRegistry.get(Exception.class); DCNL return exceptionHandlerRegistry.get(Throwable.class);
familySamples.add(new MetricFamilySamples("ServiceComb_Metrics", Type.UNTYPED, "ServiceComb Metrics", samples));
mv.addObject("title", "Home Page"); DCNL mv.addObject("userClicksHome", true); DCNL return mv; DCNL } DCNL  DCNL @RequestMapping(value= "/about") DCNL public ModelAndView about() DCNL { DCNL ModelAndView mv = new ModelAndView("page"); DCNL mv.addObject("title", "About Us"); DCNL mv.addObject("userClicksAbout", true); DCNL return mv; DCNL } DCNL  DCNL @RequestMapping(value= "/contact") DCNL public ModelAndView contact() DCNL { DCNL ModelAndView mv = new ModelAndView("page"); DCNL mv.addObject("title", "Contact Us"); DCNL mv.addObject("userClicksContact", true);
@Size(min = ISBN_MIN_LENGTH, max = ISBN_MAX_LENGTH, message = "ISBN-13 tunnuksen pituus 13-17 merkkiä") DCNL if (!isValidISBN(this.isbn)) {
if (isbnInteger.length() == 17) { DCNL if (isbn.length() != 13) { DCNL return false; DCNL }
final DBObject query = new BasicDBObject(FieldHelper.FIELD_ID, user.getId());
bld.append(input.substring(i, commentStartIndex)); DCNL bld.append(input.substring(i, commentStartIndex + 2)); DCNL i = commentStartIndex + 2;
int size = Math.min(requestTimes.size(), responseTimes.size()); DCNL for (int i = 0; i < size; i++) {
@Cacheable(cacheNames = "crm-licence-auth", key = "{ #authentication.name, #authentication.credentials }") DCNL final String contactPostcode = StringUtils.deleteWhitespace(licence.getContact().getPostcode()); DCNL final String authPostcode = StringUtils.deleteWhitespace(postcode);
chars = x.length(); DCNL chars+= x.length() ; DCNL messages.add(currentMessage); DCNL 
jumpToCropLinePosition();
private void jumpToCropLinePosition() { DCNL invalidate();
jumpToCropLinePosition(); DCNL invalidate();
.addValue("acctNo", ((document == null) || (document.getAccountNumber() <= 0)) ? null : document.getAccountNumber()) DCNL .addValue("ssn", document != null ? document.getSsn() : null) DCNL .addValue("ldate", instant2SqlDate(document != null ? document.getLetterDate() : null)) DCNL .addValue("pdate", instant2SqlDate(document != null ? document.getPostmarkDate() : null)) DCNL .addValue("dob", instant2SqlDate(document != null ? document.getDateOfBirth() : null));
String sql = " select id" + DCNL " from document " +
final long maxSeconds = settings.getMaximumSkipWindow().as( TimeDuration.Unit.SECONDS ); DCNL if ( Duration.between( Instant.now(), pwNotifyStoredJobState.getLastCompletion() ).abs().getSeconds() > maxSeconds )
ImageView maintain = (ImageView)findViewById(R.id.maintain); DCNL ImageView rate = (ImageView) findViewById(R.id.rate); DCNL maintain.setOnClickListener(new View.OnClickListener() {
rate.setOnClickListener(new View.OnClickListener() {
return "quiz";
@GetMapping("/api/questions/bySubject/{subjectId}")


holder.textViewTaskNo.setText("TASK ID: " + String.valueOf(job.getTaskId())); DCNL holder.textViewTableNo.setText("TABLE ID: " + String.valueOf(job.getTableId()));

Log.d("JOBS", "Job list size: " + String.valueOf(jobsList.size())); DCNL Log.d("REMOVE_JOB",String.valueOf(taskId));
if(attachment.getType().toLowerCase().equals("video") || attachment.getType().toLowerCase().equals("gifv")) {
if(attachment.getType().toLowerCase().equals("image"))
if( notification.getType().toLowerCase().equals("mention") && notification.getAccount().getId().equals(targetedId))
if( attachment.getType().toLowerCase().equals("image")) DCNL if( attachment.getType().toLowerCase().equals("image")) DCNL if( attachment.getType().toLowerCase().equals("image")) DCNL if( attachment.getType().toLowerCase().equals("image"))
if( !card.getType().toLowerCase().equals("video")  && ( display_card || viewHolder.getAdapterPosition() == conversationPosition)) {
}else if(card.getType().toLowerCase().equals("video") && ( display_video_preview || viewHolder.getAdapterPosition() == conversationPosition)){
if( attachment.getType().toLowerCase().equals("image") || attachment.getType().toLowerCase().equals("unknown"))
if( attachment.getType().toLowerCase().equals("image") || attachment.getType().toLowerCase().equals("unknown"))
if( attachment.getType().toLowerCase().equals("image") || attachment.getType().toLowerCase().equals("unknown"))
if( attachment.getType().toLowerCase().equals("image") || attachment.getType().toLowerCase().equals("unknown"))
else if( attachment.getType().toLowerCase().equals("unknown"))
if (stampedVersion instanceof VersionImpl) { DCNL this.stampedVersionProperty = new SimpleObjectProperty<>((VersionImpl) stampedVersion); DCNL } else { DCNL this.stampedVersionProperty = null; DCNL }
if (stampedVersionProperty != null) { DCNL return "ObservableVersionImpl{" + stampedVersionProperty.get() + '}'; DCNL } DCNL return "ObservableVersionImpl{ no wrapped version }";
 DCNL PropertySheet propertySheet = new PropertySheet(); DCNL List<PropertySpec> propertiesToEdit = new ArrayList<>(); DCNL private final ArrayList<ChangeListener<CommitStates>> completionListeners = new ArrayList<>(); DCNL Map<ConceptSpecification, ReadOnlyProperty<?>> propertyMap; DCNL ObservableVersion observableVersion; DCNL Manifold manifold; DCNL  DCNL public PropertySheetMenuItem(Manifold manifold, DCNL ObservableCategorizedVersion categorizedVersion) { DCNL this.manifold = manifold; DCNL this.observableVersion = categorizedVersion; DCNL this.propertySheet.setPropertyEditorFactory(new PropertyEditorFactory(manifold)); DCNL this.propertySheet.setMode(PropertySheet.Mode.NAME); DCNL this.propertySheet.setSearchBoxVisible(false); DCNL this.propertySheet.setModeSwitcherVisible(false); DCNL } DCNL  DCNL @Override DCNL public void addCompletionListener(ChangeListener<CommitStates> listener) { DCNL completionListeners.add(listener); DCNL } DCNL  DCNL public void addPropertyToEdit(String nameOnPropertySheet, DCNL ConceptSpecification propertySpecification, DCNL PropertyEditorType propertyEditorType) { DCNL this.propertiesToEdit.add(new PropertySpec(nameOnPropertySheet, propertySpecification, propertyEditorType)); DCNL } DCNL  DCNL @Override DCNL public void cancel() { DCNL completionListeners.forEach((listener) -> { DCNL listener.changed(observableVersion.commitStateProperty(), CommitStates.UNCOMMITTED, CommitStates.CANCELED); DCNL }); DCNL completionListeners.clear(); DCNL } DCNL  DCNL public void commit() { DCNL try { DCNL CommitTask commitTask = Get.commitService() DCNL .commit(FxGet.editCoordinate(), "temporary comment", getVersionInFlight()); DCNL Optional<CommitRecord> optionalCommitRecord = commitTask.get(); DCNL completionListeners.forEach((listener) -> { DCNL listener.changed(observableVersion.commitStateProperty(), CommitStates.UNCOMMITTED, CommitStates.COMMITTED); DCNL }); DCNL completionListeners.clear(); DCNL } catch (InterruptedException | ExecutionException ex) { DCNL LOG.error(ex.getLocalizedMessage(), ex); DCNL FxGet.dialogs().showErrorDialog(ex.getLocalizedMessage(), ex); DCNL } DCNL } DCNL  DCNL public void prepareToExecute() { DCNL if (Platform.isFxApplicationThread()) { DCNL FxGet.rulesDrivenKometService() DCNL .populatePropertySheetEditors(this); DCNL } else { DCNL Platform.runLater(() -> { DCNL FxGet.rulesDrivenKometService() DCNL .populatePropertySheetEditors(this); DCNL }); DCNL } DCNL this.manifold.addEditInFlight(this); DCNL } DCNL  DCNL private Item addItem(Item item) { DCNL propertySheet.getItems() DCNL .add(item); DCNL return item; DCNL } DCNL  DCNL private PropertySheetItemConceptWrapper getConceptProperty(ConceptSpecification propertyConceptSpecification, DCNL String nameForProperty) { DCNL ReadOnlyProperty<?> property = getPropertyMap().get(propertyConceptSpecification); DCNL if (property == null) { DCNL int assemblageNid = observableVersion.getAssemblageNid(); DCNL OptionalInt propertyIndex = Get.assemblageService().getPropertyIndexForSemanticField( DCNL propertyConceptSpecification.getNid(), DCNL assemblageNid, manifold); DCNL if (propertyIndex.isPresent()) { DCNL property = observableVersion.getProperties().get(propertyIndex.getAsInt()); DCNL } DCNL } DCNL ObjectProperty<ConceptSpecification> conceptProperty = null; DCNL if (property instanceof ObjectProperty) { DCNL conceptProperty = (ObjectProperty<ConceptSpecification>) property; DCNL } else if (property instanceof CommitAwareIntegerProperty) { DCNL CommitAwareIntegerProperty intProperty = (CommitAwareIntegerProperty) property; DCNL conceptProperty = new CommitAwareConceptSpecificationProperty(intProperty); DCNL } DCNL if (conceptProperty == null) { DCNL throw new IllegalStateException("No property for: " + propertyConceptSpecification); DCNL } DCNL PropertySheetItemConceptWrapper item = new PropertySheetItemConceptWrapper( DCNL manifold, DCNL nameForProperty, DCNL conceptProperty); DCNL item.setSpecification(propertyConceptSpecification); DCNL return item; DCNL } DCNL  DCNL private PropertySheetStatusWrapper getStatusProperty(ConceptSpecification propertyConceptSpecification, DCNL String nameForProperty) { DCNL return new PropertySheetStatusWrapper(nameForProperty, DCNL (ObjectProperty<Status>) getPropertyMap().get(propertyConceptSpecification)); DCNL } DCNL  DCNL private PropertySheetTextWrapper getTextProperty(ConceptSpecification propertyConceptSpecification, DCNL String nameForProperty) { DCNL ReadOnlyProperty<?> property = getPropertyMap().get(propertyConceptSpecification); DCNL if (property == null) { DCNL int assemblageNid = observableVersion.getAssemblageNid(); DCNL OptionalInt propertyIndex = Get.assemblageService().getPropertyIndexForSemanticField( DCNL propertyConceptSpecification.getNid(), DCNL assemblageNid, manifold); DCNL if (propertyIndex.isPresent()) { DCNL property = observableVersion.getProperties().get(propertyIndex.getAsInt()); DCNL } DCNL getPropertyMap().put(propertyConceptSpecification, property); DCNL } DCNL StringProperty stringProperty = (StringProperty) property; DCNL  DCNL PropertySheetTextWrapper wrapper = new PropertySheetTextWrapper(nameForProperty, DCNL stringProperty); DCNL wrapper.setSpecification(propertyConceptSpecification); DCNL return wrapper; DCNL } DCNL  DCNL private PropertySheetItemIntegerWrapper getIntegerProperty(ConceptSpecification propertyConceptSpecification, DCNL String nameForProperty) { DCNL ReadOnlyProperty<?> property = getPropertyMap().get(propertyConceptSpecification); DCNL if (property == null) { DCNL int assemblageNid = observableVersion.getAssemblageNid(); DCNL OptionalInt propertyIndex = Get.assemblageService().getPropertyIndexForSemanticField( DCNL propertyConceptSpecification.getNid(), DCNL assemblageNid, manifold); DCNL if (propertyIndex.isPresent()) { DCNL property = observableVersion.getProperties().get(propertyIndex.getAsInt()); DCNL } DCNL getPropertyMap().put(propertyConceptSpecification, property); DCNL } DCNL IntegerProperty integerProperty = (IntegerProperty) property; DCNL  DCNL PropertySheetItemIntegerWrapper wrapper = new PropertySheetItemIntegerWrapper(nameForProperty, DCNL integerProperty); DCNL wrapper.setSpecification(propertyConceptSpecification); DCNL return wrapper; DCNL } DCNL  DCNL public Map<ConceptSpecification, ReadOnlyProperty<?>> getPropertyMap() { DCNL if (propertyMap == null) { DCNL propertyMap = observableVersion.getPropertyMap(); DCNL } DCNL  DCNL return propertyMap; DCNL } DCNL  DCNL public PropertySheet getPropertySheet() { DCNL return propertySheet; DCNL } DCNL  DCNL public List<Item> getPropertySheetItems() { DCNL List<Item> items = new ArrayList<>(); DCNL  DCNL propertiesToEdit.forEach( DCNL (propertySpec) -> { DCNL switch (propertySpec.propertyEditorType) { DCNL case CONCEPT: DCNL items.add( DCNL addItem( DCNL getConceptProperty( DCNL propertySpec.propertyConceptSpecification, DCNL propertySpec.nameOnPropertySheet))); DCNL break; DCNL case STATUS: DCNL items.add( DCNL addItem(getStatusProperty( DCNL propertySpec.propertyConceptSpecification, DCNL propertySpec.nameOnPropertySheet))); DCNL break; DCNL  DCNL case TEXT: DCNL items.add( DCNL addItem(getTextProperty( DCNL propertySpec.propertyConceptSpecification, DCNL propertySpec.nameOnPropertySheet))); DCNL break; DCNL case INTEGER: DCNL items.add( DCNL addItem(getIntegerProperty( DCNL propertySpec.propertyConceptSpecification, DCNL propertySpec.nameOnPropertySheet))); DCNL break; DCNL default: DCNL throw new RuntimeException("an Can't handle: " + propertySpec); DCNL } DCNL }); DCNL return items; DCNL } DCNL  DCNL @Override DCNL public ObservableVersion getVersionInFlight() { DCNL return this.observableVersion; DCNL } DCNL  DCNL public void setVersionInFlight(ObservableVersion version) { DCNL this.observableVersion = version; DCNL } DCNL  DCNL private static class PropertySpec { DCNL  DCNL final String nameOnPropertySheet; DCNL final ConceptSpecification propertyConceptSpecification; DCNL final PropertyEditorType propertyEditorType; DCNL  DCNL public PropertySpec(String propertySheetName, DCNL ConceptSpecification propertyConceptSpecification, DCNL PropertyEditorType propertyEditorType) { DCNL this.nameOnPropertySheet = propertySheetName; DCNL this.propertyConceptSpecification = propertyConceptSpecification; DCNL this.propertyEditorType = propertyEditorType; DCNL } DCNL  DCNL @Override DCNL public boolean equals(Object obj) { DCNL if (this == obj) { DCNL return true; DCNL } DCNL  DCNL if (obj == null) { DCNL return false; DCNL } DCNL  DCNL if (getClass() != obj.getClass()) { DCNL return false; DCNL } DCNL  DCNL final PropertySpec other = (PropertySpec) obj; DCNL  DCNL if (!Objects.equals(this.nameOnPropertySheet, other.nameOnPropertySheet)) { DCNL return false; DCNL } DCNL  DCNL return this.propertyEditorType == other.propertyEditorType; DCNL } DCNL  DCNL @Override DCNL public int hashCode() { DCNL int hash = 5; DCNL  DCNL hash = 79 * hash + Objects.hashCode(this.nameOnPropertySheet); DCNL hash = 79 * hash + Objects.hashCode(this.propertyEditorType); DCNL return hash; DCNL } DCNL  DCNL @Override DCNL public String toString() { DCNL return "PropertySpec{" + "propertySheetName=" + nameOnPropertySheet + ", propertyConceptSpecification=" DCNL + propertyConceptSpecification + ", propertyEditorType=" + propertyEditorType + '}'; DCNL } DCNL }
ObservableVersion uncommittedVersion = categorizedVersion.makeAutonomousAnalog(FxGet.editCoordinate()); DCNL propertySheetMenuItem.setVersionInFlight(uncommittedVersion); DCNL propertySheetMenuItem.prepareToExecute();
break; DCNL break; DCNL break;
break; DCNL break; DCNL break;
throw new IllegalArgumentException(" unknown colType " + colType);
public class IssueMoveConverter implements ConvertorI<IssueE, Object, IssueMoveDTO> {
Snackbar.make(view, msg, Snackbar.LENGTH_LONG).setAction(actionName, listener).show();
links.add(multipartFile.getOriginalFilename());
links.add(file.getOriginalFilename());
return -1;
char c = chars.pollFirst(); DCNL int link = getLinkIndex(c); DCNL if (link == -1) { DCNL throw new RuntimeException("Bad Character: "+ c); DCNL }
ret = constructor.newInstance(constructorArguments.toArray());
ImportActivity.this.finish();
container.adaptationSetChangesInPeriod.put(this.periodId, changes);
container.downloadTargetChangesInRepresntation.put(this.id, changes);
for (int k = prestart + prelength;  k>0 && k < start && k <= content.length; ++k) {
for (int k = prestart + prelength; k > 0 && k <= content.length; ++k) {
if(!clockNetNames.contains(currentLine[1])) { DCNL  DCNL currentBlock= parseInputBlock(); DCNL newBlock= true; DCNL  DCNL } DCNL else { DCNL newBlock= false; DCNL }
currentLine= readLineAndTokenize(); DCNL if(currentLine.length == 2) {	//check for correct number of arguments DCNL  DCNL if(!"pinlist:".equals(currentLine[0])) { //check for correct token at start of line DCNL ErrorReporter.reportSyntaxError("pinlist", currentLine[0], this); DCNL } DCNL  DCNL Net currentNet= structureManager.retrieveNet(currentLine[1], false); DCNL currentBlock.connect(currentNet, 1); //connect specified net to output pin of input block DCNL currentNet.setSource(currentBlock); //link block to net as only source DCNL  DCNL } DCNL else { DCNL ErrorReporter.reportInvalidTokenCount(2, this); DCNL } DCNL  DCNL return currentBlock;
private int ctgry_1; //관심카테고리1 DCNL private int ctgry_2; //관심카테고리1 DCNL private int ctgry_3; //관심카테고리1
public void insertBasicPsns(RegistUserDTO user);
private void download(Request request) { DCNL Response response = new Response(); DCNL Map<String, Object> textbook = new HashMap<>(); DCNL textbook.put("tocUrl", "https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_1126441512460369921103/artifact/1_1543475510769.pdf"); DCNL textbook.put("ttl", 86400); DCNL response.getResult().put("textbook", textbook); DCNL sender().tell(response, sender());
import java.util.Random; DCNL import com.alibaba.fastjson.JSONObject; DCNL  DCNL public class TLocal extends Thread{ DCNL  DCNL private final static ThreadLocal<String> t = new ThreadLocal<>(); DCNL  DCNL TLocal.TMap tmaps = null; DCNL public String getT() { DCNL return t.get(); DCNL } DCNL public void setT(String value) { DCNL t.set(value); DCNL } DCNL public static String getTimes(int i) { DCNL return String.valueOf(i); DCNL } DCNL  DCNL @Override DCNL public String toString() { DCNL return JSONObject.toJSONString(Thread.currentThread()); DCNL  DCNL static class TMap{ DCNL  DCNL  DCNL TLocal tl = new TLocal(); DCNL System.out.println(tl.toString()); DCNL 
scaffoldCfg.put("name", name); DCNL fj.info(String.format("%s : enter to use default [%s]:", key, val)); DCNL String option = scanner.nextLine(); DCNL if (!option.isEmpty()) { DCNL options.put(key, option); DCNL } else { DCNL options.put(key, val);
 DCNL StringBuilder queryString = new StringBuilder(); DCNL queryString.append("'"); DCNL  DCNL String query = string.replace("'", " ").replace("*", " "); DCNL queryString.append(query); DCNL  DCNL String[] queryTokens = query.split(" "); DCNL if (queryTokens[queryTokens.length - 1].length() >= 4) { DCNL queryString.append("*"); DCNL } DCNL  DCNL queryString.append("'"); DCNL  DCNL searchLiteral = vf.createLiteral(queryString.toString());
public void repl() {
} catch (ScriptException | ParseException e1) { DCNL } catch (ScriptException | FileNotFoundException | ParseException e) {
if (i == 28) DCNL else if (i == 29) DCNL stringBuilder.append('1'); DCNL else if (i == 37)
